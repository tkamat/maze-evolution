// Compiled by ClojureScript 1.9.946 {:static-fns true, :optimize-constants true}
goog.provide('cljs.js');
goog.require('cljs.core');
goog.require('cljs.core.constants');
goog.require('clojure.string');
goog.require('clojure.walk');
goog.require('cljs.env');
goog.require('cljs.spec.alpha');
goog.require('cljs.analyzer');
goog.require('cljs.compiler');
goog.require('cljs.tools.reader');
goog.require('cljs.tools.reader.reader_types');
goog.require('cljs.tagged_literals');
goog.require('goog.crypt.base64');
goog.require('cljs.source_map');
goog.require('goog.string.StringBuffer');
goog.require("cljs.core$macros");
cljs.js.debug_prn = (function cljs$js$debug_prn(var_args){
var args__8846__auto__ = [];
var len__8839__auto___20627 = arguments.length;
var i__8840__auto___20628 = (0);
while(true){
if((i__8840__auto___20628 < len__8839__auto___20627)){
args__8846__auto__.push((arguments[i__8840__auto___20628]));

var G__20629 = (i__8840__auto___20628 + (1));
i__8840__auto___20628 = G__20629;
continue;
} else {
}
break;
}

var argseq__8847__auto__ = ((((0) < args__8846__auto__.length))?(new cljs.core.IndexedSeq(args__8846__auto__.slice((0)),(0),null)):null);
return cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(argseq__8847__auto__);
});

cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic = (function (args){
var _STAR_print_fn_STAR_20626 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_fn_STAR_ = cljs.core._STAR_print_err_fn_STAR_;

try{return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.println,args);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_20626;
}});

cljs.js.debug_prn.cljs$lang$maxFixedArity = (0);

cljs.js.debug_prn.cljs$lang$applyTo = (function (seq20625){
return cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq20625));
});

/**
 * Given a namespace as a symbol return the relative path sans extension
 */
cljs.js.ns__GT_relpath = (function cljs$js$ns__GT_relpath(ns_sym){
return clojure.string.replace(cljs.analyzer.munge_path(ns_sym),".","/");
});
cljs.js.file__GT_ns = (function cljs$js$file__GT_ns(file){
var lib_name = cljs.core.subs.cljs$core$IFn$_invoke$arity$3(clojure.string.replace(file,"/","."),(0),(cljs.core.count(file) - (5)));
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(lib_name));
});
cljs.js.drop_macros_suffix = (function cljs$js$drop_macros_suffix(ns_name){
if(cljs.core.truth_(ns_name)){
if(clojure.string.ends_with_QMARK_(ns_name,"$macros")){
return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(ns_name,(0),(cljs.core.count(ns_name) - (7)));
} else {
return ns_name;
}
} else {
return null;
}
});
cljs.js.elide_macros_suffix = (function cljs$js$elide_macros_suffix(sym){
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.js.drop_macros_suffix(cljs.core.namespace(sym)),cljs.core.name(sym));
});
cljs.js.resolve_symbol = (function cljs$js$resolve_symbol(sym){
if(clojure.string.starts_with_QMARK_([cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(''),".")){
return sym;
} else {
return cljs.js.elide_macros_suffix(cljs.analyzer.resolve_symbol(sym));
}
});
cljs.js.read = (function cljs$js$read(eof,rdr){
var _STAR_ns_STAR_20630 = cljs.core._STAR_ns_STAR_;
cljs.core._STAR_ns_STAR_ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.js.drop_macros_suffix([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_ns_STAR_)].join('')));

try{return cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$eof,eof,cljs.core.cst$kw$read_DASH_cond,cljs.core.cst$kw$allow,cljs.core.cst$kw$features,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$cljs,null], null), null)], null),rdr);
}finally {cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_20630;
}});
cljs.js.atom_QMARK_ = (function cljs$js$atom_QMARK_(x){
return (x instanceof cljs.core.Atom);
});
cljs.js.valid_name_QMARK_ = (function cljs$js$valid_name_QMARK_(x){
return ((x == null)) || ((x instanceof cljs.core.Symbol)) || (typeof x === 'string');
});
cljs.js.valid_opts_QMARK_ = (function cljs$js$valid_opts_QMARK_(x){
return ((x == null)) || (cljs.core.map_QMARK_(x));
});
if(typeof cljs.js._STAR_load_fn_STAR_ !== 'undefined'){
} else {
/**
 * Each runtime environment provides a different way to load a library.
 *   Whatever function *load-fn* is bound to will be passed two arguments - a
 *   map and a callback function: The map will have the following keys:
 * 
 *   :name   - the name of the library (a symbol)
 *   :macros - modifier signaling a macros namespace load
 *   :path   - munged relative library path (a string)
 * 
 *   It is up to the implementor to correctly resolve the corresponding .cljs,
 *   .cljc, or .js resource (the order must be respected). If :macros is true
 *   resolution should only consider .clj or .cljc resources (the order must be
 *   respected). Upon resolution the callback should be invoked with a map
 *   containing the following keys:
 * 
 *   :lang       - the language, :clj or :js
 *   :source     - the source of the library (a string)
 *   :file       - optional, the file path, it will be added to AST's :file keyword
 *              (but not in :meta)
 *   :cache      - optional, if a :clj namespace has been precompiled to :js, can
 *              give an analysis cache for faster loads.
 *   :source-map - optional, if a :clj namespace has been precompiled to :js, can
 *              give a V3 source map JSON
 * 
 *   If the resource could not be resolved, the callback should be invoked with
 *   nil.
 */
cljs.js._STAR_load_fn_STAR_ = (function cljs$js$_STAR_load_fn_STAR_(m,cb){
throw (new Error("No *load-fn* set"));
});
}
if(typeof cljs.js._STAR_eval_fn_STAR_ !== 'undefined'){
} else {
/**
 * Each runtime environment provides various ways to eval JavaScript
 *   source. Whatever function *eval-fn* is bound to will be passed a map
 *   containing the following keys:
 * 
 *   :source - the source of the library (string)
 *   :name   - used to unique identify the script (symbol)
 *   :cache  - if the source was originally ClojureScript, will be given the
 *          analysis cache.
 * 
 *   The result of evaluation should be the return value.
 */
cljs.js._STAR_eval_fn_STAR_ = (function cljs$js$_STAR_eval_fn_STAR_(m){
throw (new Error("No *eval-fn* set"));
});
}
/**
 * A default JavaScript evaluation function.
 */
cljs.js.js_eval = (function cljs$js$js_eval(p__20631){
var map__20632 = p__20631;
var map__20632__$1 = ((((!((map__20632 == null)))?((((map__20632.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20632.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20632):map__20632);
var resource = map__20632__$1;
var source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20632__$1,cljs.core.cst$kw$source);
return eval(source);
});
cljs.js.wrap_error = (function cljs$js$wrap_error(ex){
return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$error,ex], null);
});
/**
 * Construct an empty compiler state. Required to invoke analyze, compile,
 * eval and eval-str.
 */
cljs.js.empty_state = (function cljs$js$empty_state(var_args){
var G__20635 = arguments.length;
switch (G__20635) {
case 0:
return cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.js.empty_state.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0 = (function (){
var G__20636 = cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0();
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(G__20636,((function (G__20636){
return (function (state){
return cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,cljs.core.cst$sym$cljs$core], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$rename_DASH_macros,cljs.core.cst$kw$renames,cljs.core.cst$kw$externs,cljs.core.cst$kw$use_DASH_macros,cljs.core.cst$kw$excludes,cljs.core.cst$kw$macros,cljs.core.cst$kw$name,cljs.core.cst$kw$imports,cljs.core.cst$kw$requires,cljs.core.cst$kw$uses,cljs.core.cst$kw$defs,cljs.core.cst$kw$require_DASH_macros,cljs.core.cst$kw$cljs$analyzer_SLASH_constants,cljs.core.cst$kw$doc],[cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$console,cljs.core.cst$sym$ReferenceError,cljs.core.cst$sym$Error,cljs.core.cst$sym$Object,cljs.core.cst$sym$isFinite,cljs.core.cst$sym$Symbol,cljs.core.cst$sym$Infinity,cljs.core.cst$sym$String,cljs.core.cst$sym$eval,cljs.core.cst$sym$Array,cljs.core.cst$sym$parseInt,cljs.core.cst$sym$TypeError,cljs.core.cst$sym$isNaN,cljs.core.cst$sym$goog,cljs.core.cst$sym$parseFloat,cljs.core.cst$sym$global,cljs.core.cst$sym$performance,cljs.core.cst$sym$process,cljs.core.cst$sym$Number,cljs.core.cst$sym$RegExp,cljs.core.cst$sym$Date,cljs.core.cst$sym$COMPILED],[new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$log,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$apply,cljs.core.PersistentArrayMap.EMPTY], null),cljs.core.cst$sym$error,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$apply,cljs.core.PersistentArrayMap.EMPTY], null)], null),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$prototype,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$name,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$description,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$number,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$fileName,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$lineNumber,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$columnNumber,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$stack,cljs.core.PersistentArrayMap.EMPTY], null)], null),cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$iterator,cljs.core.PersistentArrayMap.EMPTY], null),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$fromCharCode,cljs.core.PersistentArrayMap.EMPTY], null),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$isArray,cljs.core.PersistentArrayMap.EMPTY], null),cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$nodeGlobalRequire,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$isArrayLike,cljs.core.PersistentArrayMap.EMPTY], null),cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$now,cljs.core.PersistentArrayMap.EMPTY], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$hrtime,cljs.core.PersistentArrayMap.EMPTY], null),new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$POSITIVE_INFINITY,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$NEGATIVE_INFINITY,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$MAX_VALUE,cljs.core.PersistentArrayMap.EMPTY], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$prototype,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$exec,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$lastIndex,cljs.core.PersistentArrayMap.EMPTY], null)], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$prototype,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$getTime,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$valueOf,cljs.core.PersistentArrayMap.EMPTY], null)], null),cljs.core.PersistentArrayMap.EMPTY]),cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentHashSet.EMPTY,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$unsafe_DASH_bit_DASH_and,cljs.core.cst$sym$macroexpand,cljs.core.cst$sym$unchecked_DASH_remainder_DASH_int,cljs.core.cst$sym$when_DASH_first,cljs.core.cst$sym$cond_DASH__GT__GT_,cljs.core.cst$sym$bit_DASH_set,cljs.core.cst$sym$import_DASH_macros,cljs.core.cst$sym$while,cljs.core.cst$sym$satisfies_QMARK_,cljs.core.cst$sym$unchecked_DASH_subtract_DASH_int,cljs.core.cst$sym$ns_DASH_unmap,cljs.core.cst$sym$import,cljs.core.cst$sym$bit_DASH_shift_DASH_right,cljs.core.cst$sym$aget,cljs.core.cst$sym$specify,cljs.core.cst$sym$vswap_BANG_,cljs.core.cst$sym$caching_DASH_hash,cljs.core.cst$sym$bit_DASH_shift_DASH_left,cljs.core.cst$sym$coercive_DASH_not,cljs.core.cst$sym$dec,cljs.core.cst$sym$unchecked_DASH_get,cljs.core.cst$sym$ns_DASH_publics,cljs.core.cst$sym$_LT_,cljs.core.cst$sym$this_DASH_as,cljs.core.cst$sym$$$,cljs.core.cst$sym$delay,cljs.core.cst$sym$some_QMARK_,cljs.core.cst$sym$unchecked_DASH_negate,cljs.core.cst$sym$simple_DASH_benchmark,cljs.core.cst$sym$unchecked_DASH_inc_DASH_int,cljs.core.cst$sym$unchecked_DASH_set,cljs.core.cst$sym$js_DASH_str,cljs.core.cst$sym$bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,cljs.core.cst$sym$implements_QMARK_,cljs.core.cst$sym$goog_DASH_define,cljs.core.cst$sym$pos_QMARK_,cljs.core.cst$sym$specify_BANG_,cljs.core.cst$sym$if_DASH_not,cljs.core.cst$sym$alength,cljs.core.cst$sym$bit_DASH_xor,cljs.core.cst$sym$doseq,cljs.core.cst$sym$unsigned_DASH_bit_DASH_shift_DASH_right,cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$unchecked_DASH_float,cljs.core.cst$sym$undefined_QMARK_,cljs.core.cst$sym$deftype,cljs.core.cst$sym$mask,cljs.core.cst$sym$when_DASH_let,cljs.core.cst$sym$divide,cljs.core.cst$sym$coercive_DASH_boolean,cljs.core.cst$sym$_LT__EQ_,cljs.core.cst$sym$if_DASH_some,cljs.core.cst$sym$_STAR_,cljs.core.cst$sym$min,cljs.core.cst$sym$lazy_DASH_seq,cljs.core.cst$sym$js_DASH_delete,cljs.core.cst$sym$truth_,cljs.core.cst$sym$defcurried,cljs.core.cst$sym$js_DASH_debugger,cljs.core.cst$sym$let,cljs.core.cst$sym$_DASH__GT_,cljs.core.cst$sym$coercive_DASH_not_EQ_,cljs.core.cst$sym$doto,cljs.core.cst$sym$areduce,cljs.core.cst$sym$double,cljs.core.cst$sym$bit_DASH_and_DASH_not,cljs.core.cst$sym$unchecked_DASH_add_DASH_int,cljs.core.cst$sym$fn,cljs.core.cst$sym$short,cljs.core.cst$sym$js_DASH_this,cljs.core.cst$sym$unchecked_DASH_double,cljs.core.cst$sym$string_QMARK_,cljs.core.cst$sym$js_DASH_arguments,cljs.core.cst$sym$unchecked_DASH_multiply_DASH_int,cljs.core.cst$sym$as_DASH__GT_,cljs.core.cst$sym$when_DASH_not,cljs.core.cst$sym$when,cljs.core.cst$sym$int,cljs.core.cst$sym$_GT_,cljs.core.cst$sym$keyword_QMARK_,cljs.core.cst$sym$use_DASH_macros,cljs.core.cst$sym$unchecked_DASH_multiply,cljs.core.cst$sym$gen_DASH_apply_DASH_to,cljs.core.cst$sym$some_DASH__GT__GT_,cljs.core.cst$sym$unchecked_DASH_dec,cljs.core.cst$sym$defn,cljs.core.cst$sym$float,cljs.core.cst$sym$js_DASH_in,cljs.core.cst$sym$es6_DASH_iterable,cljs.core.cst$sym$amap,cljs.core.cst$sym$use,cljs.core.cst$sym$declare,cljs.core.cst$sym$_DASH_,cljs.core.cst$sym$hash_DASH_set,cljs.core.cst$sym$or,cljs.core.cst$sym$extend_DASH_type,cljs.core.cst$sym$macroexpand_DASH_1,cljs.core.cst$sym$bit_DASH_test,cljs.core.cst$sym$defmethod,cljs.core.cst$sym$time,cljs.core.cst$sym$zero_QMARK_,cljs.core.cst$sym$require,cljs.core.cst$sym$unchecked_DASH_dec_DASH_int,cljs.core.cst$sym$memfn,cljs.core.cst$sym$js_DASH_obj,cljs.core.cst$sym$nil_QMARK_,cljs.core.cst$sym$extend_DASH_protocol,cljs.core.cst$sym$cond_DASH__GT_,cljs.core.cst$sym$dotimes,cljs.core.cst$sym$bit_DASH_and,cljs.core.cst$sym$reify,cljs.core.cst$sym$instance_QMARK_,cljs.core.cst$sym$load_DASH_file_STAR_,cljs.core.cst$sym$defonce,cljs.core.cst$sym$unchecked_DASH_add,cljs.core.cst$sym$rfn,cljs.core.cst$sym$identical_QMARK_,cljs.core.cst$sym$unchecked_DASH_divide_DASH_int,cljs.core.cst$sym$defn_DASH_,cljs.core.cst$sym$defprotocol,cljs.core.cst$sym$unchecked_DASH_subtract,cljs.core.cst$sym$assert,cljs.core.cst$sym$true_QMARK_,cljs.core.cst$sym$array,cljs.core.cst$sym$letfn,cljs.core.cst$sym$_SLASH_,cljs.core.cst$sym$bitpos,cljs.core.cst$sym$bit_DASH_or,cljs.core.cst$sym$vector,cljs.core.cst$sym$_GT__EQ_,cljs.core.cst$sym$loop,cljs.core.cst$sym$bit_DASH_flip,cljs.core.cst$sym$js_DASH_mod,cljs.core.cst$sym$with_DASH_out_DASH_str,cljs.core.cst$sym$condp,cljs.core.cst$sym$cond,cljs.core.cst$sym$some_DASH__GT_,cljs.core.cst$sym$ns_DASH_interns,cljs.core.cst$sym$for,cljs.core.cst$sym$binding,cljs.core.cst$sym$array_DASH_map,cljs.core.cst$sym$unchecked_DASH_byte,cljs.core.cst$sym$ns_DASH_imports,cljs.core.cst$sym$defmacro,cljs.core.cst$sym$unchecked_DASH_short,cljs.core.cst$sym$inc,cljs.core.cst$sym$with_DASH_redefs,cljs.core.cst$sym$bit_DASH_clear,cljs.core.cst$sym$locking,cljs.core.cst$sym$list,cljs.core.cst$sym$_PLUS_,cljs.core.cst$sym$aset,cljs.core.cst$sym$defmulti,cljs.core.cst$sym$str,cljs.core.cst$sym$coercive_DASH__EQ_,cljs.core.cst$sym$hash_DASH_map,cljs.core.cst$sym$gen_DASH_apply_DASH_to_DASH_simple,cljs.core.cst$sym$if_DASH_let,cljs.core.cst$sym$false_QMARK_,cljs.core.cst$sym$case,cljs.core.cst$sym$exists_QMARK_,cljs.core.cst$sym$bit_DASH_not,cljs.core.cst$sym$byte,cljs.core.cst$sym$max,cljs.core.cst$sym$_EQ__EQ_,cljs.core.cst$sym$lazy_DASH_cat,cljs.core.cst$sym$comment,cljs.core.cst$sym$copy_DASH_arguments,cljs.core.cst$sym$when_DASH_assert,cljs.core.cst$sym$unsafe_DASH_cast,cljs.core.cst$sym$resolve,cljs.core.cst$sym$defrecord,cljs.core.cst$sym$make_DASH_array,cljs.core.cst$sym$unchecked_DASH_negate_DASH_int,cljs.core.cst$sym$unchecked_DASH_inc,cljs.core.cst$sym$and,cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$js_DASH_comment,cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$when_DASH_some,cljs.core.cst$sym$unchecked_DASH_char,cljs.core.cst$sym$require_DASH_macros,cljs.core.cst$sym$_DASH__GT__GT_,cljs.core.cst$sym$js_DASH_inline_DASH_comment,cljs.core.cst$sym$refer_DASH_clojure],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1169,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unsafe_DASH_bit_DASH_and,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted], null)),cljs.core.cst$kw$doc,"Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms.",cljs.core.cst$kw$line,2965,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_macroexpand,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1076,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_remainder_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => x xs\n\n  Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4444,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_first,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n  through each form for which the corresponding test expression\n  is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n  after the first true test expression.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7257,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_cond_DASH__GT__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1209,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_set,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vars], null)], null)),cljs.core.cst$kw$line,64,cljs.core.cst$kw$column,4,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_import_DASH_macros,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Repeatedly executes body while test expression is true. Presumes\n  some side-effect will cause test to become false/nil. Returns nil",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,6087,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_while,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$psym,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"Returns true if x satisfies the protocol",cljs.core.cst$kw$line,2082,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_satisfies_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1082,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted_DASH_ns,cljs.core.cst$sym$quoted_DASH_sym], null)),cljs.core.cst$kw$doc,"Removes the mappings for the symbol from the namespace.",cljs.core.cst$kw$line,2827,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_unmap,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$import_DASH_symbols_DASH_or_DASH_lists], null)),cljs.core.cst$kw$doc,"import-list => (closure-namespace constructor-name-symbols*)\n\n  For each name in constructor-name-symbols, adds a mapping from name to the\n  constructor named by closure-namespace to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.",cljs.core.cst$kw$line,2928,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_import,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1200,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$line,985,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_aget,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"Identical to specify! but does not mutate its first argument. The first\n  argument must be an ICloneable instance.",cljs.core.cst$kw$line,1355,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_specify,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.",cljs.core.cst$kw$line,2839,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_vswap_BANG_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$hash_DASH_fn,cljs.core.cst$sym$hash_DASH_key], null)),cljs.core.cst$kw$line,1221,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_caching_DASH_hash,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1197,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_left,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,882,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1131,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_dec,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$doc,"INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis.",cljs.core.cst$kw$line,1012,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_get,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted_DASH_ns], null)),cljs.core.cst$kw$doc,"Returns a map of the public intern mappings for the namespace.",cljs.core.cst$kw$line,2783,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_publics,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1106,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__LT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Defines a scope where JavaScript's implicit \"this\" is bound to the name provided.",cljs.core.cst$kw$line,1365,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_this_DASH_as,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$form], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$form,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$doc,"form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n  Expands into a member access (.) of the first member on the first\n  argument, followed by the next member on the result, etc. For\n  instance:\n\n  (.. System (getProperties) (get \"os.name\"))\n\n  expands to:\n\n  (. (. System (getProperties)) (get \"os.name\"))\n\n  but is easier to write, read, and understand.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1568,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_$$,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls.",cljs.core.cst$kw$line,2120,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_delay,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,879,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_some_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1070,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$expr,cljs.core.cst$sym$iterations,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$print_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$print_DASH_fn,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.cst$sym$println)], null)], null)], null)),cljs.core.cst$kw$doc,"Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case.",cljs.core.cst$kw$line,2685,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_benchmark,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1061,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$doc,"INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis.",cljs.core.cst$kw$line,1019,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_set,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),cljs.core.cst$kw$line,2774,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_str,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1203,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$psym,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"EXPERIMENTAL",cljs.core.cst$kw$line,2056,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_implements_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$default], null)),cljs.core.cst$kw$doc,"Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {'your-app.core/DEBUG! true}",cljs.core.cst$kw$line,729,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_goog_DASH_define,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1140,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_pos_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"Identical to reify but mutates its first argument.",cljs.core.cst$kw$line,1347,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_specify_BANG_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$then], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$then,cljs.core.cst$sym$else], null)),cljs.core.cst$kw$doc,"Evaluates test. If logical false, evaluates and returns then expr, \n  otherwise else expr, if supplied, else nil.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,748,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a], null)),cljs.core.cst$kw$line,2567,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_alength,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1180,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_xor,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seq_DASH_exprs,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.",cljs.core.cst$kw$line,2401,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_doseq,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1206,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unsigned_DASH_bit_DASH_shift_DASH_right,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1143,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_neg_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1040,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_float,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"Return true if argument is identical to the JavaScript undefined value.",cljs.core.cst$kw$line,959,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_undefined_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$t,cljs.core.cst$sym$fields,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields",cljs.core.cst$kw$line,1691,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_deftype,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),cljs.core.cst$kw$line,1213,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_mask,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n  When test is true, evaluates body with binding-form bound to the value of test",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1769,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_let,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1101,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_divide,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,891,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH_boolean,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1111,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__LT__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then,cljs.core.cst$sym$else,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$oldform], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n   If test is not nil, evaluates then with binding-form bound to the\n   value of test, if not, yields else",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1784,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_some,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1090,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1152,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_min,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls.",cljs.core.cst$kw$line,2112,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_lazy_DASH_seq,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$line,903,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_delete,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,896,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_truth_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$file,cljs.core.cst$kw$name,cljs.core.cst$kw$ns,cljs.core.cst$kw$macro],[true,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc,cljs.core.cst$sym$meta,cljs.core.cst$sym$args,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),"Builds another arity of the fn that returns a fn awaiting the last\n  param",1239,1,"cljs/core.cljc",cljs.core.cst$sym$cljs$core_SLASH_defcurried,cljs.core.cst$sym$cljs$core,true]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$doc,"Emit JavaScript \"debugger;\" statement",cljs.core.cst$kw$line,909,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_debugger,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.",cljs.core.cst$kw$line,759,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_let,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Threads the expr through the forms. Inserts x as the\n  second item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  second item in second form, etc.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1586,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$line,885,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH_not_EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Evaluates x then calls all of the methods and functions with the\n  value of x supplied at the front of the given arguments.  The forms\n  are evaluated in order.  Returns x.\n\n  (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,3724,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_doto,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$idx,cljs.core.cst$sym$ret,cljs.core.cst$sym$init,cljs.core.cst$sym$expr], null)),cljs.core.cst$kw$doc,"Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret.",cljs.core.cst$kw$line,2588,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_areduce,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1035,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_double,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1184,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1046,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$sigs], null)),cljs.core.cst$kw$doc,"params => positional-params* , or positional-params* & next-param\n  positional-param => binding-form\n  next-param => binding-form\n  name => symbol\n\n  Defines a function",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4357,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_fn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1033,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_short,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$line,1362,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_this,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1041,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_double,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,947,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_string_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$line,900,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_arguments,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1067,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Binds name to expr, evaluates the first form in the lexical context\n  of that binding, then binds name to that result, repeating for each\n  successive form, returning the result of the last form.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7274,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_as_DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates test. If logical false, evaluates body in an implicit do.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,499,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates test. If logical true, evaluates body in an implicit do.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,493,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1177,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1116,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,982,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_keyword_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Similar to use but only for macros.",cljs.core.cst$kw$line,2923,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_use_DASH_macros,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1064,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$line,2716,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_gen_DASH_apply_DASH_to,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"When expr is not nil, threads it into the first form (via ->>),\n  and when that result is not nil, through the next etc",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7300,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_some_DASH__GT__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1049,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$doc,"Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.",cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$prepost_DASH_map_QMARK_,cljs.core.cst$sym$body], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$prepost_DASH_map_QMARK_,cljs.core.cst$sym$body),cljs.core.cst$sym$_PLUS_,cljs.core.cst$sym$attr_DASH_map_QMARK_], null)),cljs.core.cst$kw$line,3133,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1034,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_float,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$obj], null)),cljs.core.cst$kw$line,906,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_in,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)),cljs.core.cst$kw$line,2777,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_iterable,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$idx,cljs.core.cst$sym$ret,cljs.core.cst$sym$expr], null)),cljs.core.cst$kw$doc,"Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret.",cljs.core.cst$kw$line,2572,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_amap,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Like require, but referring vars specified by the mandatory\n  :only option.\n\n  Example:\n\n  The following would load the library clojure.set while referring\n  the intersection var.\n\n  (use '[clojure.set :only [intersection]])",cljs.core.cst$kw$line,2910,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_use,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$names], null)),cljs.core.cst$kw$doc,"defs the supplied var names with no bindings, useful for making forward declarations.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,2667,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_declare,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1085,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__DASH_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,2524,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_set,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$next], null)),cljs.core.cst$kw$doc,"Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.",cljs.core.cst$kw$line,858,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_or,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type_DASH_sym,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"Extend a type to a series of protocols. Useful when you are\n  supplying the definitions explicitly inline. Propagates the\n  type as a type hint on the first argument of all fns.\n\n  type-sym may be\n\n   * default, meaning the definitions will apply for any value,\n     unless an extend-type exists for one of the more specific\n     cases below.\n   * nil, meaning the definitions will apply for the nil value.\n   * any of object, boolean, number, string, array, or function,\n     indicating the definitions will apply for values of the\n     associated base JavaScript types. Note that, for example,\n     string should be used instead of js/String.\n   * a JavaScript type not covered by the previous list, such\n     as js/RegExp.\n   * a type defined by deftype or defrecord.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y] ...) ...)",cljs.core.cst$kw$line,1583,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_extend_DASH_type,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted], null)),cljs.core.cst$kw$doc,"If form represents a macro form, returns its expansion,\n  else returns form.",cljs.core.cst$kw$line,2954,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_macroexpand_DASH_1,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1194,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_test,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fn_DASH_tail], null)),cljs.core.cst$kw$doc,"Creates and installs a new method of multimethod associated with dispatch-value. ",cljs.core.cst$kw$line,2670,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defmethod,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr], null)),cljs.core.cst$kw$doc,"Evaluates expr and prints the time it took. Returns the value of expr.",cljs.core.cst$kw$line,2675,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_time,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1137,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_zero_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib or a flag that modifies how all the identified\n  libs are loaded. Use :require in the ns macro in preference to calling this\n  directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of ClojureScript code. Lib names are symbols and each lib is associated\n  with a ClojureScript namespace. A lib's name also locates its root directory\n  within classpath using Java's package name to classpath-relative path mapping.\n  All resources in a lib should be contained in the directory structure under its\n  root directory. All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace.\n  :refer-macros takes a list of macro symbols to refer from the namespace.\n  :include-macros true causes macros from the namespace to be required.\n  :rename specifies a map from referred var names to different\n    symbols (and can be used to prevent clashes)\n\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the library clojure.string :as string.\n\n  (require '[clojure.string :as string])",cljs.core.cst$kw$line,2850,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_require,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1052,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a JavaScript\n  method as a first-class fn.",cljs.core.cst$kw$line,380,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_memfn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$line,2547,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_obj,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,876,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$specs], null)),cljs.core.cst$kw$doc,"Useful when you want to provide several implementations of the same\n  protocol all at once. Takes a single protocol and the implementation\n  of that protocol for one or more types. Expands into calls to\n  extend-type:\n\n  (extend-protocol Protocol\n    AType\n      (foo [x] ...)\n      (bar [x y] ...)\n    BType\n      (foo [x] ...)\n      (bar [x y] ...)\n    AClass\n      (foo [x] ...)\n      (bar [x y] ...)\n    nil\n      (foo [x] ...)\n      (bar [x y] ...))\n\n  expands into:\n\n  (do\n   (clojure.core/extend-type AType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type BType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type AClass Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type nil Protocol \n     (foo [x] ...) \n     (bar [x y] ...)))",cljs.core.cst$kw$file,"clojure/core_deftype.clj",cljs.core.cst$kw$line,831,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_extend_DASH_protocol,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes an expression and a set of test/form pairs. Threads expr (via ->)\n  through each form for which the corresponding test\n  expression is true. Note that, unlike cond branching, cond-> threading does\n  not short circuit after the first true test expression.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7240,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_cond_DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.",cljs.core.cst$kw$line,2600,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_dotimes,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1164,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (seq f)))))\n  == (\"f\" \"o\" \"o\"))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}",cljs.core.cst$kw$line,1287,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_reify,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,967,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_instance_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$line,2951,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_load_DASH_file_STAR_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$doc,"defs name to have the root value of init iff the named var has no root value,\n  else init is unevaluated",cljs.core.cst$kw$line,619,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defonce,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1043,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$file,cljs.core.cst$kw$name,cljs.core.cst$kw$ns,cljs.core.cst$kw$macro],[true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$k], null),cljs.core.cst$sym$fkv], null)),"Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl.",1256,1,"cljs/core.cljc",cljs.core.cst$sym$cljs$core_SLASH_rfn,cljs.core.cst$sym$cljs$core,true]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$line,964,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_identical_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1055,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_divide_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$decls], null)),cljs.core.cst$kw$doc,"same as defn, yielding non-public def",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4743,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defn_DASH_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$psym,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$doc_PLUS_methods], null)),cljs.core.cst$kw$doc,"A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17",cljs.core.cst$kw$line,1937,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defprotocol,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1079,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$message], null)),cljs.core.cst$kw$doc,"Evaluates expr and throws an exception if it does not evaluate to\n  logical true.",cljs.core.cst$kw$line,2301,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_assert,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,941,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_true_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$line,2457,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_array,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$fnspecs,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n  Takes a vector of function specs and a body, and generates a set of\n  bindings of functions to their names. All of the names are available\n  in all of the definitions of the functions, as well as the body.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,6297,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_letfn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1096,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__SLASH_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),cljs.core.cst$kw$line,1217,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bitpos,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1173,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_or,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,2493,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_vector,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1121,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__GT__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.",cljs.core.cst$kw$line,771,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_loop,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1191,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_flip,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$num,cljs.core.cst$sym$div], null)),cljs.core.cst$kw$line,1158,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_mod,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls.",cljs.core.cst$kw$line,2754,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_with_DASH_out_DASH_str,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$added,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$file,cljs.core.cst$kw$name,cljs.core.cst$kw$ns,cljs.core.cst$kw$macro],[cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),"Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown.","1.0",2163,1,"cljs/core.cljc",cljs.core.cst$sym$cljs$core_SLASH_condp,cljs.core.cst$sym$cljs$core,true]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes a set of test/expr pairs. It evaluates each test one at a\n  time.  If a test returns logical true, cond evaluates and returns\n  the value of the corresponding expr and doesn't evaluate any of the\n  other tests or exprs. (cond) returns nil.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,580,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_cond,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"When expr is not nil, threads it into the first form (via ->),\n  and when that result is not nil, through the next etc",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7286,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_some_DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted_DASH_ns], null)),cljs.core.cst$kw$doc,"Returns a map of the intern mappings for the namespace.",cljs.core.cst$kw$line,2813,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_interns,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seq_DASH_exprs,cljs.core.cst$sym$body_DASH_expr], null)),cljs.core.cst$kw$doc,"List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))",cljs.core.cst$kw$line,2314,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_for,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.",cljs.core.cst$kw$line,2150,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_binding,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$line,2504,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1037,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_byte,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted_DASH_ns], null)),cljs.core.cst$kw$doc,"Returns a map of the import mappings for the namespace.",cljs.core.cst$kw$line,2799,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_imports,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$body], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$body),cljs.core.cst$sym$_PLUS_,cljs.core.cst$sym$attr_DASH_map_QMARK_], null)),cljs.core.cst$kw$doc,"Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.",cljs.core.cst$kw$macro,true,cljs.core.cst$kw$line,3208,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defmacro,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1039,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_short,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1134,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_inc,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing.",cljs.core.cst$kw$line,2128,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_with_DASH_redefs,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1188,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_clear,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$line,2846,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_locking,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,2484,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_list,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1026,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__PLUS_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$line,998,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_aset,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mm_DASH_name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$options], null)),cljs.core.cst$kw$doc,"Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy",cljs.core.cst$kw$line,2624,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defmulti,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,821,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_str,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$line,888,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$line,2514,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_map,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$num_DASH_args,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$line,2750,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_gen_DASH_apply_DASH_to_DASH_simple,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then,cljs.core.cst$sym$else,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$oldform], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n  If test is true, evaluates then with binding-form bound to the value of \n  test, if not, yields else",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1749,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_let,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,944,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_false_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.",cljs.core.cst$kw$line,2227,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_case,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript.",cljs.core.cst$kw$line,951,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_exists_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1161,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1032,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_byte,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1146,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_max,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1126,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__EQ__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$doc,"Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))",cljs.core.cst$kw$line,2765,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_lazy_DASH_cat,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Ignores body, yields nil",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4555,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_comment,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$dest], null)),cljs.core.cst$kw$line,3020,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_copy_DASH_arguments,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,2298,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_assert,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$t,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type.",cljs.core.cst$kw$line,930,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unsafe_DASH_cast,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted_DASH_sym], null)),cljs.core.cst$kw$doc,"Returns the var to which a symbol will be resolved in the namespace else nil.",cljs.core.cst$kw$line,3254,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_resolve,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rsym,cljs.core.cst$sym$fields,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.",cljs.core.cst$kw$line,1868,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defrecord,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$line,2466,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_make_DASH_array,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1073,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1058,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$next], null)),cljs.core.cst$kw$doc,"Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.",cljs.core.cst$kw$line,840,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_and,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,976,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_number_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comment], null)),cljs.core.cst$kw$doc,"Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline",cljs.core.cst$kw$line,916,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_comment,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,979,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_symbol_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n   When test is not nil, evaluates body with binding-form bound to the\n   value of test",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1804,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_some,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1038,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_char,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Similar to require but only for macros.",cljs.core.cst$kw$line,2905,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_require_DASH_macros,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Threads the expr through the forms. Inserts x as the\n  last item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  last item in second form, etc.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1602,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comment], null)),cljs.core.cst$kw$doc,"Emit an inline JavaScript comment.",cljs.core.cst$kw$line,936,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_inline_DASH_comment,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Refers to all the public vars of `cljs.core`, subject to\n  filters.\n  Filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  Filters can be used to select a subset, via exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent clashes.",cljs.core.cst$kw$line,2937,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_refer_DASH_clojure,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null)]),cljs.core.cst$sym$cljs$core,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$StringBuffer,cljs.core.cst$sym$goog$string$StringBuffer], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$gstring,cljs.core.cst$sym$goog$string,cljs.core.cst$sym$goog$Uri,cljs.core.cst$sym$garray,cljs.core.cst$sym$goog$object,cljs.core.cst$sym$goog$math$Integer,cljs.core.cst$sym$StringBuffer,cljs.core.cst$sym$gobject,cljs.core.cst$sym$goog$array,cljs.core.cst$sym$goog$math$Long],[cljs.core.cst$sym$goog$string,cljs.core.cst$sym$goog$string,cljs.core.cst$sym$goog$Uri,cljs.core.cst$sym$goog$array,cljs.core.cst$sym$goog$object,cljs.core.cst$sym$goog$math$Integer,cljs.core.cst$sym$goog$string$StringBuffer,cljs.core.cst$sym$goog$object,cljs.core.cst$sym$goog$array,cljs.core.cst$sym$goog$math$Long]),null,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentHashSet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$sort_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientAssociative,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding associativity to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_meta_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_hash_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_str_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null))),cljs.core.cst$kw$doc,"Support so that collections can implement toString without\n   loading all the printing machinery."], null)),cljs.core.with_meta(cljs.core.cst$sym$eduction,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform_STAR_,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_remainder_DASH_int,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$uuid,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$seq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings."], null)),cljs.core.with_meta(cljs.core.cst$sym$Volatile,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$IUUID,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"A marker protocol for UUIDs",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.cst$sym$INIT,cljs.core.with_meta(cljs.core.cst$sym$find_DASH_ns,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$contains_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'."], null)),cljs.core.with_meta(cljs.core.cst$sym$t_cljs$core9496,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$every_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if (pred x) is logical true for every x in coll, else\n  false."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6IteratorSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Var,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keep_DASH_indexed,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentQueueSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$subs,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$doc,"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IFind,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for implementing entry finding in collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_find,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$set,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a set of the distinct elements of coll."], null)),cljs.core.cst$sym$MODULE_URIS,cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_indexed,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Compare indexed collection.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$take_DASH_last,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec."], null)),cljs.core.with_meta(cljs.core.cst$sym$IndexedSeq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_set,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Set bit at index n"], null)),cljs.core.cst$sym$string_DASH_hash_DASH_cache_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$qualified_DASH_keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword with a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Eduction,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_add,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6SetEntriesIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_DASH_cache,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentArrayMapIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentArrayMapIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$butlast,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a seq of all but the last item in coll, in linear time"], null)),cljs.core.with_meta(cljs.core.cst$sym$tail_DASH_off,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_subtract_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IIterable,cljs.core.cst$kw$doc,"Returns an iterator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_namespace_DASH_maps_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true."], null)),cljs.core.with_meta(cljs.core.cst$sym$take_DASH_nth,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$first,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$native_DASH_satisfies_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null)),cljs.core.with_meta(cljs.core.cst$sym$seq_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if s satisfies ISeq"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_global_DASH_hierarchy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$UUID,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$println_DASH_str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"println to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),cljs.core.cst$kw$doc,"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT"], null)),cljs.core.with_meta(cljs.core.cst$sym$linear_DASH_traversal_DASH_nth,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$iterate,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects",cljs.core.cst$kw$added,"1.0"], null)),cljs.core.with_meta(cljs.core.cst$sym$checked_DASH_aget_SINGLEQUOTE_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$or,cljs.core.list(cljs.core.cst$sym$array_QMARK_,cljs.core.cst$sym$array),cljs.core.list(cljs.core.cst$sym$js_SLASH_goog$isArrayLike,cljs.core.cst$sym$array)),cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$idx),cljs.core.list(cljs.core.cst$sym$not,cljs.core.list(cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$idx)),cljs.core.list(cljs.core.cst$sym$_LT_,cljs.core.cst$sym$idx,cljs.core.list(cljs.core.cst$sym$alength,cljs.core.cst$sym$array))], null)], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$newline,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a newline using *print-fn*",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ILookup,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for looking up a value in a data structure.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$write_DASH_all,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$fn_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Return true if f is a JavaScript function or satisfies the Fn protocol."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$doall,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keyword_DASH_identical_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two keywords are identical."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_err_DASH_fn_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_aset,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prefers,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of preferred value -> set of other values"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$LazySeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$dedupe,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_editable_DASH_array_DASH_for,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6Iterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$VectorNode,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$dissoc,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$atom,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null))),cljs.core.cst$kw$doc,"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_shift_DASH_right,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right"], null)),cljs.core.with_meta(cljs.core.cst$sym$MapEntry,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.cst$sym$_STAR_clojurescript_DASH_version_STAR_,cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$peek,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$IKVReduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core/reduce-kv.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$iter_DASH_reduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$aget,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$doc,"Returns the value at the index/indices. Works on JavaScript arrays.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentTreeMapSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Writes s with writer and returns the result.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$mk_DASH_bound_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$last,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return the last item in coll, in linear time"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_seq_DASH_push,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns the namespace String of a symbol or keyword, or nil if not present."], null)),cljs.core.with_meta(cljs.core.cst$sym$empty_DASH_unordered_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new object map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ICollection,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$NodeSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_EQ_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding mapping functionality to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$push_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$take,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$vector_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IVector"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_equiv_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bitmap_DASH_indexed_DASH_node_DASH_index,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$boolean,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to boolean"], null)),cljs.core.with_meta(cljs.core.cst$sym$IChunk,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the items of a chunk.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_shift_DASH_left,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift left"], null)),cljs.core.with_meta(cljs.core.cst$sym$random_DASH_uuid,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$any_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if given any argument."], null)),cljs.core.with_meta(cljs.core.cst$sym$rand_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns a random integer between 0 (inclusive) and n (exclusive)."], null)),cljs.core.with_meta(cljs.core.cst$sym$aclone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null))),cljs.core.cst$kw$doc,"Returns a javascript array, cloned from the passed in array"], null)),cljs.core.with_meta(cljs.core.cst$sym$BlackNode,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$vreset_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Sets the value of volatile to newval without regard for the\n   current value. Returns newval."], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than num."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransformerIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$APersistentVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$juxt,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentQueueIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_LT_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$inode_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_map_DASH__GT_hash_DASH_map,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$test,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception"], null)),cljs.core.with_meta(cljs.core.cst$sym$rest,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument."], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_data,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentArrayMapSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunk,cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$isa_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$boolean_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Boolean"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,cljs.core.cst$kw$doc,"Creates a clone of value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$munge,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$empty_DASH_ordered_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$DEMUNGE_MAP,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6IteratorSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_NeverEquiv,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive matches of re in s."], null)),cljs.core.with_meta(cljs.core.cst$sym$char_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript string of length one."], null)),cljs.core.with_meta(cljs.core.cst$sym$make_DASH_hierarchy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Creates a hierarchy object for use with derive, isa? etc."], null)),cljs.core.with_meta(cljs.core.cst$sym$Symbol,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.cst$sym$PROTOCOL_SENTINEL,cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_push_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReduce,cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ICounted,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_t_cljs$core9496,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta9497], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$swap_DASH_vals_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.",cljs.core.cst$kw$added,"1.9",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keep,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$char,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to char"], null)),cljs.core.with_meta(cljs.core.cst$sym$mapcat,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$added,"1.0",cljs.core.cst$kw$static,true,cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided"], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_long,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null)),cljs.core.cst$sym$m3_DASH_seed,cljs.core.with_meta(cljs.core.cst$sym$some_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is not nil, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_negate,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$symbol_DASH_identical_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two symbols are identical."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_command_DASH_line_DASH_args_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"A sequence of the supplied command line arguments, or nil if\n  none were supplied"], null)),cljs.core.with_meta(cljs.core.cst$sym$reverse,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reverse order. Not lazy."], null)),cljs.core.with_meta(cljs.core.cst$sym$inst_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies Inst"], null)),cljs.core.with_meta(cljs.core.cst$sym$range,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Counts the number of bits set in n"], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_node,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$sort,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MetaFn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_inc_DASH_int,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IComparable,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$map_DASH_indexed,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_list,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$rand_DASH_nth,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection."], null)),cljs.core.with_meta(cljs.core.cst$sym$comp,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_chunk,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's dispatch-fn."], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"DEPRECATED: Bitwise shift right with zero fill"], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_reserved_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_t_cljs$core11420,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta11421], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dorun,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_sequential_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$simple_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol without a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$accumulating_DASH_seq_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IIndexed,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections to provide indexed-based access to their items.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$disj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$MultiIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$IPrintWithWriter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_UUID,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding vector functionality to collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IIterable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for iterating over a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an iterator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MultiIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iters], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_2,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the second most recent value printed"], null)),cljs.core.with_meta(cljs.core.cst$sym$Eduction,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_clone_DASH_node,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$cons,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentTreeSet,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_HashSetIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ns_DASH_lookup,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$floats,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientVector,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$pos_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is greater than zero, else false"], null)),cljs.core.with_meta(cljs.core.cst$sym$fnil,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null))),cljs.core.cst$kw$doc,"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$merge_DASH_with,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$nthrest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth rest of coll, coll when n is 0."], null)),cljs.core.cst$sym$_STAR_warn_DASH_on_DASH_infer_STAR_,cljs.core.with_meta(cljs.core.cst$sym$_DASH_find,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IFind,cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$sequential_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISequential"], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_replace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$checked_DASH_aset_SINGLEQUOTE_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$or,cljs.core.list(cljs.core.cst$sym$array_QMARK_,cljs.core.cst$sym$array),cljs.core.list(cljs.core.cst$sym$js_SLASH_goog$isArrayLike,cljs.core.cst$sym$array)),cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$idx),cljs.core.list(cljs.core.cst$sym$not,cljs.core.list(cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$idx)),cljs.core.list(cljs.core.cst$sym$_LT_,cljs.core.cst$sym$idx,cljs.core.list(cljs.core.cst$sym$alength,cljs.core.cst$sym$array))], null)], null)),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_mix_DASH_H1,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RecordIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientArrayMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prim_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_level_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$shuffle,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random permutation of coll"], null)),cljs.core.with_meta(cljs.core.cst$sym$ChunkedSeq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_keyword,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$find,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null)),cljs.core.with_meta(cljs.core.cst$sym$alength,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null))),cljs.core.cst$kw$doc,"Returns the length of the array. Works on arrays of all types."], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_xor,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise exclusive or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_IndexedSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ObjMap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unsigned_DASH_bit_DASH_shift_DASH_right,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right with zero fill"], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6SetEntriesIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$neg_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is less than zero, else false"], null)),cljs.core.with_meta(cljs.core.cst$sym$Cons,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_StringIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_invoke,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_List,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_mix_DASH_K1,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_float,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$undefined_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x identical to the JavaScript undefined value."], null)),cljs.core.with_meta(cljs.core.cst$sym$IMeta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the metadata of an object.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns the metadata of object o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reduced_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null))),cljs.core.cst$kw$doc,"Returns true if x is the result of a call to reduced"], null)),cljs.core.with_meta(cljs.core.cst$sym$apply_DASH_to,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$disj_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ILookup,cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$float_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for JavaScript numbers, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$ICloneable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for cloning a value.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a clone of value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IEncodeClojure,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$booleans,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayList,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RSeq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$mask,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$int_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_and_DASH_cache_DASH_best_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$default_DASH_dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$set_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ISet"], null)),cljs.core.with_meta(cljs.core.cst$sym$iterable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x implements IIterable protocol."], null)),cljs.core.with_meta(cljs.core.cst$sym$cat,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6EntriesIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$divide,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_reserved_DASH_arr,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_from_DASH_indexed_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$take_DASH_while,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$vary_DASH_meta,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$INext,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the next items of a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$is_proto_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.cst$sym$START,cljs.core.with_meta(cljs.core.cst$sym$ICounted,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding the ability to count a collection in constant time.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IMapEntry,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for examining a map entry.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_LT__EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.cst$sym$MODULE_INFOS,cljs.core.with_meta(cljs.core.cst$sym$conj_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_identical_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$repeatedly,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$zipmap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Returns a map with the keys mapped to the corresponding vals."], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_DASH_vals_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),cljs.core.cst$kw$doc,"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.",cljs.core.cst$kw$added,"1.9"], null)),cljs.core.with_meta(cljs.core.cst$sym$IStack,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IVolatile,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding volatile functionality.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$remove,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_BitmapIndexedNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the product of nums. (*) returns 1.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_pattern,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns an instance of RegExp which has compiled the provided string."], null)),cljs.core.with_meta(cljs.core.cst$sym$min,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the least of the nums.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll"], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_append,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)))], null)),cljs.core.cst$sym$_STAR_unchecked_DASH_arrays_STAR_,cljs.core.with_meta(cljs.core.cst$sym$prn_DASH_str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr-str followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IReversible,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for reversing a seq.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reversible_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies? IReversible."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IPending,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$conj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$flatten1,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Take a collection of collections, and return a lazy seq\n  of items from the inner collection"], null)),cljs.core.with_meta(cljs.core.cst$sym$transduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.cst$sym$fixture1,cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISwap,cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args).",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_length_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_delete,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Delete a property from a JavaScript object."], null)),cljs.core.with_meta(cljs.core.cst$sym$truth_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MultiFn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IEncodeJS,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$new_DASH_path,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_and_DASH_set_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false."], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_copy_DASH_downward,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pack_DASH_array_DASH_node,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$interleave,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the first item in each coll, then the second etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$map_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IMap"], null)),cljs.core.cst$sym$m3_DASH_C1,cljs.core.with_meta(cljs.core.cst$sym$get,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$identity,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns its argument."], null)),cljs.core.with_meta(cljs.core.cst$sym$into,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null))),cljs.core.cst$kw$doc,"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$long,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null)),cljs.core.with_meta(cljs.core.cst$sym$double,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$volatile_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a volatile."], null)),cljs.core.with_meta(cljs.core.cst$sym$ChunkBuffer,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$HashSetIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the key of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nfirst,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (first x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$StringBufferWriter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the metadata of obj, returns nil if there is no metadata."], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_editable_DASH_tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IHash,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding hashing functionality to a type.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the hash code of o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_and_DASH_not,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and with complement",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$var_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if v is of type cljs.core.Var"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the comparator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_add_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the sum of nums. (+) returns 0.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_ordered_DASH_coll,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms."], null)),cljs.core.with_meta(cljs.core.cst$sym$extend_DASH_object_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null))),cljs.core.cst$kw$doc,"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached."], null)),cljs.core.with_meta(cljs.core.cst$sym$do_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_DASH_meta_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null))),cljs.core.cst$kw$doc,"Atomically resets the metadata for an atom"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_KeySeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IEquiv,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding value comparison functionality to a type.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$cycle,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!) sequence of repetitions of the items in coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDeref,cljs.core.cst$kw$doc,"Returns the value of the reference o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_writer_DASH_ex_DASH_info,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$empty_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$TaggedLiteral,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$short,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Returns the first chunk in coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$filterv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TaggedLiteral,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_editable_DASH_root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$hash,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the hash code of its argument. Note this is the hash code\n   consistent with =."], null)),cljs.core.with_meta(cljs.core.cst$sym$quot,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"quot[ient] of dividing numerator by denominator."], null)),cljs.core.with_meta(cljs.core.cst$sym$ns_DASH_interns_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null))),cljs.core.cst$kw$doc,"Returns a map of the intern mappings for the namespace.\n  Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_double,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_target_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \"nodejs\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.",cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ChunkedCons,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ranged_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding vector functionality to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$longs,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$not_EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Same as (not (= obj1 obj2))",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_print_DASH_err_DASH_fn_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-err-fn* to f."], null)),cljs.core.with_meta(cljs.core.cst$sym$string_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript string."], null)),cljs.core.with_meta(cljs.core.cst$sym$uri_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true X is a goog.Uri instance.",cljs.core.cst$kw$added,"1.9"], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_iterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"EXPERIMENTAL: Return a ES2015 compatible iterator for coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$Delay,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$munge_DASH_str,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_str_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects to a string, observing all the\n  options given in opts"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RecordIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null)))], null)),cljs.core.cst$sym$m3_DASH_C2,cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Symbol,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_newline_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_multiply_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the product of nums. (*) returns 1.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_all_DASH_methods,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Removes all of the methods of multimethod."], null)),cljs.core.with_meta(cljs.core.cst$sym$trampoline,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$double_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for JavaScript numbers, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_1,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the most recent value printed"], null)),cljs.core.with_meta(cljs.core.cst$sym$vec,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_meta_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$MultiFn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$NONE,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ValSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$rand,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$second,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_ns_DASH_obj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$IEditableCollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections which can transformed to transients.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_combine,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_GT_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$kw$doc,"Returns the name String of x.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$replace,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Subvec,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$associative_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements Associative"], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_keys,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null))),cljs.core.cst$kw$doc,"Return the JavaScript keys for an object."], null)),cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_Inst,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6EntriesIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Keyword"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$force,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is a Delay, returns the (possibly cached) value of its expression, else returns x"], null)),cljs.core.with_meta(cljs.core.cst$sym$group_DASH_by,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReversible,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prn,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr followed by (newline).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_pop_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's default-dispatch-val."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Atom,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentHashMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_multiply,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the product of nums. (*) returns 1.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayNodeSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$even_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is even, throws an exception if n is not an integer"], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_iterator_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_dec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null)),cljs.core.with_meta(cljs.core.cst$sym$Inst,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_collision_DASH_node_DASH_find_DASH_index,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$persistent_DASH_array_DASH_map_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RangeIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$tagged_DASH_literal_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if the value is the data representation of a tagged literal"], null)),cljs.core.with_meta(cljs.core.cst$sym$double_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_ns,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Create a new namespace named by the symbol. Bootstrap only.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_EmptyList,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$seq_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$spread,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_left,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$rseq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null))),cljs.core.cst$kw$doc,"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_cause,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$IReset,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding resetting functionality.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of o to new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IEmptyableCollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for creating an empty collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_map_DASH_index_DASH_of,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_message,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_NodeIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_fn_DASH_bodies_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-fns-bodies* controls whether functions print their source or\n    only their names."], null)),cljs.core.with_meta(cljs.core.cst$sym$string_DASH_print,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$float,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.cst$sym$fixture2,cljs.core.with_meta(cljs.core.cst$sym$IRecord,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker interface indicating a record object",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_str,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$first_DASH_array_DASH_for_DASH_longvec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_set_DASH_entries_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$concat,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null))),cljs.core.cst$kw$doc,"Returns a lazy seq representing the concatenation of the elements in the supplied colls.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_reserved,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|Object}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IDerefWithTimeout,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$symbol,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Symbol with the given namespace and name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$to_DASH_array_DASH_2d,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$Subvec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ExceptionInfo,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@constructor"], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$mod,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ISet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding set functionality to a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast."], null)),cljs.core.with_meta(cljs.core.cst$sym$IPending,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the key for entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$CHAR_MAP,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pop_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"Returns a transient map that doesn't contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reductions,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$indexed_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements nth in constant time"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RangeIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$assoc_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reduce_DASH_kv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals."], null)),cljs.core.with_meta(cljs.core.cst$sym$t_cljs$core11420,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),cljs.core.cst$kw$doc,"Sets the value of atom to newval without regard for the\n  current value. Returns new-value."], null)),cljs.core.with_meta(cljs.core.cst$sym$name,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RedNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_array_DASH_for,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Fn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ffirst,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (first x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayNodeIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects using string-print, observing all\n  the options given in opts"], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentTreeMap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$strip_DASH_ns,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$named], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentTreeMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_reduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$counted_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements count in constant time"], null)),cljs.core.with_meta(cljs.core.cst$sym$tagged_DASH_literal,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$tag)], null)], null)))),cljs.core.cst$kw$doc,"Construct a data representation of a tagged literal from a\n  tag symbol and a form."], null)),cljs.core.with_meta(cljs.core.cst$sym$println,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as print followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$assoc_DASH_in,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentHashSet,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_test,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Test bit at index n"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Namespace,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientHashMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentHashMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_extend_DASH_kv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ISwap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding swapping functionality.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args)."], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ChunkedCons,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$memoize,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use."], null)),cljs.core.with_meta(cljs.core.cst$sym$alter_DASH_meta_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_StringBufferWriter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$zero_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is zero, else false"], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_ensure_DASH_editable,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$simple_DASH_keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword without a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_indexOf,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_main_DASH_cli_DASH_fn_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IVector,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_dec_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_imap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dominates,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$hierarchy], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception."], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_print_DASH_fn_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-fn* to f."], null)),cljs.core.with_meta(cljs.core.cst$sym$nnext,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (next x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$Box,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_right,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$throw_DASH_no_DASH_method_DASH_error,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$demunge_DASH_str,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$add_DASH_watch,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1"], null)),cljs.core.with_meta(cljs.core.cst$sym$not_DASH_every_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for every x in\n  coll, else true."], null)),cljs.core.with_meta(cljs.core.cst$sym$rem,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"remainder of dividing numerator by denominator."], null)),cljs.core.with_meta(cljs.core.cst$sym$ifind_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements IFind"], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_sb_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_HashMapIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$BitmapIndexedNode,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_NodeSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$some,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)"], null)),cljs.core.with_meta(cljs.core.cst$sym$INamed,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding a name.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the name String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the namespace String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Box,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IReduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for seq types that can reduce themselves.\n  Called by cljs.core/reduce.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$neg_DASH_int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is negative."], null)),cljs.core.with_meta(cljs.core.cst$sym$drop,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$NodeIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_obj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientCollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding basic functionality to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Atom,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISorted"], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is nil, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$split_DASH_at,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take n coll) (drop n coll)]"], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientHashSet,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_e,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the most recent exception caught by the repl"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_map_DASH_extend_DASH_kv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prn_DASH_str_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Same as pr-str-with-opts followed by (newline)"], null)),cljs.core.cst$sym$not_DASH_native,cljs.core.with_meta(cljs.core.cst$sym$random_DASH_sample,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$select_DASH_keys,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null))),cljs.core.cst$kw$doc,"Returns a map containing only those entries in map whose key is in keys"], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_and,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bounded_DASH_count,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq",cljs.core.cst$kw$added,"1.9"], null)),cljs.core.with_meta(cljs.core.cst$sym$update,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$gensym_counter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_macros_DASH_ns,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$list_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Keyword,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$update_DASH_in,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),cljs.core.cst$kw$doc,"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict"], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_symbol,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ensure_DASH_reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is already reduced?, returns it, else returns (reduced x)"], null)),cljs.core.with_meta(cljs.core.cst$sym$edit_DASH_and_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentArrayMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$instance_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$mix_DASH_collection_DASH_hash,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null))),cljs.core.cst$kw$doc,"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms."], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_find,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups."], null)),cljs.core.with_meta(cljs.core.cst$sym$run_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$char_DASH_escapes,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6Iterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_add,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the sum of nums. (+) returns 0.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$transformer_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$not,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is logical false, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IVolatile,cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$fn_DASH__GT_comparator,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator."], null)),cljs.core.with_meta(cljs.core.cst$sym$with_DASH_meta,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unreduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is reduced?, returns (deref x), else returns x"], null)),cljs.core.with_meta(cljs.core.cst$sym$record_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IRecord"], null)),cljs.core.with_meta(cljs.core.cst$sym$type,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return x's constructor."], null)),cljs.core.with_meta(cljs.core.cst$sym$identical_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Tests if 2 arguments are the same object"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$kw$doc,"Returns the namespace String of x.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_divide_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ns_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Returns the name of the namespace, a Namespace object.\n  Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$swap_DASH_global_DASH_hierarchy_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$max_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is greatest.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentTreeSet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_out_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ChunkBuffer,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_string,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ValSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_validator_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null))),cljs.core.cst$kw$doc,"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed."], null)),cljs.core.with_meta(cljs.core.cst$sym$ident_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMeta,cljs.core.cst$kw$doc,"Returns the metadata of object o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RedNode,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_IndexedSeqIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_left_DASH_del,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$swap_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$vals,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Single,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_subtract,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_pair,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding mapping functionality to collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_SeqIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_set_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentVector,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 25, [cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$cloneable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if x implements ICloneable protocol."], null)),cljs.core.with_meta(cljs.core.cst$sym$qualified_DASH_ident_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword with a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_string_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$key_DASH_test,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$true_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value true, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_ns_DASH_obj_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$array,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null))),cljs.core.cst$kw$doc,"Creates a new javascript array.\n@param {...*} var_args"], null)),cljs.core.with_meta(cljs.core.cst$sym$print,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Prints the object(s) using string-print.\n  print and println produce output for human consumption."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ISeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections to provide access to their items as sequences.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$empty,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll, or nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Removes the method of multimethod associated with dispatch-value."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentQueueSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_right_DASH_del,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$volatile_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_SLASH_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bitpos,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Many,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_or,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_fmix,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$vector,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Creates a new vector containing the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_coll,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$clone_DASH_and_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH__GT_transient_DASH_hash_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_GT__EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientHashSet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$drop_DASH_last,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a lazy sequence of all but the last n (default 1) items in coll",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$object_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x's constructor is Object"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayNodeSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$lift_DASH_ns,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null))),cljs.core.cst$kw$doc,"Returns [lifted-ns lifted-map] or nil if m can't be lifted."], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_append,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$not_DASH_empty,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is empty, returns nil, else coll"], null)),cljs.core.with_meta(cljs.core.cst$sym$distinct,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$partition,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IMultiFn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null))],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Many,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vals], null)))], null)),cljs.core.cst$sym$DEMUNGE_PATTERN,cljs.core.with_meta(cljs.core.cst$sym$fix,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$EmptyList,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$HashMapIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$IAssociative,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding associativity to collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if k is a key in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Single,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_flip,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Flip bit at index n"], null)),cljs.core.with_meta(cljs.core.cst$sym$long_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$descendants,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$imul,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Delay,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_for,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$merge,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ISeqable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding the ability to a type to be transformed into a sequence.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Empty,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_mod,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"], null)),cljs.core.with_meta(cljs.core.cst$sym$integer_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is a JavaScript number with no decimal part."], null)),cljs.core.with_meta(cljs.core.cst$sym$MetaFn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$NS_CACHE,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,"Bootstrap only.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$mapv,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$infinite_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for Infinity and -Infinity values."], null)),cljs.core.with_meta(cljs.core.cst$sym$partition_DASH_all,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$partition_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ISequential,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker interface indicating a persistent collection of sequential items",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_LazySeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$equiv_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Test map equivalence. Returns true if x equals y, otherwise returns false."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Volatile,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$object_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Keyword,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$derive,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$seq_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Empty,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$IChunkedSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing a collection as sequential chunks.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first chunk in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$special_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x names a special form"], null)),cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_keywords,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ancestors,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$subseq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$gensym,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null))),cljs.core.cst$kw$doc,"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_INext,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_HashCollisionNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$delay_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"returns true if x is a Delay created with delay"], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_inode_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$flatten,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMap,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$doubles,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$halt_DASH_when,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null))),cljs.core.cst$kw$doc,"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.",cljs.core.cst$kw$added,"1.9",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$kw$doc,"Returns true if k is a key in coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Removes a watch (set by add-watch) from a reference"], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_info,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null))),cljs.core.cst$kw$doc,"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ifn_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns true if f returns true for fn? or satisfies IFn."], null)),cljs.core.with_meta(cljs.core.cst$sym$IAtom,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol indicating an atom.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentQueue,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nat_DASH_int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is a natural integer value."], null)),cljs.core.with_meta(cljs.core.cst$sym$IWatchable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for types that can be watched. Currently only implemented by Atom.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_fresh_DASH_node,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$subvec,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$partial,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chunked_DASH_seq_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is satisfies IChunkedSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$replicate,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentQueue,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$min_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is least.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_iset,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Wraps x in a way such that a reduce will terminate with the value x"], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_matches,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the result of (re-find re s) if re fully matches s."], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_writer_DASH_impl,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new array map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientSet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding set functionality to a transient collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll without v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)], null)])], null)], null)),cljs.core.cst$sym$ITER_SYMBOL,cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_byte,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$checked_DASH_aset,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayNode,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ChunkedSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$every_DASH_pred,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keys,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$missing_DASH_protocol,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$load_DASH_file,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentArrayMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$distinct_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns true if no two of the arguments are =",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pos_DASH_int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is positive."], null)),cljs.core.with_meta(cljs.core.cst$sym$never_DASH_equiv,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_short,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Range,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MapEntry,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$apply_DASH_to_DASH_simple,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null))),cljs.core.cst$kw$doc,"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$methods,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of dispatch values -> dispatch fns"], null)),cljs.core.with_meta(cljs.core.cst$sym$odd_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is odd, throws an exception if n is not an integer"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayChunk,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ci_DASH_reduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),cljs.core.cst$kw$doc,"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_3,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the third most recent value printed"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Var,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$frequencies,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map from distinct items in coll to the number of times\n  they appear."], null)),cljs.core.with_meta(cljs.core.cst$sym$reduceable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies IReduce"], null)),cljs.core.cst$sym$string_DASH_hash_DASH_cache,cljs.core.with_meta(cljs.core.cst$sym$rsubseq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$inc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one greater than num."], null)),cljs.core.with_meta(cljs.core.cst$sym$type_DASH__GT_str,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default"], null)),cljs.core.with_meta(cljs.core.cst$sym$uuid_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$vector_DASH_index_DASH_out_DASH_of_DASH_bounds,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_entries_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_clear,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Clear bit at index n"], null)),cljs.core.with_meta(cljs.core.cst$sym$Range,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$filter,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentTreeMapSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_array_DASH_node_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IWithMeta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding metadata to an object.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$list,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_PLUS_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the sum of nums. (+) returns 0.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IndexedSeqIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$split_DASH_with,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take-while pred coll) (drop-while pred coll)]"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_VectorNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$aset,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$doc,"Sets the value at the index/indices. Works on JavaScript arrays.\n  Returns val.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$int_DASH_rotate_DASH_left,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$keyword,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Cons,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_ns_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the current namespace. Only used for bootstrapping.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_assert_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$dynamic,true], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_tree_DASH_map_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ICollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding to a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null))),cljs.core.cst$kw$doc,"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$ASeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol indicating an array sequence.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_seq_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$SeqIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$IFn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$regexp_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript RegExp instance."], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$underive,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_copy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_map_DASH_compare_DASH_keys,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReset,cljs.core.cst$kw$doc,"Sets the value of o to new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$false_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value false, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$RangedIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_readably_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true"], null)),cljs.core.with_meta(cljs.core.cst$sym$ints,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$some_DASH_fn,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$demunge_DASH_pattern,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_flush_DASH_on_DASH_newline_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true."], null)),cljs.core.with_meta(cljs.core.cst$sym$to_DASH_array,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$build_DASH_subvec,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$maybe_DASH_warn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$list_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x implements IList"], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_remove,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentQueueIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$HashCollisionNode,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript array."], null)),cljs.core.with_meta(cljs.core.cst$sym$prefers_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$simple_DASH_ident_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword without a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Clone the supplied value which must implement ICloneable."], null)),cljs.core.with_meta(cljs.core.cst$sym$scan_DASH_array,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$demunge,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_not,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Bitwise complement"], null)),cljs.core.with_meta(cljs.core.cst$sym$quote_DASH_string,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$byte,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$max,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the greatest of the nums.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IComparable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for values that can be compared.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_EQ__EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$parents,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,cljs.core.cst$kw$doc,"Returns tcoll without v.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_loaded_DASH_libs_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$EMPTY,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientHashMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayChunk,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_map_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$apply,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_global_DASH_hierarchy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$add_DASH_to_DASH_string_DASH_hash_DASH_cache,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientArrayMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IChunkedNext,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the chunks of a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$interpose,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$TransformerIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_BlackNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_aget,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$assoc,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISet,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_cons,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$comparator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null))),cljs.core.cst$kw$doc,"Returns an JavaScript compatible comparator based upon pred."], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_prefix_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix,cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$drop_DASH_while,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IWriter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for writing. Currently only implemented by StringBufferWriter.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Writes s with writer and returns the result."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Flush writer."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$KeySeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$realized_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if a value has been produced for a delay or lazy sequence."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_fn_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null)),cljs.core.with_meta(cljs.core.cst$sym$compare,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$complement,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value."], null)),cljs.core.with_meta(cljs.core.cst$sym$lookup_DASH_sentinel,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_dup_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false."], null)),cljs.core.with_meta(cljs.core.cst$sym$string_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IDeref,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding dereference functionality to a reference.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the reference o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$sequence,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$constantly,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a function that takes any number of arguments and returns x."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RangedIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$chunked_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ISorted,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for a collection which can represent their items\n  in a sorted manner. ",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key for entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the comparator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$make_DASH_array,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$array,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null))),cljs.core.cst$kw$doc,"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$checked_DASH_aget,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$shorts,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.cst$sym$_STAR_unchecked_DASH_if_STAR_,cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$enable_DASH_console_DASH_print_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Set *print-fn* to console.log"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Flush writer.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_lastIndexOf,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$completing,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null))),cljs.core.cst$kw$doc,"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_negate_DASH_int,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 25, [cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$equiv_DASH_sequential,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_unordered_DASH_coll,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms."], null)),cljs.core.with_meta(cljs.core.cst$sym$repeat,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!, or length n if supplied) sequence of xs.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_inc,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nthnext,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth next of coll, (seq coll) when n is 0."], null)),cljs.core.with_meta(cljs.core.cst$sym$preserving_DASH_reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_validator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null))),cljs.core.cst$kw$doc,"Gets the validator-fn for a var/ref/agent/atom."], null)),cljs.core.with_meta(cljs.core.cst$sym$StringIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$number_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript number."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentArrayMapSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayList,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"print to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$not_DASH_any_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for any x in coll,\n  else true."], null)),cljs.core.with_meta(cljs.core.cst$sym$into_DASH_array,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IHash,cljs.core.cst$kw$doc,"Returns the hash code of o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$qualified_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol with a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Reduced,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$seqable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if the seq function is supported for s"], null)),cljs.core.with_meta(cljs.core.cst$sym$symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Symbol"], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_hash_DASH_unencoded_DASH_chars,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_char,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$system_DASH_time,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Returns highest resolution time offered by host in milliseconds."], null)),cljs.core.with_meta(cljs.core.cst$sym$NeverEquiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chunkIteratorSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,22,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$coll_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ICollection"], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_in,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$added,"1.2",cljs.core.cst$kw$static,true,cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$doc,"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied."], null)),cljs.core.with_meta(cljs.core.cst$sym$fnext,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$IList,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker interface indicating a persistent list",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayNodeIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$List,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the value of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bytes,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ObjMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_symbols,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null))],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8784,10,8784,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentHashSet,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8784,8784,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10280,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10280,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH__GT_clj,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10280,10280,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2414,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2414,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sort_DASH_by,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2414,2414,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",782,14,782,35,"Protocol for adding associativity to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,"cljs/core.cljs",35,1,782,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)], null)])], null),null,782,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null], null), null),"Protocol for adding associativity to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3582,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3582,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_first,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3582,3582,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9638,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9638,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_meta_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)),null,cljs.core.list(null,null),1,9638,cljs.core.cst$sym$boolean,9638,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,918,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,918,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_hash_DASH_int,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)),null,cljs.core.list(null,null),1,918,cljs.core.cst$sym$number,918,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,866,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,866,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null))),cljs.core.cst$kw$doc,"Support so that collections can implement toString without\n   loading all the printing machinery."], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str_STAR_,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null)),null,cljs.core.list(null,null),1,866,866,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null))),"Support so that collections can implement toString without\n   loading all the printing machinery."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10223,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10223,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform_STAR_,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_eduction,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),null,cljs.core.list(null),1,10223,10223,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4910,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4910,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree."], null),cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_seq,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null)),null,cljs.core.list(null,null),1,4910,4910,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null))),"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2741,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2741,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_remainder_DASH_int,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2741,2741,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10807,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10807,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_uuid,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,10807,10807,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1191,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,1191,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings."], null),cljs.core.cst$sym$cljs$core_SLASH_seq,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1191,cljs.core.cst$sym$seq,1191,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Volatile,"cljs/core.cljs",18,true,10,4504,false,4504,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2471,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2471,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_reduce,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2471,2471,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",10779,14,10779,19,"A marker protocol for UUIDs",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IUUID,"cljs/core.cljs",19,1,10779,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,10779,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_UUID,null], null), null),"A marker protocol for UUIDs",cljs.core.list("@interface")]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_INIT,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3977,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,3977,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3977,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,3977,cljs.core.cst$kw$end_DASH_column,10], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$object], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11139,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11139,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_find_DASH_ns,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null)),null,cljs.core.list(null,null),1,11139,11139,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2303,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2303,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'."], null),cljs.core.cst$sym$cljs$core_SLASH_contains_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,2303,cljs.core.cst$sym$boolean,2303,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$type,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core9496,"cljs/core.cljs",true,true,3,3947,false,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4164,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4164,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if (pred x) is logical true for every x in coll, else\n  false."], null),cljs.core.cst$sym$cljs$core_SLASH_every_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4164,cljs.core.cst$sym$boolean,4164,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns true if (pred x) is logical true for every x in coll, else\n  false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1282,10,1282,24,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6IteratorSeq,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1282,1282,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Var,"cljs/core.cljs",13,true,10,1099,false,1099,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4526,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4526,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_keep_DASH_indexed,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4526,4526,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5901,10,5901,28,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentQueueSeq,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5901,5901,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2937,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2937,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$doc,"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_subs,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,2937,2937,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",623,14,623,19,"Protocol for implementing entry finding in collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_find,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IFind,"cljs/core.cljs",19,1,623,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_find,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null),null,623,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for implementing entry finding in collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9040,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9040,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a set of the distinct elements of coll."], null),cljs.core.cst$sym$cljs$core_SLASH_set,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9040,9040,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a set of the distinct elements of coll."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_MODULE_URIS,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,39,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,39,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,39,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,39,cljs.core.cst$kw$end_DASH_column,17], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_nil], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2368,17,2368,32,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null))),"Compare indexed collection.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_indexed,false,"cljs/core.cljs",32,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2368,2368,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),"Compare indexed collection."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4744,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4744,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec."], null),cljs.core.cst$sym$cljs$core_SLASH_take_DASH_last,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4744,4744,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1174,cljs.core.cst$kw$column,29,cljs.core.cst$kw$end_DASH_line,1174,cljs.core.cst$kw$end_DASH_column,39,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,"cljs/core.cljs",20,true,10,1557,false,true,1557,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2852,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2852,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Set bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_set,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2852,2852,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Set bit at index n"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_string_DASH_hash_DASH_cache_DASH_count,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,945,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,945,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,945,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,945,cljs.core.cst$kw$end_DASH_column,29], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$number], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3342,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3342,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword with a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_keyword_QMARK_,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3342,cljs.core.cst$sym$boolean,3342,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a keyword with a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",10193,10,10193,18,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Eduction,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10193,10193,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8269,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8269,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_add,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)),null,cljs.core.list(null,null),1,8269,8269,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6244,10,6244,31,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6SetEntriesIterator,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6244,6244,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",675,9,675,19,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,"Returns a new object with value of o and metadata meta added to it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,cljs.core.cst$sym$cljs$core_SLASH__DASH_with_DASH_meta,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,673,cljs.core.cst$sym$clj,675,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null))),"Returns a new object with value of o and metadata meta added to it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10487,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10487,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_reset_DASH_cache,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)),null,cljs.core.list(null,null),1,10487,10487,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6496,10,6496,36,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentArrayMapIterator,false,"cljs/core.cljs",36,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6496,6496,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapIterator,"cljs/core.cljs",36,true,10,6496,false,6496,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9118,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9118,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a seq of all but the last item in coll, in linear time"], null),cljs.core.cst$sym$cljs$core_SLASH_butlast,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9118,9118,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return a seq of all but the last item in coll, in linear time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5083,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5083,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tail_DASH_off,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)),null,cljs.core.list(null,null),1,5083,5083,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2751,15,2751,37,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract_DASH_int,true,"cljs/core.cljs",37,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2751,cljs.core.cst$sym$number,2751,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,856,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,856,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IIterable,cljs.core.cst$kw$doc,"Returns an iterator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IIterable,cljs.core.cst$sym$cljs$core_SLASH__DASH_iterator,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,854,856,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns an iterator for coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,129,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,129,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_namespace_DASH_maps_STAR_,"cljs/core.cljs",25,1,true,123,129,cljs.core.cst$sym$boolean,"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9375,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9375,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_take_DASH_nth,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9375,9375,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1214,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1214,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_first,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1214,1214,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,269,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,269,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null),cljs.core.cst$sym$cljs$core_SLASH_native_DASH_satisfies_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,269,cljs.core.cst$sym$boolean,269,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null))),"Internal - do not use!"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2198,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2198,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if s satisfies ISeq"], null),cljs.core.cst$sym$cljs$core_SLASH_seq_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,2198,cljs.core.cst$sym$boolean,2198,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return true if s satisfies ISeq"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10377,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10377,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH__DASH_global_DASH_hierarchy,"cljs/core.cljs",20,1,10374,10377,cljs.core.cst$sym$clj_DASH_nil,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_UUID,"cljs/core.cljs",14,true,10,10781,false,10781,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",727,9,727,25,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISorted,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_sorted_DASH_seq_DASH_from,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)),null,cljs.core.list(null,null),1,722,cljs.core.cst$sym$clj,727,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null))),"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9823,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9823,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"println to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_println_DASH_str,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9823,9823,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"println to a string, returning it"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1373,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1373,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),cljs.core.cst$kw$doc,"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT"], null),cljs.core.cst$sym$cljs$core_SLASH_inst_DASH_ms,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)),null,cljs.core.list(null,null),1,1373,1373,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1810,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1810,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_linear_DASH_traversal_DASH_nth,false,"cljs/core.cljs",28,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,1810,1810,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4806,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4806,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects",cljs.core.cst$kw$added,"1.0"], null),"1.0",cljs.core.cst$sym$cljs$core_SLASH_iterate,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4806,4806,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null))),"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,469,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,469,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$or,cljs.core.list(cljs.core.cst$sym$array_QMARK_,cljs.core.cst$sym$array),cljs.core.list(cljs.core.cst$sym$js_SLASH_goog$isArrayLike,cljs.core.cst$sym$array)),cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$idx),cljs.core.list(cljs.core.cst$sym$not,cljs.core.list(cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$idx)),cljs.core.list(cljs.core.cst$sym$_LT_,cljs.core.cst$sym$idx,cljs.core.list(cljs.core.cst$sym$alength,cljs.core.cst$sym$array))], null)], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_checked_DASH_aget_SINGLEQUOTE_,true,"cljs/core.cljs",21,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,469,469,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,566,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,566,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_empty,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,564,566,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9778,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9778,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a newline using *print-fn*",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_newline,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9778,9778,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),"Prints a newline using *print-fn*"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",608,14,608,21,"Protocol for looking up a value in a data structure.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ILookup,"cljs/core.cljs",21,1,608,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)], null)])], null),null,608,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20571,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for looking up a value in a data structure.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,820,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,820,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_chunked_DASH_rest,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,816,820,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a new collection of coll with the first chunk removed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9606,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9606,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_write_DASH_all,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),null,cljs.core.list(null),1,9606,9606,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1977,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1977,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Return true if f is a JavaScript function or satisfies the Fn protocol."], null),cljs.core.cst$sym$cljs$core_SLASH_fn_QMARK_,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,1977,cljs.core.cst$sym$boolean,1977,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Return true if f is a JavaScript function or satisfies the Fn protocol."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10546,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10546,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_prefer_DASH_method,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)),null,cljs.core.list(null,null),1,10542,10546,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",619,9,619,15,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,"Returns a new collection of coll with a mapping from key k to\n     value v added to it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,614,cljs.core.cst$sym$clj,619,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null))),"Returns a new collection of coll with a mapping from key k to\n     value v added to it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9516,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9516,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_doall,false,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9516,9516,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3293,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3293,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two keywords are identical."], null),cljs.core.cst$sym$cljs$core_SLASH_keyword_DASH_identical_QMARK_,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,3293,cljs.core.cst$sym$boolean,3293,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Efficient test to determine that two keywords are identical."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,75,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,75,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_err_DASH_fn_STAR_,"cljs/core.cljs",17,1,true,71,75,cljs.core.cst$sym$clj_DASH_nil,"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5077,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5077,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_aset,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,5077,5077,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10766,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10766,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of preferred value -> set of other values"], null),cljs.core.cst$sym$cljs$core_SLASH_prefers,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,10766,10766,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, returns a map of preferred value -> set of other values"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10278,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10278,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,cljs.core.cst$sym$cljs$core_SLASH__DASH_js_DASH__GT_clj,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)),null,cljs.core.list(null,null),1,10277,10278,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null))),"Transforms JavaScript values to Clojure"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_LazySeq,"cljs/core.cljs",17,true,10,3370,false,3370,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10166,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10166,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dedupe,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,10166,10166,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5737,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5737,cljs.core.cst$kw$end_DASH_column,36,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_editable_DASH_array_DASH_for,false,"cljs/core.cljs",36,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,5737,5737,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1266,10,1266,21,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6Iterator,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1266,1266,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH_VectorNode,"cljs/core.cljs",20,true,10,5069,false,5069,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1963,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1963,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dissoc,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null,null),1,1963,1963,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4390,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4390,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null))),cljs.core.cst$kw$doc,"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_atom,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4390,4390,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2866,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2866,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2866,2866,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Bitwise shift right"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MapEntry,"cljs/core.cljs",18,true,10,6335,false,6335,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_clojurescript_DASH_version_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,19,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,19,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,19,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,19,cljs.core.cst$kw$end_DASH_column,29], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$string], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,592,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,592,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_first,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,590,592,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the first item in the collection coll. Used by cljs.core/first."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2051,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2051,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_peek,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2051,2051,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",686,14,686,23,"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core/reduce-kv.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,"cljs/core.cljs",23,1,686,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)], null)])], null),null,686,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null], null), null),"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core/reduce-kv.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2448,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2448,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_iter_DASH_reduce,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,2448,2448,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,485,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,485,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$doc,"Returns the value at the index/indices. Works on JavaScript arrays.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_aget,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,485,485,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),"Returns the value at the index/indices. Works on JavaScript arrays."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,"cljs/core.cljs",30,true,10,7814,false,7814,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,741,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,741,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Writes s with writer and returns the result.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$sym$cljs$core_SLASH__DASH_write,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,739,741,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null))),"Writes s with writer and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4001,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4001,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_iter,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4001,4001,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9222,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9222,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_mk_DASH_bound_DASH_fn,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,9222,9222,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1750,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1750,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return the last item in coll, in linear time"], null),cljs.core.cst$sym$cljs$core_SLASH_last,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,1750,1750,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return the last item in coll, in linear time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10550,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10550,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_default_DASH_dispatch_DASH_val,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,10542,10550,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9796,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9796,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_pr,true,"cljs/core.cljs",9,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9796,9796,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7807,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7807,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_seq_DASH_push,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)),null,cljs.core.list(null,null),1,7807,7807,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3311,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3311,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns the namespace String of a symbol or keyword, or nil if not present."], null),cljs.core.cst$sym$cljs$core_SLASH_namespace,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3311,3311,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the namespace String of a symbol or keyword, or nil if not present."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_empty_DASH_unordered_DASH_hash,"cljs/core.cljs",1340,1,1340,36,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1340,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1340,cljs.core.cst$kw$end_DASH_column,36,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$number]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8548,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8548,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new object map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_map,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8548,8548,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new object map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Reduced,"cljs/core.cljs",17,true,10,1406,false,1406,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",572,9,572,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ICollection,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ICollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_conj,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,570,cljs.core.cst$sym$clj,572,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null))),"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,"cljs/core.cljs",17,true,10,7370,false,7370,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",1247,16,1247,17,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__EQ_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,1247,cljs.core.cst$sym$boolean,1247,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",788,14,788,27,"Protocol for adding mapping functionality to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,"cljs/core.cljs",27,1,788,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)], null)])], null),null,788,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null], null), null),"Protocol for adding mapping functionality to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5099,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5099,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_push_DASH_tail,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)),null,cljs.core.list(null,null),1,5099,5099,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4687,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4687,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_take,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4687,4687,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2132,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2132,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IVector"], null),cljs.core.cst$sym$cljs$core_SLASH_vector_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2132,cljs.core.cst$sym$boolean,2132,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies IVector"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6294,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6294,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_equiv_QMARK_,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6294,6294,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6832,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6832,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_bitmap_DASH_indexed_DASH_node_DASH_index,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)),null,cljs.core.list(null,null),1,6832,6832,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2213,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2213,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to boolean"], null),cljs.core.cst$sym$cljs$core_SLASH_boolean,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2213,cljs.core.cst$sym$boolean,2213,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to boolean"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",811,14,811,20,"Protocol for accessing the items of a chunk.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IChunk,"cljs/core.cljs",20,1,811,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,811,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null], null), null),"Protocol for accessing the items of a chunk.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2862,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2862,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift left"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_left,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2862,2862,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Bitwise shift left"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10811,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10811,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_random_DASH_uuid,false,"cljs/core.cljs",18,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,10811,10811,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,264,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,264,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if given any argument."], null),cljs.core.cst$sym$cljs$core_SLASH_any_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,264,cljs.core.cst$sym$boolean,264,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if given any argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10347,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10347,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns a random integer between 0 (inclusive) and n (exclusive)."], null),cljs.core.cst$sym$cljs$core_SLASH_rand_DASH_int,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,10347,10347,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns a random integer between 0 (inclusive) and n (exclusive)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,415,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,415,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null))),cljs.core.cst$kw$doc,"Returns a javascript array, cloned from the passed in array"], null),cljs.core.cst$sym$cljs$core_SLASH_aclone,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,415,415,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null))),"Returns a javascript array, cloned from the passed in array"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7886,cljs.core.cst$kw$column,18,cljs.core.cst$kw$end_DASH_line,7886,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_BlackNode,"cljs/core.cljs",19,true,10,7986,false,true,7986,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4521,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4521,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Sets the value of volatile to newval without regard for the\n   current value. Returns newval."], null),cljs.core.cst$sym$cljs$core_SLASH_vreset_BANG_,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null)),null,cljs.core.list(null,null),1,4521,4521,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null))),"Sets the value of volatile to newval without regard for the\n   current value. Returns newval."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3579,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3579,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,3579,3579,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2644,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2644,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than num."], null),cljs.core.cst$sym$cljs$core_SLASH_dec,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2644,2644,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one less than num."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4083,10,4083,29,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransformerIterator,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4083,4083,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",5204,14,5204,31,"Marker protocol",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,"cljs/core.cljs",31,1,5204,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,5204,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null], null), null),"Marker protocol",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4640,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4640,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_map,true,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),null,cljs.core.list(null,null,null,null,null),1,4640,4640,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9467,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9467,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_juxt,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),null,cljs.core.list(null,null,null,null),1,9467,9467,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5886,10,5886,29,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentQueueIter,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5886,5886,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2596,16,2596,17,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__LT_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2596,cljs.core.cst$sym$boolean,2596,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6849,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6849,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_inode_DASH_kv_DASH_reduce,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,6849,6849,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6077,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6077,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_map_DASH__GT_hash_DASH_map,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,6077,6077,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10912,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10912,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception"], null),cljs.core.cst$sym$cljs$core_SLASH_test,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,10912,10912,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1225,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,1225,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument."], null),cljs.core.cst$sym$cljs$core_SLASH_rest,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1225,cljs.core.cst$sym$seq,1225,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10876,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10876,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_data,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),null,cljs.core.list(null,null),1,10876,10876,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,"cljs/core.cljs",31,true,10,6427,false,6427,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,813,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,813,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunk,cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunk,cljs.core.cst$sym$cljs$core_SLASH__DASH_drop_DASH_first,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,811,813,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a new chunk of coll with the first item removed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",10387,16,10387,20,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null))),"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_isa_QMARK_,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),null,cljs.core.list(null,null),1,10387,cljs.core.cst$sym$boolean,10387,3,cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2189,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2189,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Boolean"], null),cljs.core.cst$sym$cljs$core_SLASH_boolean_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2189,cljs.core.cst$sym$boolean,2189,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a Boolean"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",556,9,556,15,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,"Creates a clone of value.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ICloneable,cljs.core.cst$sym$cljs$core_SLASH__DASH_clone,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,554,cljs.core.cst$sym$clj,556,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Creates a clone of value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11021,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11021,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_munge,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,11021,11021,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_empty_DASH_ordered_DASH_hash,"cljs/core.cljs",1325,1,1325,34,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1325,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1325,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$number]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_DEMUNGE_MAP,"cljs/core.cljs",351,1,352,14,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null),new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,352,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,352,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,"cljs/core.cljs",24,true,10,1282,false,1282,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6026,10,6026,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_NeverEquiv,false,"cljs/core.cljs",20,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6026,6026,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9563,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9563,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive matches of re in s."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_seq,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9563,9563,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),"Returns a lazy sequence of successive matches of re in s."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,259,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,259,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript string of length one."], null),cljs.core.cst$sym$cljs$core_SLASH_char_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,259,cljs.core.cst$sym$boolean,259,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript string of length one."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10370,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10370,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Creates a hierarchy object for use with derive, isa? etc."], null),cljs.core.cst$sym$cljs$core_SLASH_make_DASH_hierarchy,false,"cljs/core.cljs",21,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,10370,10370,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),"Creates a hierarchy object for use with derive, isa? etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,941,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,941,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Symbol,"cljs/core.cljs",16,true,10,1049,false,true,1049,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_PROTOCOL_SENTINEL,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,37,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,37,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,37,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,37,cljs.core.cst$kw$end_DASH_column,27], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$object], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5711,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5711,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_push_DASH_tail,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)),null,cljs.core.list(null,null),1,5711,5711,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",681,4,681,11,cljs.core.cst$sym$cljs$core_SLASH_IReduce,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_IReduce,cljs.core.cst$sym$cljs$core_SLASH__DASH_reduce,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),null,cljs.core.list(null,null),1,678,681,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",561,12,561,18,cljs.core.cst$sym$number,cljs.core.cst$sym$cljs$core_SLASH_ICounted,"Calculates the count of coll in constant time. Used by cljs.core/count.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ICounted,cljs.core.cst$sym$cljs$core_SLASH__DASH_count,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,559,cljs.core.cst$sym$number,561,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Calculates the count of coll in constant time. Used by cljs.core/count."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta9497], null))),cljs.core.cst$kw$file,"cljs/core.cljs"], null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_t_cljs$core9496,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta9497], null)),null,cljs.core.list(null,null),true,3,cljs.core.cst$kw$positional,3947,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta9497], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$added,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",4462,7,4462,17,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.","1.9",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),"1.9",cljs.core.cst$sym$cljs$core_SLASH_swap_DASH_vals_BANG_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,4462,4462,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4327,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4327,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_keep,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4327,4327,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2664,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2664,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to char"], null),cljs.core.cst$sym$cljs$core_SLASH_char,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2664,2664,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to char"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],["1.0","cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),7,4863,4863,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided"]),"1.0",cljs.core.cst$sym$cljs$core_SLASH_mapcat,true,"cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,4863,4863,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2778,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2778,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_long,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2778,2778,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to long by stripping decimal places. Identical to `int'."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_seed,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,899,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,899,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,899,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,899,cljs.core.cst$kw$end_DASH_column,13], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$number], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,243,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,243,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is not nil, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_some_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,243,cljs.core.cst$sym$boolean,243,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is not nil, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2733,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2733,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2733,2733,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3302,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3302,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two symbols are identical."], null),cljs.core.cst$sym$cljs$core_SLASH_symbol_DASH_identical_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,3302,cljs.core.cst$sym$boolean,3302,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Efficient test to determine that two symbols are identical."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH__STAR_command_DASH_line_DASH_args_STAR_,"cljs/core.cljs",289,1,292,22,"A sequence of the supplied command line arguments, or nil if\n  none were supplied",new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,292,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,292,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$doc,"A sequence of the supplied command line arguments, or nil if\n  none were supplied"], null),cljs.core.cst$sym$clj_DASH_nil]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3156,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3156,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reverse order. Not lazy."], null),cljs.core.cst$sym$cljs$core_SLASH_reverse,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3156,3156,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq of the items in coll in reverse order. Not lazy."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1378,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1378,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies Inst"], null),cljs.core.cst$sym$cljs$core_SLASH_inst_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1378,cljs.core.cst$sym$boolean,1378,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies Inst"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9366,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9366,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_range,false,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),null,cljs.core.list(null,null,null,null),1,9366,9366,3,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2878,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2878,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Counts the number of bits set in n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_count,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,2878,2878,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),"Counts the number of bits set in n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7352,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7352,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,7,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_node,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,7,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),null,cljs.core.list(null,null),1,7352,7352,7,true,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2400,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2400,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sort,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2400,2400,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1982,10,1982,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MetaFn,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1982,1982,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2716,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2716,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc_DASH_int,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2716,2716,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",807,12,807,20,cljs.core.cst$sym$number,cljs.core.cst$sym$cljs$core_SLASH_IComparable,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IComparable,cljs.core.cst$sym$cljs$core_SLASH__DASH_compare,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,805,cljs.core.cst$sym$number,807,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4299,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4299,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_map_DASH_indexed,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4299,4299,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9169,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9169,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_list,false,"cljs/core.cljs",17,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,9169,9169,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10351,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10351,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection."], null),cljs.core.cst$sym$cljs$core_SLASH_rand_DASH_nth,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,10351,10351,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4216,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4216,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_comp,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),null,cljs.core.list(null,null,null,null,null),1,4216,4216,(3),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3491,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3491,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_chunk,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null,null),1,3491,3491,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10774,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10774,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's dispatch-fn."], null),cljs.core.cst$sym$cljs$core_SLASH_dispatch_DASH_fn,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,10774,10774,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, return it's dispatch-fn."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2870,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2870,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"DEPRECATED: Bitwise shift right with zero fill"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,false,"cljs/core.cljs",32,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2870,2870,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"DEPRECATED: Bitwise shift right with zero fill"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10986,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10986,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_reserved_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10986,10986,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta11421], null))),cljs.core.cst$kw$file,"cljs/core.cljs"], null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_t_cljs$core11420,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta11421], null)),null,cljs.core.list(null,null),true,3,cljs.core.cst$kw$positional,3947,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta11421], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",772,9,772,22,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,"Returns a new, transient version of the collection, in constant time.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_as_DASH_transient,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,770,cljs.core.cst$sym$clj,772,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new, transient version of the collection, in constant time."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9503,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9503,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dorun,false,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9503,9503,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9583,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9583,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$begin,cljs.core.cst$sym$sep,cljs.core.cst$sym$end,cljs.core.cst$sym$opts,cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_sequential_DASH_writer,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$begin,cljs.core.cst$sym$sep,cljs.core.cst$sym$end,cljs.core.cst$sym$opts,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9583,9583,7,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$begin,cljs.core.cst$sym$sep,cljs.core.cst$sym$end,cljs.core.cst$sym$opts,cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3330,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3330,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol without a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_symbol_QMARK_,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3330,cljs.core.cst$sym$boolean,3330,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol without a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1783,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1783,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_accumulating_DASH_seq_DASH_count,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1783,1783,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",581,14,581,22,"Protocol for collections to provide indexed-based access to their items.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,"cljs/core.cljs",22,1,581,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)], null)])], null),null,581,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for collections to provide indexed-based access to their items.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2066,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2066,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_disj,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null,null),1,2066,2066,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MultiIterator,"cljs/core.cljs",23,true,10,4056,false,4056,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",746,14,746,30,"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,"cljs/core.cljs",30,1,746,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)], null)])], null),null,746,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 44, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Volatile,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ExceptionInfo,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$reagent$ratom_SLASH_RCursor,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$reagent$ratom_SLASH_Wrapper,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_TransformerIterator,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$reagent$ratom_SLASH_Track,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$reagent$ratom_SLASH_Reaction,null,cljs.core.cst$sym$reagent$ratom_SLASH_RAtom,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",10781,10,10781,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_UUID,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10781,10781,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",655,14,655,21,"Protocol for adding vector functionality to collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IVector,"cljs/core.cljs",21,1,655,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null)])], null),null,655,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding vector functionality to collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",854,14,854,23,"Protocol for iterating over a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an iterator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IIterable,"cljs/core.cljs",23,1,854,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an iterator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,854,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNode,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_HashCollisionNode,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_BitmapIndexedNode,null], null), null),"Protocol for iterating over a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4056,10,4056,23,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iters], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MultiIterator,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iters], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4056,4056,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iters], null))),null]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_2,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,192,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,194,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the second most recent value printed",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,194,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,194,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the second most recent value printed"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Eduction,"cljs/core.cljs",18,true,10,10193,false,10193,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5080,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5080,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_clone_DASH_node,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5080,5080,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3237,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3237,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a new seq where x is the first element and coll is the rest."], null),cljs.core.cst$sym$cljs$core_SLASH_cons,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3237,3237,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$coll], null))),"Returns a new seq where x is the first element and coll is the rest."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,"cljs/core.cljs",27,true,10,8939,false,8939,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8774,10,8774,21,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_HashSetIter,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8774,8774,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11058,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11058,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),true,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_lookup,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,11058,11058,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2788,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2788,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_floats,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2788,2788,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5201,cljs.core.cst$kw$column,44,cljs.core.cst$kw$end_DASH_line,5201,cljs.core.cst$kw$end_DASH_column,59,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientVector,"cljs/core.cljs",25,true,10,5753,false,true,5753,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2898,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2898,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is greater than zero, else false"], null),cljs.core.cst$sym$cljs$core_SLASH_pos_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2898,cljs.core.cst$sym$boolean,2898,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if num is greater than zero, else false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4274,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4274,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null))),cljs.core.cst$kw$doc,"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_fnil,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),null,cljs.core.list(null,null,null),1,4274,4274,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8740,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8740,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_merge_DASH_with,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),null,cljs.core.list(null),1,8740,8740,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1896,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1896,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth rest of coll, coll when n is 0."], null),cljs.core.cst$sym$cljs$core_SLASH_nthrest,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,1896,1896,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),"Returns the nth rest of coll, coll when n is 0."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_warn_DASH_on_DASH_infer_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,33,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,33,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,33,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,33,cljs.core.cst$kw$end_DASH_column,21], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,625,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,625,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IFind,cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IFind,cljs.core.cst$sym$cljs$core_SLASH__DASH_find,false,"cljs/core.cljs",9,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,623,625,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns the map entry for key, or nil if key not present."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2108,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2108,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISequential"], null),cljs.core.cst$sym$cljs$core_SLASH_sequential_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2108,cljs.core.cst$sym$boolean,2108,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll satisfies ISequential"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8367,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8367,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_replace,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,8367,8367,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,477,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,477,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$or,cljs.core.list(cljs.core.cst$sym$array_QMARK_,cljs.core.cst$sym$array),cljs.core.list(cljs.core.cst$sym$js_SLASH_goog$isArrayLike,cljs.core.cst$sym$array)),cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$idx),cljs.core.list(cljs.core.cst$sym$not,cljs.core.list(cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$idx)),cljs.core.list(cljs.core.cst$sym$_LT_,cljs.core.cst$sym$idx,cljs.core.list(cljs.core.cst$sym$alength,cljs.core.cst$sym$array))], null)], null)),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_checked_DASH_aset_SINGLEQUOTE_,true,"cljs/core.cljs",21,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,477,477,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,906,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,906,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_mix_DASH_H1,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)),null,cljs.core.list(null,null),1,906,cljs.core.cst$sym$number,906,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RecordIter,"cljs/core.cljs",20,true,10,6218,false,6218,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6725,10,6725,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientArrayMap,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6725,6725,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1645,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1645,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null))),cljs.core.cst$kw$doc,"Create seq from a primitive JavaScript Array-like.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_prim_DASH_seq,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,1645,1645,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),"Create seq from a primitive JavaScript Array-like."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,154,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,154,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_level_STAR_,"cljs/core.cljs",16,1,true,143,154,cljs.core.cst$sym$clj_DASH_nil,"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2441,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2441,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random permutation of coll"], null),cljs.core.cst$sym$cljs$core_SLASH_shuffle,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2441,2441,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a random permutation of coll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2136,cljs.core.cst$kw$column,22,cljs.core.cst$kw$end_DASH_line,2136,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$declared,true], null),6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,"cljs/core.cljs",20,true,10,5447,false,true,5447,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3245,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3245,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_keyword,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,3245,3245,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2314,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2314,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null),cljs.core.cst$sym$cljs$core_SLASH_find,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,2314,2314,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns the map entry for key, or nil if key not present."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,500,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,500,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null))),cljs.core.cst$kw$doc,"Returns the length of the array. Works on arrays of all types."], null),cljs.core.cst$sym$cljs$core_SLASH_alength,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null)),null,cljs.core.list(null,null),1,500,cljs.core.cst$sym$number,500,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null))),"Returns the length of the array. Works on arrays of all types."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2814,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2814,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise exclusive or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_xor,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2814,2814,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise exclusive or"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1557,10,1557,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_IndexedSeq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1557,1557,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ObjMap,"cljs/core.cljs",16,true,10,6101,false,6101,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2874,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2874,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right with zero fill"], null),cljs.core.cst$sym$cljs$core_SLASH_unsigned_DASH_bit_DASH_shift_DASH_right,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2874,2874,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Bitwise shift right with zero fill"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6SetEntriesIterator,"cljs/core.cljs",31,true,10,6244,false,6244,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2907,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2907,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is less than zero, else false"], null),cljs.core.cst$sym$cljs$core_SLASH_neg_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2907,cljs.core.cst$sym$boolean,2907,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if num is less than zero, else false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Cons,"cljs/core.cljs",14,true,10,3180,false,3180,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10545,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10545,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_remove_DASH_method,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10542,10545,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3953,10,3953,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_StringIter,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3953,3953,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,515,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,515,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_invoke,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,515,515,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3003,10,3003,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_List,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3003,3003,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,903,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,903,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_mix_DASH_K1,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)),null,cljs.core.list(null,null),1,903,cljs.core.cst$sym$number,903,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2679,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2679,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_float,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2679,cljs.core.cst$sym$number,2679,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2193,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2193,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x identical to the JavaScript undefined value."], null),cljs.core.cst$sym$cljs$core_SLASH_undefined_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2193,cljs.core.cst$sym$boolean,2193,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x identical to the JavaScript undefined value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",668,14,668,19,"Protocol for accessing the metadata of an object.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns the metadata of object o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMeta,"cljs/core.cljs",19,1,668,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns the metadata of object o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null),null,668,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 50, [cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20218,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core$async$impl$channels_SLASH_t_cljs$core$async$impl$channels17231,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20592,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20326,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20242,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20232,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20300,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20154,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20204,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20314,null,cljs.core.cst$sym$cljs$analyzer_SLASH_t_cljs$analyzer14479,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20571,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20588,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$function,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20564,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$reagent$ratom_SLASH_RAtom,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null,cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core11420,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for accessing the metadata of an object.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1415,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1415,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null))),cljs.core.cst$kw$doc,"Returns true if x is the result of a call to reduced"], null),cljs.core.cst$sym$cljs$core_SLASH_reduced_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null)),null,cljs.core.list(null,null),1,1415,cljs.core.cst$sym$boolean,1415,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null))),"Returns true if x is the result of a call to reduced"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$file,"cljs/core.cljs"], null),cljs.core.cst$sym$cljs$core_SLASH_apply_DASH_to,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null)),null,cljs.core.list(null,null),1,3831,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3816,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3816,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_disj_BANG_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,3816,3816,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",610,4,610,11,cljs.core.cst$sym$cljs$core_SLASH_ILookup,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_ILookup,cljs.core.cst$sym$cljs$core_SLASH__DASH_lookup,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,608,610,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2287,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2287,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for JavaScript numbers, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_float_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2287,cljs.core.cst$sym$boolean,2287,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true for JavaScript numbers, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",554,14,554,24,"Protocol for cloning a value.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a clone of value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,"cljs/core.cljs",24,1,554,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a clone of value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)], null)])], null),null,554,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null], null), null),"Protocol for cloning a value.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",10277,14,10277,28,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,"cljs/core.cljs",28,1,10277,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)], null)])], null),null,10277,cljs.core.cst$sym$any,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2783,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2783,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_booleans,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2783,2783,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",9161,10,9161,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayList,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9161,9161,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1504,cljs.core.cst$kw$column,40,cljs.core.cst$kw$end_DASH_line,1504,cljs.core.cst$kw$end_DASH_column,44,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RSeq,"cljs/core.cljs",14,true,10,1662,false,true,1662,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6814,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6814,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_mask,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),null,cljs.core.list(null,null),1,6814,6814,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3616,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3616,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_int_DASH_array,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3616,3616,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10514,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10514,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$default_DASH_dispatch_DASH_val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_find_DASH_and_DASH_cache_DASH_best_DASH_method,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$default_DASH_dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10514,10514,8,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$default_DASH_dispatch_DASH_val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2093,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2093,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ISet"], null),cljs.core.cst$sym$cljs$core_SLASH_set_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2093,cljs.core.cst$sym$boolean,2093,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x satisfies ISet"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1176,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1176,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x implements IIterable protocol."], null),cljs.core.cst$sym$cljs$core_SLASH_iterable_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1176,cljs.core.cst$sym$boolean,1176,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x implements IIterable protocol."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10130,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10130,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null))),cljs.core.cst$kw$doc,"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.",cljs.core.cst$kw$added,"1.7"], null),"1.7",cljs.core.cst$sym$cljs$core_SLASH_cat,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)),null,cljs.core.list(null,null),1,10130,10130,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null))),"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6231,10,6231,28,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6EntriesIterator,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6231,6231,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_divide,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2587,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,2587,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$declared,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2587,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,2587,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$declared,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10967,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10967,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_reserved_DASH_arr,"cljs/core.cljs",18,1,10964,10967,cljs.core.cst$sym$array,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,752,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,752,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,cljs.core.cst$sym$cljs$core_SLASH__DASH_pr_DASH_writer,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,746,752,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9616,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9616,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_flush,false,"cljs/core.cljs",12,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,9616,9616,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9034,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9034,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_from_DASH_indexed_DASH_seq,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)),null,cljs.core.list(null,null),1,9034,9034,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9203,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9203,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_take_DASH_while,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9203,9203,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3919,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3919,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_vary_DASH_meta,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null,null,null,null,null),1,3919,3919,(6),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",600,14,600,19,"Protocol for accessing the next items of a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_INext,"cljs/core.cljs",19,1,600,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,600,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null], null), null),"Protocol for accessing the next items of a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,279,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,279,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_is_proto_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,279,279,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_START,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3978,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,3978,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3978,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,3978,cljs.core.cst$kw$end_DASH_column,11], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$object], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",559,14,559,22,"Protocol for adding the ability to count a collection in constant time.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ICounted,"cljs/core.cljs",22,1,559,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,559,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 31, [null,null,cljs.core.cst$sym$cljs$core$async$impl$buffers_SLASH_FixedBuffer,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core$async$impl$buffers_SLASH_PromiseBuffer,null,cljs.core.cst$sym$cljs$core$async$impl$buffers_SLASH_SlidingBuffer,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkBuffer,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core$async$impl$buffers_SLASH_DroppingBuffer,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding the ability to count a collection in constant time.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",633,14,633,23,"Protocol for examining a map entry.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,"cljs/core.cljs",23,1,633,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,633,cljs.core.cst$sym$any,cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core.cst$sym$cljs$core_SLASH_BlackNode,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,cljs.core.with_meta(cljs.core.cst$sym$x20240,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$extend,cljs.core.cst$kw$instance], null)),cljs.core.cst$sym$cljs$core_SLASH_RedNode]),"Protocol for examining a map entry.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5185,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5185,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_reduce,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,5185,5185,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2608,16,2608,18,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__LT__EQ_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2608,cljs.core.cst$sym$boolean,2608,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_MODULE_INFOS,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,40,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,40,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,40,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,40,cljs.core.cst$kw$end_DASH_column,18], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_nil], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3775,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3775,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_conj_BANG_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null,null,null),1,3775,3775,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",651,9,651,13,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IStack,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$sym$cljs$core_SLASH__DASH_pop,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,645,cljs.core.cst$sym$clj,651,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6286,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6286,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_identical_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6286,6286,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4799,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4799,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_repeatedly,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,4799,4799,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9135,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9135,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Returns a map with the keys mapped to the corresponding vals."], null),cljs.core.cst$sym$cljs$core_SLASH_zipmap,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null)),null,cljs.core.list(null,null),1,9135,9135,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null))),"Returns a map with the keys mapped to the corresponding vals."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4425,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4425,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),cljs.core.cst$kw$doc,"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.",cljs.core.cst$kw$added,"1.9"], null),"1.9",cljs.core.cst$sym$cljs$core_SLASH_reset_DASH_vals_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null)),null,cljs.core.list(null,null),1,4425,4425,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",645,14,645,20,"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IStack,"cljs/core.cljs",20,1,645,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,645,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,767,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,767,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$sym$cljs$core_SLASH__DASH_remove_DASH_watch,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,760,767,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null))),"Removes watcher that corresponds to key from this."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",848,14,848,23,"Protocol for adding volatile functionality.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IVolatile,"cljs/core.cljs",23,1,848,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null),null,848,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Volatile,null], null), null),"Protocol for adding volatile functionality.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4902,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4902,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_remove,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4902,4902,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6905,10,6905,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_BitmapIndexedNode,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6905,6905,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2580,15,2580,16,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the product of nums. (*) returns 1.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__STAR_,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2580,cljs.core.cst$sym$number,2580,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9572,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9572,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns an instance of RegExp which has compiled the provided string."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_pattern,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9572,9572,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Returns an instance of RegExp which has compiled the provided string."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2655,15,2655,18,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the least of the nums.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_min,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2655,cljs.core.cst$sym$number,2655,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the least of the nums."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6258,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6258,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_nil_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,6258,6258,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",779,9,779,21,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,"Creates a persistent data structure from tcoll and returns it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_persistent_BANG_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,775,cljs.core.cst$sym$clj,779,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Creates a persistent data structure from tcoll and returns it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",583,4,583,8,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_IIndexed,cljs.core.cst$sym$cljs$core_SLASH__DASH_nth,false,"cljs/core.cljs",8,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,581,583,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3810,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3810,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll"], null),cljs.core.cst$sym$cljs$core_SLASH_pop_BANG_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,3810,3810,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3576,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3576,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_append,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3576,3576,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_unchecked_DASH_arrays_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,30,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,30,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,30,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,30,cljs.core.cst$kw$end_DASH_column,24], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9791,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9791,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr-str followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_prn_DASH_str,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9791,9791,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Same as pr-str followed by (newline)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",717,14,717,25,"Protocol for reversing a seq.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IReversible,"cljs/core.cljs",25,1,717,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,717,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null], null), null),"Protocol for reversing a seq.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3145,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3145,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies? IReversible."], null),cljs.core.cst$sym$cljs$core_SLASH_reversible_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3145,cljs.core.cst$sym$boolean,3145,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns true if coll satisfies? IReversible."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",757,13,757,23,cljs.core.cst$sym$boolean,cljs.core.cst$sym$cljs$core_SLASH_IPending,"Returns true if a value for x has been produced, false otherwise.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IPending,cljs.core.cst$sym$cljs$core_SLASH__DASH_realized_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,754,cljs.core.cst$sym$boolean,757,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if a value for x has been produced, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,764,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,764,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$sym$cljs$core_SLASH__DASH_add_DASH_watch,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,760,764,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,666,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,666,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,cljs.core.cst$sym$cljs$core_SLASH__DASH_deref_DASH_with_DASH_timeout,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)),null,cljs.core.list(null,null),1,665,666,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1762,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1762,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_conj,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null,null,null),1,1762,1762,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",725,9,725,20,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISorted,"Returns a sorted seq from coll in either ascending or descending order.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_sorted_DASH_seq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)),null,cljs.core.list(null,null),1,722,cljs.core.cst$sym$clj,725,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null))),"Returns a sorted seq from coll in either ascending or descending order."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4849,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4849,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Take a collection of collections, and return a lazy seq\n  of items from the inner collection"], null),true,cljs.core.cst$sym$cljs$core_SLASH_flatten1,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null)),null,cljs.core.list(null,null),1,4849,4849,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null))),"Take a collection of collections, and return a lazy seq\n  of items from the inner collection"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2547,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2547,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_transduce,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2547,2547,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_fixture1,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10090,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,10090,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10090,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,10090,cljs.core.cst$kw$end_DASH_column,14], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$number], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",845,4,845,10,cljs.core.cst$sym$cljs$core_SLASH_ISwap,"Swaps the value of o to be (apply f current-value-of-atom args).",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_ISwap,cljs.core.cst$sym$cljs$core_SLASH__DASH_swap_BANG_,false,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),null,cljs.core.list(null,null,null,null),1,843,845,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),"Swaps the value of o to be (apply f current-value-of-atom args)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,141,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,141,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_length_STAR_,"cljs/core.cljs",17,1,true,131,141,cljs.core.cst$sym$clj_DASH_nil,"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2156,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2156,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Delete a property from a JavaScript object."], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_delete,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,2156,2156,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null))),"Delete a property from a JavaScript object."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,204,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,204,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null),cljs.core.cst$sym$cljs$core_SLASH_truth_,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,204,204,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Internal - do not use!"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6302,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,6302,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6302,6302,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",10556,10,10556,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MultiFn,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10556,10556,8,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10246,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10246,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_key_DASH__GT_js,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,10246,10246,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",10239,14,10239,23,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,"cljs/core.cljs",23,1,10239,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null),null,10239,cljs.core.cst$sym$any,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5089,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5089,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_new_DASH_path,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5089,5089,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4477,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4477,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false."], null),cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_and_DASH_set_BANG_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)),null,cljs.core.list(null,null),1,4477,4477,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1653,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1653,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null))),cljs.core.cst$kw$doc,"Create a seq from a JavaScript array.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_seq,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,1653,1653,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),"Create a seq from a JavaScript array."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2169,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2169,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_copy_DASH_downward,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)),null,cljs.core.list(null,null),1,2169,2169,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7107,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7107,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pack_DASH_array_DASH_node,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,7107,7107,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4811,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4811,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the first item in each coll, then the second etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_interleave,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),null,cljs.core.list(null,null,null,null),1,4811,4811,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a lazy seq of the first item in each coll, then the second etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9867,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9867,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_map,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9867,9867,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2120,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2120,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IMap"], null),cljs.core.cst$sym$cljs$core_SLASH_map_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2120,cljs.core.cst$sym$boolean,2120,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies IMap"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_C1,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,900,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,900,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,900,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,900,cljs.core.cst$kw$end_DASH_column,11], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$number], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1904,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1904,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$doc,"Returns the value mapped to key, not-found or nil if key not present.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_get,false,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,1904,1904,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value mapped to key, not-found or nil if key not present."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2532,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2532,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns its argument."], null),cljs.core.cst$sym$cljs$core_SLASH_identity,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2532,2532,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns its argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4933,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4933,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null))),cljs.core.cst$kw$doc,"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_into,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),null,cljs.core.list(null,null,null,null),1,4933,4933,3,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2773,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2773,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null),cljs.core.cst$sym$cljs$core_SLASH_long,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2773,2773,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to long by stripping decimal places. Identical to `int'."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2674,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2674,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_double,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2674,cljs.core.cst$sym$number,2674,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4517,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4517,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a volatile."], null),cljs.core.cst$sym$cljs$core_SLASH_volatile_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4517,cljs.core.cst$sym$boolean,4517,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a volatile."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ChunkBuffer,"cljs/core.cljs",21,true,10,3450,false,3450,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_HashSetIter,"cljs/core.cljs",21,true,10,8774,false,8774,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,635,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,635,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the key of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$sym$cljs$core_SLASH__DASH_key,false,"cljs/core.cljs",8,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,633,635,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the key of the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1735,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1735,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (first x))"], null),cljs.core.cst$sym$cljs$core_SLASH_nfirst,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1735,1735,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (next (first x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_StringBufferWriter,"cljs/core.cljs",28,true,10,861,false,861,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2044,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2044,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the metadata of obj, returns nil if there is no metadata."], null),cljs.core.cst$sym$cljs$core_SLASH_meta,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,2044,2044,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the metadata of obj, returns nil if there is no metadata."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5706,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5706,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tl], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_editable_DASH_tail,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tl], null)),null,cljs.core.list(null,null),1,5706,5706,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tl], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,689,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,689,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,cljs.core.cst$sym$cljs$core_SLASH__DASH_kv_DASH_reduce,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,686,689,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null))),"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",698,14,698,19,"Protocol for adding hashing functionality to a type.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the hash code of o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IHash,"cljs/core.cljs",19,1,698,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the hash code of o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null),null,698,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 43, [cljs.core.cst$sym$cljs$core_SLASH_Namespace,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$reagent$impl$util_SLASH_PartialFn,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$reagent$ratom_SLASH_RCursor,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$default,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$reagent$ratom_SLASH_Track,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$reagent$ratom_SLASH_Reaction,null,cljs.core.cst$sym$reagent$ratom_SLASH_RAtom,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding hashing functionality to a type.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2832,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2832,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and with complement",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and_DASH_not,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2832,2832,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise and with complement"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1167,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1167,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if v is of type cljs.core.Var"], null),cljs.core.cst$sym$cljs$core_SLASH_var_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,1167,cljs.core.cst$sym$boolean,1167,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),"Returns true if v is of type cljs.core.Var"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,736,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,736,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the comparator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_comparator,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,722,736,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the comparator for coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2689,15,2689,32,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the sum of nums. (+) returns 0.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add_DASH_int,true,"cljs/core.cljs",32,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2689,cljs.core.cst$sym$number,2689,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1314,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,1314,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms."], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_ordered_DASH_coll,false,"cljs/core.cljs",32,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1314,cljs.core.cst$sym$number,1314,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2991,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2991,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null))),cljs.core.cst$kw$doc,"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached."], null),true,cljs.core.cst$sym$cljs$core_SLASH_extend_DASH_object_BANG_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null)),null,cljs.core.list(null,null),1,2991,2991,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null))),"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5142,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5142,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_do_DASH_assoc,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,5142,5142,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10038,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10038,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null))),cljs.core.cst$kw$doc,"Atomically resets the metadata for an atom"], null),cljs.core.cst$sym$cljs$core_SLASH_reset_DASH_meta_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null)),null,cljs.core.list(null,null),1,10038,10038,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null))),"Atomically resets the metadata for an atom"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8580,10,8580,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_KeySeq,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8580,8580,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",693,14,693,20,"Protocol for adding value comparison functionality to a type.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,"cljs/core.cljs",20,1,693,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)], null)])], null),null,693,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 46, [cljs.core.cst$sym$cljs$core_SLASH_Namespace,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$js_SLASH_Date,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$reagent$impl$util_SLASH_PartialFn,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$reagent$ratom_SLASH_RCursor,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$number,null,cljs.core.cst$sym$reagent$ratom_SLASH_Wrapper,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$default,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$reagent$ratom_SLASH_Track,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_NeverEquiv,null,cljs.core.cst$sym$reagent$ratom_SLASH_Reaction,null,cljs.core.cst$sym$reagent$ratom_SLASH_RAtom,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding value comparison functionality to a type.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7973,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7973,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_kv_DASH_reduce,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,7973,7973,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4778,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4778,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!) sequence of repetitions of the items in coll."], null),cljs.core.cst$sym$cljs$core_SLASH_cycle,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4778,4778,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a lazy (infinite!) sequence of repetitions of the items in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,662,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,662,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDeref,cljs.core.cst$kw$doc,"Returns the value of the reference o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IDeref,cljs.core.cst$sym$cljs$core_SLASH__DASH_deref,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,660,662,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the value of the reference o."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10829,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10829,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_writer_DASH_ex_DASH_info,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,10829,10829,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2080,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2080,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))"], null),cljs.core.cst$sym$cljs$core_SLASH_empty_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2080,cljs.core.cst$sym$boolean,2080,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,"cljs/core.cljs",23,true,10,10922,false,10922,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2672,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2672,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_short,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2672,cljs.core.cst$sym$number,2672,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10240,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10240,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$sym$cljs$core_SLASH__DASH_clj_DASH__GT_js,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10239,10240,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Recursively transforms clj values to JavaScript"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,818,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,818,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Returns the first chunk in coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_chunked_DASH_first,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,816,818,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the first chunk in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4965,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4965,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects."], null),cljs.core.cst$sym$cljs$core_SLASH_filterv,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4965,4965,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",10922,10,10922,23,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TaggedLiteral,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10922,10922,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5703,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5703,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_editable_DASH_root,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5703,5703,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,976,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,976,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the hash code of its argument. Note this is the hash code\n   consistent with =."], null),cljs.core.cst$sym$cljs$core_SLASH_hash,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,976,976,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the hash code of its argument. Note this is the hash code\n   consistent with =."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2802,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2802,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"quot[ient] of dividing numerator by denominator."], null),cljs.core.cst$sym$cljs$core_SLASH_quot,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2802,2802,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"quot[ient] of dividing numerator by denominator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11119,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11119,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null))),cljs.core.cst$kw$doc,"Returns a map of the intern mappings for the namespace.\n  Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_interns_STAR_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)),null,cljs.core.list(null,null),1,11119,11119,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null))),"Returns a map of the intern mappings for the namespace.\n  Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2680,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2680,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_double,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2680,cljs.core.cst$sym$number,2680,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,48,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,48,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \"nodejs\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.",cljs.core.cst$kw$declared,true], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_target_STAR_,"cljs/core.cljs",11,1,true,42,true,48,"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \"nodejs\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3499,10,3499,21,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ChunkedCons,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3499,3499,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5178,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5178,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ranged_DASH_iterator,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,5178,5178,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",793,14,793,30,"Protocol for adding vector functionality to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,"cljs/core.cljs",30,1,793,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null),null,793,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null], null), null),"Protocol for adding vector functionality to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8651,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8651,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),cljs.core.cst$kw$doc,"Returns the key of the map entry."], null),cljs.core.cst$sym$cljs$core_SLASH_key,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null)),null,cljs.core.list(null,null),1,8651,8651,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),"Returns the key of the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2790,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2790,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_longs,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2790,2790,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",3935,16,3935,20,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Same as (not (= obj1 obj2))",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_not_EQ_,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,3935,cljs.core.cst$sym$boolean,3935,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Same as (not (= obj1 obj2))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,81,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,81,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-err-fn* to f."], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_print_DASH_err_DASH_fn_BANG_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,81,81,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Set *print-err-fn* to f."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,254,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,254,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript string."], null),cljs.core.cst$sym$cljs$core_SLASH_string_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,254,cljs.core.cst$sym$boolean,254,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript string."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11179,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11179,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true X is a goog.Uri instance.",cljs.core.cst$kw$added,"1.9"], null),"1.9",cljs.core.cst$sym$cljs$core_SLASH_uri_QMARK_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,11179,11179,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true X is a goog.Uri instance."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1275,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1275,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"EXPERIMENTAL: Return a ES2015 compatible iterator for coll."], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_iterator,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1275,1275,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"EXPERIMENTAL: Return a ES2015 compatible iterator for coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Delay,"cljs/core.cljs",15,true,10,10095,false,10095,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11009,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11009,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_munge_DASH_str,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,11009,11009,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9755,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9755,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects to a string, observing all the\n  options given in opts"], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str_DASH_with_DASH_opts,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9755,9755,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),"Prints a sequence of objects to a string, observing all the\n  options given in opts"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6218,10,6218,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RecordIter,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6218,6218,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null))),null]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_C2,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,901,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,901,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,901,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,901,cljs.core.cst$kw$end_DASH_column,11], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$number], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1049,10,1049,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Symbol,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1049,1049,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,97,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,97,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_newline_STAR_,"cljs/core.cljs",18,1,true,92,97,cljs.core.cst$sym$boolean,"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2726,15,2726,37,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the product of nums. (*) returns 1.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply_DASH_int,true,"cljs/core.cljs",37,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2726,cljs.core.cst$sym$number,2726,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3585,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3585,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_rest,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3585,3585,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10741,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10741,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Removes all of the methods of multimethod."], null),cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_all_DASH_methods,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,10741,10741,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Removes all of the methods of multimethod."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10325,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10325,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_trampoline,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,10325,10325,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2292,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2292,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for JavaScript numbers, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_double_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2292,cljs.core.cst$sym$boolean,2292,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true for JavaScript numbers, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,167,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,167,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_opts,false,"cljs/core.cljs",15,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,167,167,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_1,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,188,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,190,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent value printed",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,190,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,190,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent value printed"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5427,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5427,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified."], null),cljs.core.cst$sym$cljs$core_SLASH_vec,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,5427,5427,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,113,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,113,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_meta_STAR_,"cljs/core.cljs",15,1,true,107,113,cljs.core.cst$sym$boolean,"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,762,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,762,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$sym$cljs$core_SLASH__DASH_notify_DASH_watches,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)),null,cljs.core.list(null,null),1,760,762,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),"Calls all watchers with this, oldval and newval."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[8,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MultiFn,"cljs/core.cljs",17,true,10,10556,false,10556,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_NONE,"cljs/core.cljs",4022,1,4022,20,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4022,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4022,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2763,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2763,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null),cljs.core.cst$sym$cljs$core_SLASH_int,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2763,2763,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to int by stripping decimal places."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8656,10,8656,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ValSeq,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8656,8656,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10341,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10341,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_rand,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,10341,10341,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1725,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1725,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null),cljs.core.cst$sym$cljs$core_SLASH_second,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1725,1725,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (first (next x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11096,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11096,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_find_DASH_ns_DASH_obj,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null)),null,cljs.core.list(null,null),1,11096,11096,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",770,14,770,33,"Protocol for collections which can transformed to transients.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,"cljs/core.cljs",33,1,770,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,770,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null], null), null),"Protocol for collections which can transformed to transients.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1012,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1012,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_combine,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)),null,cljs.core.list(null,null),1,1012,1012,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2620,16,2620,17,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__GT_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2620,cljs.core.cst$sym$boolean,2620,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",830,12,830,17,cljs.core.cst$sym$string,cljs.core.cst$sym$cljs$core_SLASH_INamed,"Returns the name String of x.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$sym$cljs$core_SLASH__DASH_name,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,828,cljs.core.cst$sym$string,830,1,cljs.core.cst$sym$string,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the name String of x."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9075,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9075,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_replace,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9075,9075,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2234,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2234,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long."], null),cljs.core.cst$sym$cljs$core_SLASH_int_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2234,cljs.core.cst$sym$boolean,2234,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5539,10,5539,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Subvec,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5539,5539,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2100,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2100,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements Associative"], null),cljs.core.cst$sym$cljs$core_SLASH_associative_QMARK_,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2100,cljs.core.cst$sym$boolean,2100,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements Associative"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2768,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2768,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_int,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2768,2768,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to int by stripping decimal places."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2151,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2151,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null))),cljs.core.cst$kw$doc,"Return the JavaScript keys for an object."], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_keys,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null)),null,cljs.core.list(null,null),1,2151,2151,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null))),"Return the JavaScript keys for an object."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1367,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,1367,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_Inst,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_Inst,cljs.core.cst$sym$cljs$core_SLASH_inst_DASH_ms_STAR_,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)),null,cljs.core.list(null,null),1,1366,1367,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6EntriesIterator,"cljs/core.cljs",28,true,10,6231,false,6231,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3288,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3288,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Keyword"], null),cljs.core.cst$sym$cljs$core_SLASH_keyword_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3288,cljs.core.cst$sym$boolean,3288,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a Keyword"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3974,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3974,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_iter,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3974,3974,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10111,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10111,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is a Delay, returns the (possibly cached) value of its expression, else returns x"], null),cljs.core.cst$sym$cljs$core_SLASH_force,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10111,10111,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"If x is a Delay, returns the (possibly cached) value of its expression, else returns x"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10358,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10358,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll."], null),cljs.core.cst$sym$cljs$core_SLASH_group_DASH_by,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,10358,10358,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",719,9,719,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IReversible,"Returns a seq of the items in coll in reversed order.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IReversible,cljs.core.cst$sym$cljs$core_SLASH__DASH_rseq,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,717,cljs.core.cst$sym$clj,719,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq of the items in coll in reversed order."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9828,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9828,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr followed by (newline).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_prn,true,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9828,9828,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Same as pr followed by (newline)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5723,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5723,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_pop_DASH_tail,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5723,5723,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10770,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10770,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's default-dispatch-val."], null),cljs.core.cst$sym$cljs$core_SLASH_default_DASH_dispatch_DASH_val,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,10770,10770,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, return it's default-dispatch-val."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4361,10,4361,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Atom,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4361,4361,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1946,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,1946,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,"cljs/core.cljs",27,true,10,7527,false,true,7527,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2719,15,2719,33,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the product of nums. (*) returns 1.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply,true,"cljs/core.cljs",33,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2719,cljs.core.cst$sym$number,2719,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,"cljs/core.cljs",22,true,10,7448,false,7448,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4192,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4192,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is even, throws an exception if n is not an integer"], null),cljs.core.cst$sym$cljs$core_SLASH_even_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,4192,cljs.core.cst$sym$boolean,4192,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns true if n is even, throws an exception if n is not an integer"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1292,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1292,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),cljs.core.cst$kw$doc,"EXPERIMENTAL: Given an ES2015 compatible iterator return a seq."], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_iterator_DASH_seq,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)),null,cljs.core.list(null,null),1,1292,1292,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),"EXPERIMENTAL: Given an ES2015 compatible iterator return a seq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2696,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2696,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2696,2696,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one less than x, an int."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",1366,14,1366,18,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_Inst,"cljs/core.cljs",18,1,1366,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)], null)])], null),null,1366,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$js_SLASH_Date,null], null), null),null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7241,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7241,cljs.core.cst$kw$end_DASH_column,38,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_collision_DASH_node_DASH_find_DASH_index,false,"cljs/core.cljs",38,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,7241,7241,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6490,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,6490,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_persistent_DASH_array_DASH_map_DASH_seq,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,6490,6490,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RangeIterator,"cljs/core.cljs",23,true,10,9258,false,9258,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10952,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,10952,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if the value is the data representation of a tagged literal"], null),cljs.core.cst$sym$cljs$core_SLASH_tagged_DASH_literal_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,10952,cljs.core.cst$sym$boolean,10952,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Return true if the value is the data representation of a tagged literal"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3660,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3660,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_double_DASH_array,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3660,3660,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11132,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11132,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Create a new namespace named by the symbol. Bootstrap only.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_create_DASH_ns,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),null,cljs.core.list(null,null),1,11132,11132,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),"Create a new namespace named by the symbol. Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3077,10,3077,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_EmptyList,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3077,3077,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2425,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2425,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_seq_DASH_reduce,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2425,2425,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3716,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3716,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_spread,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)),null,cljs.core.list(null,null),1,3716,3716,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7888,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7888,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_left,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)),null,cljs.core.list(null,null),1,7888,7888,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3150,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,3150,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null))),cljs.core.cst$kw$doc,"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"], null),cljs.core.cst$sym$cljs$core_SLASH_rseq,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null)),null,cljs.core.list(null,null),1,3150,cljs.core.cst$sym$seq,3150,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null))),"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10890,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10890,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_cause,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),null,cljs.core.list(null,null),1,10890,10890,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",838,14,838,20,"Protocol for adding resetting functionality.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of o to new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IReset,"cljs/core.cljs",20,1,838,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of o to new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null),null,838,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$reagent$ratom_SLASH_RCursor,null,cljs.core.cst$sym$reagent$ratom_SLASH_Wrapper,null,cljs.core.cst$sym$reagent$ratom_SLASH_Reaction,null,cljs.core.cst$sym$reagent$ratom_SLASH_RAtom,null], null), null),"Protocol for adding resetting functionality.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",564,14,564,34,"Protocol for creating an empty collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,"cljs/core.cljs",34,1,564,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,564,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 28, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for creating an empty collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6316,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6316,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map_DASH_index_DASH_of,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6316,6316,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10883,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10883,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_message,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),null,cljs.core.list(null,null),1,10883,10883,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6867,11,6867,23,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_NodeIterator,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),2,cljs.core.cst$kw$positional,6867,6867,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,160,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,160,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-fns-bodies* controls whether functions print their source or\n    only their names."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_fn_DASH_bodies_STAR_,"cljs/core.cljs",20,1,true,156,160,cljs.core.cst$sym$boolean,"*print-fns-bodies* controls whether functions print their source or\n    only their names."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9610,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9610,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_string_DASH_print,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9610,9610,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2673,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2673,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_float,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2673,cljs.core.cst$sym$number,2673,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_fixture2,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10091,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,10091,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10091,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,10091,cljs.core.cst$kw$end_DASH_column,14], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$number], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",714,14,714,21,"Marker interface indicating a record object",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IRecord,"cljs/core.cljs",21,1,714,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,714,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null], null), null),"Marker interface indicating a record object",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9786,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9786,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9786,9786,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5118,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5118,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_first_DASH_array_DASH_for_DASH_longvec,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)),null,cljs.core.list(null,null),1,5118,5118,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6253,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,6253,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_set_DASH_entries_DASH_iterator,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,6253,6253,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3725,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3725,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null))),cljs.core.cst$kw$doc,"Returns a lazy seq representing the concatenation of the elements in the supplied colls.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_concat,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,3725,3725,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),"Returns a lazy seq representing the concatenation of the elements in the supplied colls."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10548,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10548,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_methods,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,10542,10548,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_js_DASH_reserved,"cljs/core.cljs",10982,1,10984,14,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|Object}"], null),new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10984,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10984,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|Object}"], null)], null),cljs.core.cst$sym$clj_DASH_nil]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",665,14,665,31,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,"cljs/core.cljs",31,1,665,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)], null)])], null),null,665,cljs.core.cst$sym$any,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1083,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1083,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Symbol with the given namespace and name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_symbol,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,1083,1083,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),"Returns a Symbol with the given namespace and name."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3605,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3605,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll."], null),cljs.core.cst$sym$cljs$core_SLASH_to_DASH_array_DASH_2d,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3605,3605,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Subvec,"cljs/core.cljs",16,true,10,5539,false,5539,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$jsdoc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10841,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10841,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@constructor"], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ExceptionInfo,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),null,cljs.core.list(null,null),1,10840,10841,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null))),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@constructor"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2797,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2797,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"Modulus of num and div. Truncates toward negative infinity."], null),cljs.core.cst$sym$cljs$core_SLASH_mod,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2797,2797,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"Modulus of num and div. Truncates toward negative infinity."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",640,14,640,18,"Protocol for adding set functionality to a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISet,"cljs/core.cljs",18,1,640,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)], null)])], null),null,640,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null], null), null),"Protocol for adding set functionality to a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2058,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2058,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast."], null),cljs.core.cst$sym$cljs$core_SLASH_pop,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2058,2058,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",754,14,754,22,"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IPending,"cljs/core.cljs",22,1,754,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null),null,754,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Delay,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null], null), null),"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,734,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,734,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the key for entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_entry_DASH_key,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)),null,cljs.core.list(null,null),1,722,734,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null))),"Returns the key for entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_CHAR_MAP,"cljs/core.cljs",324,1,325,11,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null),new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,325,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,325,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5152,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5152,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pop_DASH_tail,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5152,5152,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3800,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3800,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"Returns a transient map that doesn't contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dissoc_BANG_,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,3800,3800,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"Returns a transient map that doesn't contain a mapping for key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9451,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9451,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_reductions,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9451,9451,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1510,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1510,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements nth in constant time"], null),cljs.core.cst$sym$cljs$core_SLASH_indexed_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1510,cljs.core.cst$sym$boolean,1510,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements nth in constant time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2573,15,2573,16,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__DASH_,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2573,cljs.core.cst$sym$number,2573,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",695,13,695,19,cljs.core.cst$sym$boolean,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,"Returns true if o and other are equal, false otherwise.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IEquiv,cljs.core.cst$sym$cljs$core_SLASH__DASH_equiv,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)),null,cljs.core.list(null,null),1,693,cljs.core.cst$sym$boolean,695,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null))),"Returns true if o and other are equal, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",9258,10,9258,23,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RangeIterator,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9258,9258,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7140,10,7140,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayNode,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7140,7140,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3788,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3788,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_assoc_BANG_,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,3788,3788,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9057,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9057,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_set,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,9057,9057,(0),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2520,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2520,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals."], null),cljs.core.cst$sym$cljs$core_SLASH_reduce_DASH_kv,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2520,2520,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$type,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core11420,"cljs/core.cljs",true,true,3,3947,false,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4409,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4409,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),cljs.core.cst$kw$doc,"Sets the value of atom to newval without regard for the\n  current value. Returns new-value."], null),cljs.core.cst$sym$cljs$core_SLASH_reset_BANG_,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null)),null,cljs.core.list(null,null),1,4409,4409,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),"Sets the value of atom to newval without regard for the\n  current value. Returns new-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9126,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9126,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns the name String of a string, symbol or keyword."], null),cljs.core.cst$sym$cljs$core_SLASH_name,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9126,9126,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the name String of a string, symbol or keyword."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8108,10,8108,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RedNode,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8108,8108,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5126,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5126,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_array_DASH_for,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,5126,5126,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",523,14,523,16,"Marker protocol",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_Fn,"cljs/core.cljs",16,1,523,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,523,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$reagent$impl$util_SLASH_PartialFn,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$function,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null], null), null),"Marker protocol",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1730,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1730,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (first x))"], null),cljs.core.cst$sym$cljs$core_SLASH_ffirst,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1730,1730,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (first (first x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7120,10,7120,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayNodeIterator,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7120,7120,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9063,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9063,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_set,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),null,cljs.core.list(null),1,9063,9063,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new sorted set with supplied keys."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9772,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9772,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects using string-print, observing all\n  the options given in opts"], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_with_DASH_opts,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9772,9772,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),"Prints a sequence of objects using string-print, observing all\n  the options given in opts"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,"cljs/core.cljs",27,true,10,8376,false,8376,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9835,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9835,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$named], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_strip_DASH_ns,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$named], null)),null,cljs.core.list(null,null),1,9835,9835,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$named], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8376,10,8376,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentTreeMap,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8376,8376,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1473,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1473,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_reduce,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null,null),1,1473,1473,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1506,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1506,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements count in constant time"], null),cljs.core.cst$sym$cljs$core_SLASH_counted_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1506,cljs.core.cst$sym$boolean,1506,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements count in constant time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10957,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10957,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$tag)], null)], null)))),cljs.core.cst$kw$doc,"Construct a data representation of a tagged literal from a\n  tag symbol and a form."], null),cljs.core.cst$sym$cljs$core_SLASH_tagged_DASH_literal,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)),null,cljs.core.list(null,null),1,10957,10957,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$tag)], null)], null)))),"Construct a data representation of a tagged literal from a\n  tag symbol and a form."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9816,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9816,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as print followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_println,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9816,9816,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Same as print followed by (newline)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5015,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5015,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created."], null),cljs.core.cst$sym$cljs$core_SLASH_assoc_DASH_in,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$p__11882,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,5015,5015,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$v], null))),"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,"cljs/core.cljs",27,true,10,8784,false,8784,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2857,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2857,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Test bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_test,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2857,cljs.core.cst$sym$boolean,2857,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Test bit at index n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",11064,10,11064,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Namespace,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,11064,11064,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6793,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,6793,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,"cljs/core.cljs",26,true,10,7702,false,true,7702,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7527,10,7527,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentHashMap,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7527,7527,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6319,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6319,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_extend_DASH_kv,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,6319,6319,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",843,14,843,19,"Protocol for adding swapping functionality.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args)."], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISwap,"cljs/core.cljs",19,1,843,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args)."], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)], null)])], null),null,843,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$reagent$ratom_SLASH_RCursor,null,cljs.core.cst$sym$reagent$ratom_SLASH_Wrapper,null,cljs.core.cst$sym$reagent$ratom_SLASH_Reaction,null,cljs.core.cst$sym$reagent$ratom_SLASH_RAtom,null], null), null),"Protocol for adding swapping functionality.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2136,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,2136,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,"cljs/core.cljs",21,true,10,3499,false,true,3499,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10310,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10310,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use."], null),cljs.core.cst$sym$cljs$core_SLASH_memoize,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,10310,10310,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10029,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10029,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_alter_DASH_meta_BANG_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,10029,10029,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",861,10,861,28,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_StringBufferWriter,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,861,861,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2902,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2902,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is zero, else false"], null),cljs.core.cst$sym$cljs$core_SLASH_zero_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2902,cljs.core.cst$sym$boolean,2902,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if num is zero, else false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5698,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5698,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_ensure_DASH_editable,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5698,5698,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3338,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3338,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword without a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_keyword_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3338,cljs.core.cst$sym$boolean,3338,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a keyword without a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1514,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1514,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH__DASH_indexOf,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),null,cljs.core.list(null,null),1,1514,1514,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH__STAR_main_DASH_cli_DASH_fn_STAR_,"cljs/core.cljs",283,1,287,16,"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments",new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,287,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,287,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$doc,"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments"], null),cljs.core.cst$sym$clj_DASH_nil]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",657,9,657,17,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IVector,"Returns a new vector with value val added at position n.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IVector,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc_DASH_n,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,655,cljs.core.cst$sym$clj,657,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null))),"Returns a new vector with value val added at position n."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2701,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2701,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec_DASH_int,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2701,2701,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one less than x, an int."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2970,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2970,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_imap,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)),null,cljs.core.list(null,null),1,2970,2970,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10510,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10510,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$hierarchy], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_dominates,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$hierarchy], null)),null,cljs.core.list(null,null),1,10510,10510,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$hierarchy], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3768,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3768,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception."], null),cljs.core.cst$sym$cljs$core_SLASH_persistent_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,3768,3768,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,77,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,77,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-fn* to f."], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_print_DASH_fn_BANG_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,77,77,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Set *print-fn* to f."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1745,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1745,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (next x))"], null),cljs.core.cst$sym$cljs$core_SLASH_nnext,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1745,1745,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (next (next x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH_Box,"cljs/core.cljs",13,true,10,6804,false,6804,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7913,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7913,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_right,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)),null,cljs.core.list(null,null),1,7913,7913,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10553,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10553,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_throw_DASH_no_DASH_method_DASH_error,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10553,10553,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11031,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11031,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_demunge_DASH_str,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)),null,cljs.core.list(null,null),1,11031,11031,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10043,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10043,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1"], null),cljs.core.cst$sym$cljs$core_SLASH_add_DASH_watch,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,10043,10043,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4173,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4173,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for every x in\n  coll, else true."], null),cljs.core.cst$sym$cljs$core_SLASH_not_DASH_every_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4173,cljs.core.cst$sym$boolean,4173,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns false if (pred x) is logical true for every x in\n  coll, else true."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2808,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2808,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"remainder of dividing numerator by denominator."], null),cljs.core.cst$sym$cljs$core_SLASH_rem,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2808,2808,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"remainder of dividing numerator by denominator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2104,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2104,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements IFind"], null),cljs.core.cst$sym$cljs$core_SLASH_ifind_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2104,cljs.core.cst$sym$boolean,2104,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements IFind"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9748,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9748,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_sb_DASH_with_DASH_opts,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9748,9748,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7515,10,7515,21,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_HashMapIter,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7515,7515,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_BitmapIndexedNode,"cljs/core.cljs",27,true,10,6905,false,6905,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7370,10,7370,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_NodeSeq,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7370,7370,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4178,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4178,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)"], null),cljs.core.cst$sym$cljs$core_SLASH_some,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4178,4178,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",828,14,828,20,"Protocol for adding a name.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the name String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the namespace String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_INamed,"cljs/core.cljs",20,1,828,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the name String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the namespace String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null),null,828,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null], null), null),"Protocol for adding a name.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6804,10,6804,13,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Box,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6804,6804,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",678,14,678,21,"Protocol for seq types that can reduce themselves.\n  Called by cljs.core/reduce.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IReduce,"cljs/core.cljs",21,1,678,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)], null)])], null),null,678,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for seq types that can reduce themselves.\n  Called by cljs.core/reduce.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2258,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2258,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is negative."], null),cljs.core.cst$sym$cljs$core_SLASH_neg_DASH_int_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2258,cljs.core.cst$sym$boolean,2258,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies int? and is negative."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4714,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4714,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_drop,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4714,4714,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_NodeIterator,"cljs/core.cljs",23,true,11,6867,false,6867,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2143,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2143,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_obj,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,2143,2143,(0),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"Create JavaSript object from an even number arguments representing\n  interleaved keys and values."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",775,14,775,34,"Protocol for adding basic functionality to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,"cljs/core.cljs",34,1,775,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null),null,775,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null], null), null),"Protocol for adding basic functionality to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Atom,"cljs/core.cljs",14,true,10,4361,false,4361,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1830,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1830,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$doc,"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_nth,false,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,1830,1830,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2112,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2112,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISorted"], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2112,cljs.core.cst$sym$boolean,2112,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll satisfies ISorted"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,218,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,218,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is nil, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,218,cljs.core.cst$sym$boolean,218,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is nil, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4784,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4784,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take n coll) (drop n coll)]"], null),cljs.core.cst$sym$cljs$core_SLASH_split_DASH_at,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4784,4784,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),"Returns a vector of [(take n coll) (drop n coll)]"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8772,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,8772,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$declared,true], null),1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,"cljs/core.cljs",26,true,10,8902,false,true,8902,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_e,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,200,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,202,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent exception caught by the repl",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,202,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,202,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent exception caught by the repl"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6330,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6330,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map_DASH_extend_DASH_kv,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,6330,6330,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9763,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9763,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Same as pr-str-with-opts followed by (newline)"], null),cljs.core.cst$sym$cljs$core_SLASH_prn_DASH_str_DASH_with_DASH_opts,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9763,9763,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),"Same as pr-str-with-opts followed by (newline)"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_not_DASH_native,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,209,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,209,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,209,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,209,cljs.core.cst$kw$end_DASH_column,16], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_nil], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10185,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10185,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_random_DASH_sample,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,10185,10185,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8756,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8756,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null))),cljs.core.cst$kw$doc,"Returns a map containing only those entries in map whose key is in keys"], null),cljs.core.cst$sym$cljs$core_SLASH_select_DASH_keys,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null)),null,cljs.core.list(null,null),1,8756,8756,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null))),"Returns a map containing only those entries in map whose key is in keys"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2820,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2820,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2820,2820,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise and"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3704,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3704,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq",cljs.core.cst$kw$added,"1.9"], null),"1.9",cljs.core.cst$sym$cljs$core_SLASH_bounded_DASH_count,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3704,3704,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5051,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5051,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_update,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),null,cljs.core.list(null,null,null,null,null),1,5051,5051,(6),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_gensym_counter,"cljs/core.cljs",10074,1,10076,17,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null),new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10076,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10076,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$clj_DASH_nil]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11154,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11154,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_find_DASH_macros_DASH_ns,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null)),null,cljs.core.list(null,null),1,11154,11154,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3750,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3750,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_list_STAR_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),null,cljs.core.list(null,null,null,null,null),1,3750,3750,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6266,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6266,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_keyword_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6266,6266,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3260,10,3260,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Keyword,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3260,3260,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5024,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5024,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_update_DASH_in,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),null,cljs.core.list(null,null,null,null,null),1,5024,5024,(6),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10751,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10751,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),cljs.core.cst$kw$doc,"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict"], null),cljs.core.cst$sym$cljs$core_SLASH_prefer_DASH_method,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)),null,cljs.core.list(null,null),1,10751,10751,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1030,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1030,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_symbol,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)),null,cljs.core.list(null,null),1,1030,1030,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1420,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1420,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is already reduced?, returns it, else returns (reduced x)"], null),cljs.core.cst$sym$cljs$core_SLASH_ensure_DASH_reduced,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1420,1420,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"If x is already reduced?, returns it, else returns (reduced x)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6838,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6838,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_edit_DASH_and_DASH_set,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,6838,6838,6,true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6505,10,6505,28,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentArrayMap,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6505,6505,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1019,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1019,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false"], null),cljs.core.cst$sym$cljs$core_SLASH_instance_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1019,cljs.core.cst$sym$boolean,1019,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null))),"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1302,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,1302,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null))),cljs.core.cst$kw$doc,"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms."], null),cljs.core.cst$sym$cljs$core_SLASH_mix_DASH_collection_DASH_hash,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null)),null,cljs.core.list(null,null),1,1302,cljs.core.cst$sym$number,1302,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null))),"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9549,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9549,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_find,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9549,9549,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10232,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10232,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil"], null),cljs.core.cst$sym$cljs$core_SLASH_run_BANG_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,10232,10232,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null))),"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_char_DASH_escapes,"cljs/core.cljs",9619,1,9619,28,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9619,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9619,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6Iterator,"cljs/core.cljs",21,true,10,1266,false,1266,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8727,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8727,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),cljs.core.cst$kw$doc,"Returns the value in the map entry."], null),cljs.core.cst$sym$cljs$core_SLASH_val,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null)),null,cljs.core.list(null,null),1,8727,8727,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),"Returns the value in the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2682,15,2682,28,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the sum of nums. (+) returns 0.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add,true,"cljs/core.cljs",28,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2682,cljs.core.cst$sym$number,2682,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4122,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4122,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_transformer_DASH_iterator,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)),null,cljs.core.list(null,null),1,4122,4122,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,235,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,235,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is logical false, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_not,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,235,cljs.core.cst$sym$boolean,235,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is logical false, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,850,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,850,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IVolatile,cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IVolatile,cljs.core.cst$sym$cljs$core_SLASH__DASH_vreset_BANG_,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)),null,cljs.core.list(null,null),1,848,850,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null))),"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2384,cljs.core.cst$kw$column,17,cljs.core.cst$kw$end_DASH_line,2384,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator."], null),true,cljs.core.cst$sym$cljs$core_SLASH_fn_DASH__GT_comparator,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,2384,2384,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2035,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2035,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null))),cljs.core.cst$kw$doc,"Returns an object of the same type and value as obj, with\n  map m as its metadata."], null),cljs.core.cst$sym$cljs$core_SLASH_with_DASH_meta,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,2035,2035,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null))),"Returns an object of the same type and value as obj, with\n  map m as its metadata."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1425,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1425,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is reduced?, returns (deref x), else returns x"], null),cljs.core.cst$sym$cljs$core_SLASH_unreduced,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1425,1425,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"If x is reduced?, returns (deref x), else returns x"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2127,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2127,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IRecord"], null),cljs.core.cst$sym$cljs$core_SLASH_record_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2127,cljs.core.cst$sym$boolean,2127,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies IRecord"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,294,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,294,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return x's constructor."], null),cljs.core.cst$sym$cljs$core_SLASH_type,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,294,294,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return x's constructor."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,213,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,213,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Tests if 2 arguments are the same object"], null),cljs.core.cst$sym$cljs$core_SLASH_identical_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,213,cljs.core.cst$sym$boolean,213,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Tests if 2 arguments are the same object"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",832,12,832,22,cljs.core.cst$sym$string,cljs.core.cst$sym$cljs$core_SLASH_INamed,"Returns the namespace String of x.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$sym$cljs$core_SLASH__DASH_namespace,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,828,cljs.core.cst$sym$string,832,1,cljs.core.cst$sym$string,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the namespace String of x."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2706,15,2706,35,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_divide_DASH_int,true,"cljs/core.cljs",35,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2706,cljs.core.cst$sym$number,2706,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11173,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11173,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Returns the name of the namespace, a Namespace object.\n  Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_name,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null)),null,cljs.core.list(null,null),1,11173,11173,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null))),"Returns the name of the namespace, a Namespace object.\n  Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10384,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10384,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_swap_DASH_global_DASH_hierarchy_BANG_,true,"cljs/core.cljs",30,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,10384,10384,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9147,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9147,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is greatest.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_max_DASH_key,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,9147,9147,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the x for which (k x), a number, is greatest."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8939,10,8939,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentTreeSet,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8939,8939,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,59,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,59,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_out_STAR_,"cljs/core.cljs",8,1,true,56,59,cljs.core.cst$sym$clj_DASH_nil,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3450,10,3450,21,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ChunkBuffer,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3450,3450,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,965,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,965,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_string,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,965,965,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ValSeq,"cljs/core.cljs",16,true,10,8656,false,8656,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10549,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10549,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_prefers,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,10542,10549,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4486,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4486,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null))),cljs.core.cst$kw$doc,"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed."], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_validator_BANG_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,4486,4486,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null))),"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3318,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3318,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword"], null),cljs.core.cst$sym$cljs$core_SLASH_ident_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3318,cljs.core.cst$sym$boolean,3318,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol or keyword"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",670,16,670,21,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$sym$cljs$core_SLASH_IMeta,"Returns the metadata of object o.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IMeta,cljs.core.cst$sym$cljs$core_SLASH__DASH_meta,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,668,cljs.core.cst$sym$clj_DASH_or_DASH_nil,670,1,cljs.core.cst$sym$clj_DASH_or_DASH_nil,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the metadata of object o."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7886,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,7886,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RedNode,"cljs/core.cljs",17,true,10,8108,false,true,8108,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10551,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10551,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_dispatch_DASH_fn,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,10542,10551,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1548,10,1548,28,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_IndexedSeqIterator,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1548,1548,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10544,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10544,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_add_DASH_method,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)),null,cljs.core.list(null,null),1,10542,10544,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7935,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7935,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_left_DASH_del,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)),null,cljs.core.list(null,null),1,7935,7935,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4440,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4440,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_swap_BANG_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,4440,4440,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8721,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8721,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),cljs.core.cst$kw$doc,"Returns a sequence of the map's values."], null),cljs.core.cst$sym$cljs$core_SLASH_vals,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null)),null,cljs.core.list(null,null),1,8721,8721,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),"Returns a sequence of the map's values."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,825,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,825,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,cljs.core.cst$sym$cljs$core_SLASH__DASH_chunked_DASH_next,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,823,825,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new collection of coll without the first chunk."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Single,"cljs/core.cljs",16,true,10,4024,false,4024,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2744,15,2744,33,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract,true,"cljs/core.cljs",33,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2744,cljs.core.cst$sym$number,2744,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6826,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6826,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_pair,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,6826,6826,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",627,14,627,18,"Protocol for adding mapping functionality to collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMap,"cljs/core.cljs",18,1,627,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null),null,627,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null], null), null),"Protocol for adding mapping functionality to collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3980,10,3980,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_SeqIter,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3980,3980,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9068,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9068,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_set_DASH_by,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),null,cljs.core.list(null),1,9068,9068,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new sorted set with supplied keys, using the supplied comparator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 25, [cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,"cljs/core.cljs",26,true,10,5207,false,5207,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1186,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1186,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if x implements ICloneable protocol."], null),cljs.core.cst$sym$cljs$core_SLASH_cloneable_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,1186,cljs.core.cst$sym$boolean,1186,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Return true if x implements ICloneable protocol."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3326,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3326,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword with a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_ident_QMARK_,false,"cljs/core.cljs",32,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3326,cljs.core.cst$sym$boolean,3326,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol or keyword with a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,948,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,948,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_string_STAR_,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,948,948,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6808,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,6808,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_key_DASH_test,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)),null,cljs.core.list(null,null),1,6808,cljs.core.cst$sym$boolean,6808,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10543,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10543,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_reset,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,10542,10543,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2185,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2185,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value true, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_true_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2185,cljs.core.cst$sym$boolean,2185,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is the value true, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11088,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11088,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),true,cljs.core.cst$sym$cljs$core_SLASH_find_DASH_ns_DASH_obj_STAR_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null)),null,cljs.core.list(null,null),1,11088,11088,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,424,cljs.core.cst$kw$column,14,cljs.core.cst$kw$end_DASH_line,424,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$array,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null))),cljs.core.cst$kw$doc,"Creates a new javascript array.\n@param {...*} var_args"], null),cljs.core.cst$sym$cljs$core_SLASH_array,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null)),null,cljs.core.list(null,null),1,424,cljs.core.cst$sym$array,424,1,cljs.core.cst$sym$array,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null))),"Creates a new javascript array.\n@param {...*} var_args"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9807,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,9807,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$doc,"Prints the object(s) using string-print.\n  print and println produce output for human consumption."], null),cljs.core.cst$sym$cljs$core_SLASH_print,true,"cljs/core.cljs",8,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs], null)),null,cljs.core.List.EMPTY,1,9804,9807,0,true,null,"Prints the object(s) using string-print.\n  print and println produce output for human consumption."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,649,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,649,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$sym$cljs$core_SLASH__DASH_peek,false,"cljs/core.cljs",9,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,645,649,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the item from the top of the stack. Is used by cljs.core/peek."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",590,14,590,18,"Protocol for collections to provide access to their items as sequences.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISeq,"cljs/core.cljs",18,1,590,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,590,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null], null), null),"Protocol for collections to provide access to their items as sequences.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1777,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1777,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll, or nil"], null),cljs.core.cst$sym$cljs$core_SLASH_empty,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1777,1777,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns an empty collection of the same category as coll, or nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10746,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10746,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Removes the method of multimethod associated with dispatch-value."], null),cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_method,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10746,10746,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),"Removes the method of multimethod associated with dispatch-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,"cljs/core.cljs",28,true,10,5901,false,5901,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7954,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7954,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_right_DASH_del,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)),null,cljs.core.list(null,null),1,7954,7954,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4512,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4512,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),cljs.core.cst$kw$doc,"Creates and returns a Volatile with an initial value of val."], null),cljs.core.cst$sym$cljs$core_SLASH_volatile_BANG_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,4512,4512,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),"Creates and returns a Volatile with an initial value of val."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.cst$kw$file,"cljs/core.cljs"], null),cljs.core.cst$sym$cljs$core_SLASH__SLASH_,true,"cljs/core.cljs",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2589,cljs.core.cst$sym$number,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6835,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6835,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_bitpos,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),null,cljs.core.list(null,null),1,6835,6835,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Many,"cljs/core.cljs",14,true,10,4010,false,4010,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2826,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2826,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_or,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2826,2826,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise or"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,909,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,909,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_fmix,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)),null,cljs.core.list(null,null),1,909,cljs.core.cst$sym$number,909,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5438,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5438,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Creates a new vector containing the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_vector,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,5438,5438,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Creates a new vector containing the args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2960,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2960,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_coll,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2960,2960,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6817,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6817,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_clone_DASH_and_DASH_set,false,"cljs/core.cljs",21,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,6817,6817,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6795,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6795,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$len,cljs.core.cst$sym$arr], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH__GT_transient_DASH_hash_DASH_map,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$len,cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,6795,6795,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$len,cljs.core.cst$sym$arr], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2632,16,2632,18,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__GT__EQ_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2632,cljs.core.cst$sym$boolean,2632,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8902,10,8902,26,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientHashSet,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8902,8902,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4739,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4739,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a lazy sequence of all but the last n (default 1) items in coll",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_drop_DASH_last,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,4739,4739,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),"Return a lazy sequence of all but the last n (default 1) items in coll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3965,10,3965,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayIter,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3965,3965,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,247,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,247,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x's constructor is Object"], null),cljs.core.cst$sym$cljs$core_SLASH_object_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,247,cljs.core.cst$sym$boolean,247,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x's constructor is Object"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7448,10,7448,22,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayNodeSeq,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7448,7448,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9841,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9841,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null))),cljs.core.cst$kw$doc,"Returns [lifted-ns lifted-map] or nil if m can't be lifted."], null),true,cljs.core.cst$sym$cljs$core_SLASH_lift_DASH_ns,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)),null,cljs.core.list(null,null),1,9841,9841,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null))),"Returns [lifted-ns lifted-map] or nil if m can't be lifted."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8288,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8288,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_append,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)),null,cljs.core.list(null,null),1,8288,8288,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3942,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3942,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is empty, returns nil, else coll"], null),cljs.core.cst$sym$cljs$core_SLASH_not_DASH_empty,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3942,3942,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"If coll is empty, returns nil, else coll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9092,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9092,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_distinct,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9092,9092,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4974,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4974,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partition,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null,null),1,4974,4974,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",10542,14,10542,22,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null))],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,"cljs/core.cljs",22,1,10542,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null))],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null)])], null),null,10542,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null], null), null),null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4010,10,4010,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vals], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Many,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vals], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4010,4010,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vals], null))),null]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_DEMUNGE_PATTERN,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,378,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,378,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,378,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,378,cljs.core.cst$kw$end_DASH_column,21], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_nil], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2758,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2758,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_fix,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)),null,cljs.core.list(null,null),1,2758,cljs.core.cst$sym$number,2758,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_EmptyList,"cljs/core.cljs",19,true,10,3077,false,3077,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_HashMapIter,"cljs/core.cljs",21,true,10,7515,false,7515,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",614,14,614,26,"Protocol for adding associativity to collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if k is a key in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,"cljs/core.cljs",26,1,614,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if k is a key in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)], null)])], null),null,614,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding associativity to collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4024,10,4024,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Single,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4024,4024,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2843,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2843,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Flip bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_flip,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2843,2843,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Flip bit at index n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3638,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3638,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_long_DASH_array,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3638,3638,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10423,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10423,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_descendants,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),null,cljs.core.list(null,null),1,10423,10423,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,888,cljs.core.cst$kw$column,17,cljs.core.cst$kw$end_DASH_line,888,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_imul,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),3,888,cljs.core.cst$sym$number,888,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",10095,10,10095,15,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Delay,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10095,10095,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5137,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5137,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_for,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,5137,5137,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8732,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8732,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_merge,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),null,cljs.core.list(null),1,8732,8732,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",703,14,703,22,"Protocol for adding the ability to a type to be transformed into a sequence.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,"cljs/core.cljs",22,1,703,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null),null,703,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 31, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding the ability to a type to be transformed into a sequence.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[0,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Empty,"cljs/core.cljs",15,true,10,4043,false,4043,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2792,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2792,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_mod,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2792,2792,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2226,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2226,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is a JavaScript number with no decimal part."], null),cljs.core.cst$sym$cljs$core_SLASH_integer_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2226,cljs.core.cst$sym$boolean,2226,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns true if n is a JavaScript number with no decimal part."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MetaFn,"cljs/core.cljs",16,true,10,1982,false,1982,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11086,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,11086,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$doc,"Bootstrap only.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH_NS_CACHE,"cljs/core.cljs",11,1,11084,11086,cljs.core.cst$sym$clj_DASH_nil,"Bootstrap only.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4949,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4949,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_mapv,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),null,cljs.core.list(null,null,null,null),1,4949,4949,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2297,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2297,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for Infinity and -Infinity values."], null),cljs.core.cst$sym$cljs$core_SLASH_infinite_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2297,cljs.core.cst$sym$boolean,2297,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true for Infinity and -Infinity values."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9172,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9172,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partition_DASH_all,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null,null),1,9172,9172,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9401,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9401,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partition_DASH_by,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9401,9401,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",708,14,708,25,"Marker interface indicating a persistent collection of sequential items",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISequential,"cljs/core.cljs",25,1,708,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,708,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 23, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Marker interface indicating a persistent collection of sequential items",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3370,10,3370,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_LazySeq,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3370,3370,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6035,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,6035,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Test map equivalence. Returns true if x equals y, otherwise returns false."], null),cljs.core.cst$sym$cljs$core_SLASH_equiv_DASH_map,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,6035,cljs.core.cst$sym$boolean,6035,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Test map equivalence. Returns true if x equals y, otherwise returns false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4504,10,4504,18,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Volatile,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4504,4504,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3682,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3682,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_object_DASH_array,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3682,3682,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,211,cljs.core.cst$kw$column,20,cljs.core.cst$kw$end_DASH_line,211,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Keyword,"cljs/core.cljs",17,true,10,3260,false,true,3260,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10432,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10432,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_derive,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),null,cljs.core.list(null,null),1,10432,10432,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3998,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3998,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_seq_DASH_iter,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3998,3998,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4043,10,4043,15,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Empty,false,"cljs/core.cljs",15,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4043,4043,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",816,14,816,25,"Protocol for accessing a collection as sequential chunks.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first chunk in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,"cljs/core.cljs",25,1,816,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first chunk in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,816,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null], null), null),"Protocol for accessing a collection as sequential chunks.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10904,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,10904,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x names a special form"], null),cljs.core.cst$sym$cljs$core_SLASH_special_DASH_symbol_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10904,cljs.core.cst$sym$boolean,10904,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x names a special form"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3248,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,3248,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_keywords,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,3248,3248,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10415,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10415,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_ancestors,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),null,cljs.core.list(null,null),1,10415,10415,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9228,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9228,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_subseq,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),null,cljs.core.list(null,null),1,9228,9228,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10078,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10078,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null))),cljs.core.cst$kw$doc,"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_gensym,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),null,cljs.core.list(null,null),1,10078,10078,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",602,16,602,21,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$sym$cljs$core_SLASH_INext,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_INext,cljs.core.cst$sym$cljs$core_SLASH__DASH_next,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,600,cljs.core.cst$sym$clj_DASH_or_DASH_nil,602,1,cljs.core.cst$sym$clj_DASH_or_DASH_nil,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7250,10,7250,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_HashCollisionNode,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7250,7250,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10107,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,10107,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"returns true if x is a Delay created with delay"], null),cljs.core.cst$sym$cljs$core_SLASH_delay_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10107,cljs.core.cst$sym$boolean,10107,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"returns true if x is a Delay created with delay"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7431,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7431,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_inode_DASH_seq,false,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,7431,7431,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4925,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4925,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_flatten,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4925,4925,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",630,9,630,16,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IMap,"Returns a new collection of coll without the mapping for key k.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IMap,cljs.core.cst$sym$cljs$core_SLASH__DASH_dissoc,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,627,cljs.core.cst$sym$clj,630,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns a new collection of coll without the mapping for key k."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2789,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2789,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_doubles,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2789,2789,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$added,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",10142,7,10142,16,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null))),"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.","1.9",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),"1.9",cljs.core.cst$sym$cljs$core_SLASH_halt_DASH_when,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),null,cljs.core.list(null,null),1,10142,10142,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",616,13,616,27,cljs.core.cst$sym$boolean,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,"Returns true if k is a key in coll.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$sym$cljs$core_SLASH__DASH_contains_DASH_key_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,614,cljs.core.cst$sym$boolean,616,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns true if k is a key in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10066,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10066,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Removes a watch (set by add-watch) from a reference"], null),cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_watch,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,10066,10066,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null))),"Removes a watch (set by add-watch) from a reference"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10869,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10869,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null))),cljs.core.cst$kw$doc,"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_info,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),null,cljs.core.list(null,null),1,10869,10869,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2221,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2221,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns true if f returns true for fn? or satisfies IFn."], null),cljs.core.cst$sym$cljs$core_SLASH_ifn_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,2221,cljs.core.cst$sym$boolean,2221,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Returns true if f returns true for fn? or satisfies IFn."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",835,14,835,19,"Marker protocol indicating an atom.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IAtom,"cljs/core.cljs",19,1,835,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,835,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$reagent$ratom_SLASH_RCursor,null,cljs.core.cst$sym$reagent$ratom_SLASH_Wrapper,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$reagent$ratom_SLASH_Reaction,null,cljs.core.cst$sym$reagent$ratom_SLASH_RAtom,null], null), null),"Marker protocol indicating an atom.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5956,10,5956,25,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentQueue,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5956,5956,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2272,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2272,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is a natural integer value."], null),cljs.core.cst$sym$cljs$core_SLASH_nat_DASH_int_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2272,cljs.core.cst$sym$boolean,2272,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies int? and is a natural integer value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",760,14,760,24,"Protocol for types that can be watched. Currently only implemented by Atom.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,"cljs/core.cljs",24,1,760,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)], null)])], null),null,760,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$reagent$ratom_SLASH_RCursor,null,cljs.core.cst$sym$reagent$ratom_SLASH_Wrapper,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$reagent$ratom_SLASH_Reaction,null,cljs.core.cst$sym$reagent$ratom_SLASH_RAtom,null], null), null),"Protocol for types that can be watched. Currently only implemented by Atom.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5071,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5071,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_fresh_DASH_node,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)),null,cljs.core.list(null,null),1,5071,5071,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5686,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5686,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$doc,"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_subvec,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,5686,5686,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",797,9,797,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,"Returns tcoll with the last item removed from it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$sym$cljs$core_SLASH__DASH_pop_BANG_,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,793,cljs.core.cst$sym$clj,797,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Returns tcoll with the last item removed from it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4245,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4245,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partial,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),null,cljs.core.list(null,null,null,null,null),1,4245,4245,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2138,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2138,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is satisfies IChunkedSeq."], null),cljs.core.cst$sym$cljs$core_SLASH_chunked_DASH_seq_QMARK_,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2138,cljs.core.cst$sym$boolean,2138,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is satisfies IChunkedSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4794,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4794,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs."], null),cljs.core.cst$sym$cljs$core_SLASH_replicate,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4794,4794,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,"cljs/core.cljs",25,true,10,5956,false,5956,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9154,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9154,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is least.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_min_DASH_key,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,9154,9154,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the x for which (k x), a number, is least."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2980,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2980,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_iset,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,2980,2980,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1410,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1410,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Wraps x in a way such that a reduce will terminate with the value x"], null),cljs.core.cst$sym$cljs$core_SLASH_reduced,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1410,1410,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Wraps x in a way such that a reduce will terminate with the value x"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9537,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9537,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the result of (re-find re s) if re fully matches s."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_matches,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9537,9537,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),"Returns the result of (re-find re s) if re fully matches s."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9643,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9643,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_writer_DASH_impl,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9643,9643,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8539,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8539,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new array map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8539,8539,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new array map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",800,14,800,27,"Protocol for adding set functionality to a transient collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll without v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,"cljs/core.cljs",27,1,800,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll without v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)], null)])], null),null,800,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null], null), null),"Protocol for adding set functionality to a transient collection.",cljs.core.list("@interface")]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ITER_SYMBOL,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,322,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,322,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,322,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,322,cljs.core.cst$kw$end_DASH_column,19], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$string], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2676,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2676,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_byte,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2676,cljs.core.cst$sym$number,2676,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,455,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,455,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_checked_DASH_aset,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,455,455,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6865,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,6865,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayNode,"cljs/core.cljs",19,true,10,7140,false,true,7140,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5447,10,5447,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ChunkedSeq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5447,5447,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4562,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4562,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_every_DASH_pred,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),null,cljs.core.list(null,null,null,null),1,4562,4562,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8645,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8645,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),cljs.core.cst$kw$doc,"Returns a sequence of the map's keys."], null),cljs.core.cst$sym$cljs$core_SLASH_keys,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null)),null,cljs.core.list(null,null),1,8645,8645,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),"Returns a sequence of the map's keys."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,300,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,300,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_missing_DASH_protocol,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)),null,cljs.core.list(null,null),1,300,300,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,315,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,315,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_load_DASH_file,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)),null,cljs.core.list(null,null),1,315,315,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1946,cljs.core.cst$kw$column,28,cljs.core.cst$kw$end_DASH_line,1946,cljs.core.cst$kw$end_DASH_column,46,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,"cljs/core.cljs",28,true,10,6505,false,true,6505,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2324,16,2324,25,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns true if no two of the arguments are =",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_distinct_QMARK_,true,"cljs/core.cljs",25,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2324,cljs.core.cst$sym$boolean,2324,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns true if no two of the arguments are ="]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2242,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2242,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is positive."], null),cljs.core.cst$sym$cljs$core_SLASH_pos_DASH_int_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2242,cljs.core.cst$sym$boolean,2242,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies int? and is positive."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_never_DASH_equiv,"cljs/core.cljs",6033,1,6033,27,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6033,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,6033,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$cljs$core_SLASH_NeverEquiv]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2678,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2678,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_short,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2678,cljs.core.cst$sym$number,2678,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",9269,10,9269,15,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Range,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9269,9269,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6335,10,6335,18,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MapEntry,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6335,6335,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",3835,8,3835,23,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null))),"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_apply_DASH_to_DASH_simple,false,"cljs/core.cljs",23,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),null,cljs.core.list(null,null,null,null,null),1,3835,3835,6,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10757,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10757,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of dispatch values -> dispatch fns"], null),cljs.core.cst$sym$cljs$core_SLASH_methods,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,10757,10757,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, returns a map of dispatch values -> dispatch fns"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4198,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4198,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is odd, throws an exception if n is not an integer"], null),cljs.core.cst$sym$cljs$core_SLASH_odd_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,4198,cljs.core.cst$sym$boolean,4198,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns true if n is odd, throws an exception if n is not an integer"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3467,10,3467,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayChunk,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3467,3467,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",1440,8,1440,17,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ci_DASH_reduce,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null,null),1,1440,1440,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_3,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,196,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,198,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the third most recent value printed",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,198,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,198,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the third most recent value printed"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10547,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10547,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_get_DASH_method,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10542,10547,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1099,10,1099,13,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Var,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1099,1099,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9442,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9442,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map from distinct items in coll to the number of times\n  they appear."], null),cljs.core.cst$sym$cljs$core_SLASH_frequencies,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9442,9442,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a map from distinct items in coll to the number of times\n  they appear."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2116,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2116,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies IReduce"], null),cljs.core.cst$sym$cljs$core_SLASH_reduceable_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2116,cljs.core.cst$sym$boolean,2116,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll satisfies IReduce"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_string_DASH_hash_DASH_cache,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,944,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,944,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,944,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,944,cljs.core.cst$kw$end_DASH_column,23], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$object], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9243,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9243,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_rsubseq,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),null,cljs.core.list(null,null),1,9243,9243,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1400,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1400,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one greater than num."], null),cljs.core.cst$sym$cljs$core_SLASH_inc,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1400,1400,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one greater than num."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,309,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,309,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_type_DASH__GT_str,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)),null,cljs.core.list(null,null),1,309,309,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6091,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6091,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_clone,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)),null,cljs.core.list(null,null),1,6091,6091,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10761,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10761,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default"], null),cljs.core.cst$sym$cljs$core_SLASH_get_DASH_method,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10761,10761,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10824,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,10824,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_uuid_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10824,cljs.core.cst$sym$boolean,10824,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5115,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5115,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_vector_DASH_index_DASH_out_DASH_of_DASH_bounds,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)),null,cljs.core.list(null,null),1,5115,5115,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6240,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,6240,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_entries_DASH_iterator,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,6240,6240,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2838,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2838,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Clear bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_clear,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2838,2838,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Clear bit at index n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Range,"cljs/core.cljs",15,true,10,9269,false,9269,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4873,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4873,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_filter,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4873,4873,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7814,10,7814,30,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentTreeMapSeq,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7814,7814,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7501,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7501,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_array_DASH_node_DASH_seq,false,"cljs/core.cljs",29,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,7501,7501,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",795,9,795,18,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,"Returns tcoll with value val added at position n.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc_DASH_n_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,793,cljs.core.cst$sym$clj,795,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null))),"Returns tcoll with value val added at position n."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",673,14,673,23,"Protocol for adding metadata to an object.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,"cljs/core.cljs",23,1,673,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)], null)])], null),null,673,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 47, [cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20218,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core$async$impl$channels_SLASH_t_cljs$core$async$impl$channels17231,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20592,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20326,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20242,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20232,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20300,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20154,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20204,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20314,null,cljs.core.cst$sym$cljs$analyzer_SLASH_t_cljs$analyzer14479,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20571,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20588,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha20564,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null,cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core11420,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding metadata to an object.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3163,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3163,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"Creates a new list containing the items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_list,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xs)], null),null,cljs.core.list(null),1,3163,3163,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),"Creates a new list containing the items."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2565,15,2565,16,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the sum of nums. (+) returns 0.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__PLUS_,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2565,cljs.core.cst$sym$number,2565,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_IndexedSeqIterator,"cljs/core.cljs",28,true,10,1548,false,1548,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9396,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9396,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take-while pred coll) (drop-while pred coll)]"], null),cljs.core.cst$sym$cljs$core_SLASH_split_DASH_with,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9396,9396,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns a vector of [(take-while pred coll) (drop-while pred coll)]"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5069,10,5069,20,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null)))]),cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_VectorNode,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5069,5069,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,492,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,492,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$doc,"Sets the value at the index/indices. Works on JavaScript arrays.\n  Returns val.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_aset,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,492,492,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),"Sets the value at the index/indices. Works on JavaScript arrays.\n  Returns val."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,879,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,879,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_int_DASH_rotate_DASH_left,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,879,cljs.core.cst$sym$number,879,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3346,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3346,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_keyword,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,3346,3346,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3180,10,3180,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Cons,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3180,3180,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,54,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,54,cljs.core.cst$kw$end_DASH_column,7,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the current namespace. Only used for bootstrapping.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_ns_STAR_,"cljs/core.cljs",7,1,true,50,54,cljs.core.cst$sym$clj_DASH_nil,"Var bound to the current namespace. Only used for bootstrapping.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH__STAR_assert_STAR_,"cljs/core.cljs",61,1,63,11,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,63,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,63,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$dynamic,true], null),cljs.core.cst$sym$boolean]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7883,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7883,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_tree_DASH_map_DASH_seq,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)),null,cljs.core.list(null,null),1,7883,7883,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",570,14,570,25,"Protocol for adding to a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ICollection,"cljs/core.cljs",25,1,570,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)], null)])], null),null,570,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 29, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding to a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2785,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2785,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chars,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2785,2785,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2923,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2923,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null))),cljs.core.cst$kw$doc,"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_str,true,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null,null),1,2923,2923,(1),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1238,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,1238,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil"], null),cljs.core.cst$sym$cljs$core_SLASH_next,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1238,cljs.core.cst$sym$seq,1238,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",587,14,587,18,"Marker protocol indicating an array sequence.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ASeq,"cljs/core.cljs",18,1,587,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,587,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null], null), null),"Marker protocol indicating an array sequence.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9742,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9742,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_seq_DASH_writer,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9742,9742,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_SeqIter,"cljs/core.cljs",17,true,10,3980,false,3980,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",526,14,526,17,"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IFn,"cljs/core.cljs",17,1,526,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)], null)])], null),null,526,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$reagent$impl$util_SLASH_PartialFn,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9532,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9532,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript RegExp instance."], null),cljs.core.cst$sym$cljs$core_SLASH_regexp_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9532,cljs.core.cst$sym$boolean,9532,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript RegExp instance."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8530,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8530,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new hash map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_map,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8530,8530,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new hash map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10466,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10466,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_underive,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),null,cljs.core.list(null,null),1,10466,10466,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2161,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2161,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_copy,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)),null,cljs.core.list(null,null),1,2161,2161,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6069,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6069,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_map_DASH_compare_DASH_keys,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,6069,6069,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,840,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,840,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReset,cljs.core.cst$kw$doc,"Sets the value of o to new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IReset,cljs.core.cst$sym$cljs$core_SLASH__DASH_reset_BANG_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)),null,cljs.core.list(null,null),1,838,840,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null))),"Sets the value of o to new-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",594,9,594,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISeq,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_rest,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,590,cljs.core.cst$sym$clj,594,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3946,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3946,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_nil_DASH_iter,false,"cljs/core.cljs",15,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,3946,3946,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9733,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9733,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer."], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_writer,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9733,9733,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null))),"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2181,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2181,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value false, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_false_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2181,cljs.core.cst$sym$boolean,2181,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is the value false, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RangedIterator,"cljs/core.cljs",24,true,10,5166,false,5166,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,105,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,105,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true"], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_readably_STAR_,"cljs/core.cljs",19,1,true,99,105,cljs.core.cst$sym$boolean,"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2787,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2787,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ints,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2787,2787,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4601,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4601,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_some_DASH_fn,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),null,cljs.core.list(null,null,null,null),1,4601,4601,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10993,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10993,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_demunge_DASH_pattern,false,"cljs/core.cljs",23,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,10993,10993,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,90,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,90,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_flush_DASH_on_DASH_newline_STAR_,"cljs/core.cljs",21,1,true,85,90,cljs.core.cst$sym$boolean,"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3595,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3595,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Naive impl of to-array as a start."], null),cljs.core.cst$sym$cljs$core_SLASH_to_DASH_array,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3595,3595,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Naive impl of to-array as a start."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5672,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5672,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$__hash], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_build_DASH_subvec,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$__hash], null)),null,cljs.core.list(null,null),1,5672,5672,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$__hash], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,436,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,436,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_maybe_DASH_warn,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e], null)),null,cljs.core.list(null,null),1,436,436,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Namespace,"cljs/core.cljs",19,true,10,11064,false,11064,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3070,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3070,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x implements IList"], null),cljs.core.cst$sym$cljs$core_SLASH_list_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3070,cljs.core.cst$sym$boolean,3070,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x implements IList"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8345,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8345,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_remove,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)),null,cljs.core.list(null,null),1,8345,8345,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueIter,"cljs/core.cljs",29,true,10,5886,false,5886,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_HashCollisionNode,"cljs/core.cljs",27,true,10,7250,false,7250,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,223,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,223,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript array."], null),cljs.core.cst$sym$cljs$core_SLASH_array_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,223,cljs.core.cst$sym$boolean,223,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript array."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10492,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10492,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_prefers_STAR_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)),null,cljs.core.list(null,null),1,10492,10492,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3322,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3322,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword without a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_ident_QMARK_,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3322,cljs.core.cst$sym$boolean,3322,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol or keyword without a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1181,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1181,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Clone the supplied value which must implement ICloneable."], null),cljs.core.cst$sym$cljs$core_SLASH_clone,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,1181,1181,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Clone the supplied value which must implement ICloneable."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6055,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6055,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_scan_DASH_array,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)),null,cljs.core.list(null,null),1,6055,6055,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11048,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11048,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_demunge,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,11048,11048,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2848,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2848,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Bitwise complement"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_not,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2848,2848,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Bitwise complement"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9629,cljs.core.cst$kw$column,17,cljs.core.cst$kw$end_DASH_line,9629,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_quote_DASH_string,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9629,9629,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2662,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2662,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_byte,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2662,cljs.core.cst$sym$number,2662,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2648,15,2648,18,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the greatest of the nums.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_max,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2648,cljs.core.cst$sym$number,2648,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the greatest of the nums."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",805,14,805,25,"Protocol for values that can be compared.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IComparable,"cljs/core.cljs",25,1,805,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null)])], null),null,805,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$js_SLASH_Date,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for values that can be compared.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2885,16,2885,18,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__EQ__EQ_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2885,cljs.core.cst$sym$boolean,2885,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10407,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10407,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_parents,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),null,cljs.core.list(null,null),1,10407,10407,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1789,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1789,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps"], null),cljs.core.cst$sym$cljs$core_SLASH_count,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1789,1789,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",802,9,802,18,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,"Returns tcoll without v.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,cljs.core.cst$sym$cljs$core_SLASH__DASH_disjoin_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,800,cljs.core.cst$sym$clj,802,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null))),"Returns tcoll without v."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,165,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,165,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_loaded_DASH_libs_STAR_,"cljs/core.cljs",16,1,true,162,165,cljs.core.cst$sym$clj_DASH_nil,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_EMPTY,"cljs/core.cljs",4054,1,4054,21,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4054,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4054,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$cljs$core_SLASH_Empty]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7702,10,7702,26,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientHashMap,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7702,7702,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6276,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6276,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_symbol_QMARK_,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6276,6276,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3448,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,3448,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,"cljs/core.cljs",20,true,10,3467,false,true,3467,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8570,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8570,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_map_DASH_by,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8570,8570,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3869,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3869,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Applies fn f to the argument list formed by prepending intervening arguments to args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(5),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_apply,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(5),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null)),null,cljs.core.list(null,null,null,null,null),1,3869,3869,(5),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Applies fn f to the argument list formed by prepending intervening arguments to args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10379,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10379,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_get_DASH_global_DASH_hierarchy,false,"cljs/core.cljs",28,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,10379,10379,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,959,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,959,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_add_DASH_to_DASH_string_DASH_hash_DASH_cache,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,959,959,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10256,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10256,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Recursively transforms ClojureScript values to JavaScript.\n  sets/vectors/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by key->js."], null),cljs.core.cst$sym$cljs$core_SLASH_clj_DASH__GT_js,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10256,10256,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Recursively transforms ClojureScript values to JavaScript.\n  sets/vectors/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by key->js."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6333,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,6333,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,"cljs/core.cljs",27,true,10,6725,false,true,6725,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5753,10,5753,25,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientVector,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5753,5753,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",823,14,823,26,"Protocol for accessing the chunks of a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,"cljs/core.cljs",26,1,823,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,823,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null], null), null),"Protocol for accessing the chunks of a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4827,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4827,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_interpose,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4827,4827,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransformerIterator,"cljs/core.cljs",29,true,10,4083,false,4083,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7986,10,7986,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_BlackNode,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7986,7986,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1432,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1432,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Also reader macro: @var/@atom/@delay. Returns the\n   most-recently-committed value of ref. When applied to a var\n   or atom, returns its current state. When applied to a delay, forces\n   it if not already forced. See also - realized?."], null),cljs.core.cst$sym$cljs$core_SLASH_deref,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,1432,1432,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Also reader macro: @var/@atom/@delay. Returns the\n   most-recently-committed value of ref. When applied to a var\n   or atom, returns its current state. When applied to a delay, forces\n   it if not already forced. See also - realized?."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5074,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5074,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_aget,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,5074,5074,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1948,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1948,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_assoc,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,1948,1948,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3763,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3763,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null),cljs.core.cst$sym$cljs$core_SLASH_transient,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3763,3763,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new, transient version of the collection, in constant time."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",642,9,642,17,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISet,"Returns a new collection of coll that does not contain v.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISet,cljs.core.cst$sym$cljs$core_SLASH__DASH_disjoin,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,640,cljs.core.cst$sym$clj,642,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),"Returns a new collection of coll that does not contain v."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3571,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3571,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_cons,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)),null,cljs.core.list(null,null),1,3571,3571,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayIter,"cljs/core.cljs",19,true,10,3965,false,3965,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10898,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10898,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null))),cljs.core.cst$kw$doc,"Returns an JavaScript compatible comparator based upon pred."], null),cljs.core.cst$sym$cljs$core_SLASH_comparator,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null)),null,cljs.core.list(null,null),1,10898,10898,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null))),"Returns an JavaScript compatible comparator based upon pred."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9857,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9857,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix,cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_prefix_DASH_map,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix,cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9857,9857,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix,cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8561,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8561,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_map,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8561,8561,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new sorted map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4753,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4753,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_drop_DASH_while,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4753,4753,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",739,14,739,21,"Protocol for writing. Currently only implemented by StringBufferWriter.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Writes s with writer and returns the result."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Flush writer."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IWriter,"cljs/core.cljs",21,1,739,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Writes s with writer and returns the result."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Flush writer."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)], null)])], null),null,739,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_StringBufferWriter,null], null), null),"Protocol for writing. Currently only implemented by StringBufferWriter.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_KeySeq,"cljs/core.cljs",16,true,10,8580,false,8580,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10118,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,10118,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if a value has been produced for a delay or lazy sequence."], null),cljs.core.cst$sym$cljs$core_SLASH_realized_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10118,cljs.core.cst$sym$boolean,10118,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if a value has been produced for a delay or lazy sequence."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,69,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,69,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_fn_STAR_,"cljs/core.cljs",13,1,true,65,69,cljs.core.cst$sym$clj_DASH_nil,"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2342,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2342,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object."], null),cljs.core.cst$sym$cljs$core_SLASH_compare,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2342,cljs.core.cst$sym$number,2342,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4202,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4202,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value."], null),cljs.core.cst$sym$cljs$core_SLASH_complement,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,4202,cljs.core.cst$sym$boolean,4202,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_lookup_DASH_sentinel,"cljs/core.cljs",2179,1,2179,31,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2179,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2179,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",784,9,784,16,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc_BANG_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,782,cljs.core.cst$sym$clj,784,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null))),"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,121,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,121,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_dup_STAR_,"cljs/core.cljs",14,1,true,115,121,cljs.core.cst$sym$boolean,"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3962,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3962,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_string_DASH_iter,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3962,3962,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10241,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10241,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$sym$cljs$core_SLASH__DASH_key_DASH__GT_js,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10239,10241,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",660,14,660,20,"Protocol for adding dereference functionality to a reference.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the reference o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IDeref,"cljs/core.cljs",20,1,660,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the reference o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null),null,660,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core$async$impl$channels_SLASH_t_cljs$core$async$impl$channels17231,null,cljs.core.cst$sym$cljs$core_SLASH_Reduced,null,cljs.core.cst$sym$cljs$core_SLASH_Volatile,null,cljs.core.cst$sym$cljs$core_SLASH_Delay,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$reagent$ratom_SLASH_RCursor,null,cljs.core.cst$sym$reagent$ratom_SLASH_Wrapper,null,cljs.core.cst$sym$cljs$spec$gen$alpha_SLASH_LazyVar,null,cljs.core.cst$sym$cljs$analyzer_SLASH_t_cljs$analyzer14479,null,cljs.core.cst$sym$reagent$ratom_SLASH_Track,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$reagent$ratom_SLASH_Reaction,null,cljs.core.cst$sym$reagent$ratom_SLASH_RAtom,null], null), null),"Protocol for adding dereference functionality to a reference.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4142,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4142,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sequence,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null,null),1,4142,4142,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4212,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4212,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a function that takes any number of arguments and returns x."], null),cljs.core.cst$sym$cljs$core_SLASH_constantly,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4212,4212,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a function that takes any number of arguments and returns x."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5166,10,5166,24,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RangedIterator,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5166,5166,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5531,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5531,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_chunked_DASH_seq,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null,null),1,5531,5531,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",722,14,722,21,"Protocol for a collection which can represent their items\n  in a sorted manner. ",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key for entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the comparator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISorted,"cljs/core.cljs",21,1,722,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key for entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the comparator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,722,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null], null), null),"Protocol for a collection which can represent their items\n  in a sorted manner. ",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",399,14,399,24,cljs.core.cst$sym$array,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null))),"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_make_DASH_array,true,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),null,cljs.core.list(null,null,null),1,399,cljs.core.cst$sym$array,399,(2),cljs.core.cst$sym$array,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,441,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,441,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_checked_DASH_aget,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,441,441,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2786,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2786,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_shorts,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2786,2786,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_unchecked_DASH_if_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,26,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,26,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,26,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,26,cljs.core.cst$kw$end_DASH_column,20], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1662,10,1662,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RSeq,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1662,1662,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,176,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,176,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Set *print-fn* to console.log"], null),cljs.core.cst$sym$cljs$core_SLASH_enable_DASH_console_DASH_print_BANG_,false,"cljs/core.cljs",28,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,176,176,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),"Set *print-fn* to console.log"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,743,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,743,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Flush writer.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$sym$cljs$core_SLASH__DASH_flush,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)),null,cljs.core.list(null,null),1,739,743,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null))),"Flush writer."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1531,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1531,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH__DASH_lastIndexOf,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),null,cljs.core.list(null,null),1,1531,1531,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2536,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2536,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null))),cljs.core.cst$kw$doc,"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_completing,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),null,cljs.core.list(null,null),1,2536,2536,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2736,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2736,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate_DASH_int,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2736,2736,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5207,10,5207,26,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 25, [cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 25, [cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentVector,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5207,5207,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2945,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2945,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false."], null),true,cljs.core.cst$sym$cljs$core_SLASH_equiv_DASH_sequential,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2945,2945,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1328,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,1328,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms."], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_unordered_DASH_coll,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1328,cljs.core.cst$sym$number,1328,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4789,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4789,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!, or length n if supplied) sequence of xs.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_repeat,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4789,4789,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),"Returns a lazy (infinite!, or length n if supplied) sequence of xs."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2713,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2713,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2713,2713,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2913,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2913,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth next of coll, (seq coll) when n is 0."], null),cljs.core.cst$sym$cljs$core_SLASH_nthnext,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2913,2913,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),"Returns the nth next of coll, (seq coll) when n is 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10123,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10123,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_preserving_DASH_reduced,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)),null,cljs.core.list(null,null),1,10123,10123,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4499,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4499,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null))),cljs.core.cst$kw$doc,"Gets the validator-fn for a var/ref/agent/atom."], null),cljs.core.cst$sym$cljs$core_SLASH_get_DASH_validator,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null)),null,cljs.core.list(null,null),1,4499,4499,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null))),"Gets the validator-fn for a var/ref/agent/atom."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_StringIter,"cljs/core.cljs",20,true,10,3953,false,3953,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,230,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,230,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript number."], null),cljs.core.cst$sym$cljs$core_SLASH_number_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,230,cljs.core.cst$sym$boolean,230,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript number."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",777,9,777,15,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,"Adds value val to tcoll and returns tcoll.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_conj_BANG_,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,775,cljs.core.cst$sym$clj,777,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null))),"Adds value val to tcoll and returns tcoll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6427,10,6427,31,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentArrayMapSeq,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6427,6427,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3588,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3588,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_next,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3588,3588,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayList,"cljs/core.cljs",19,true,10,9161,false,9161,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9811,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9811,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"print to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_str,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9811,9811,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"print to a string, returning it"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4187,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4187,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for any x in coll,\n  else true."], null),cljs.core.cst$sym$cljs$core_SLASH_not_DASH_any_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4187,cljs.core.cst$sym$boolean,4187,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns false if (pred x) is logical true for any x in coll,\n  else true."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",507,14,507,24,cljs.core.cst$sym$array,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null))),"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_into_DASH_array,false,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),null,cljs.core.list(null,null),1,507,cljs.core.cst$sym$array,507,2,cljs.core.cst$sym$array,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,700,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,700,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IHash,cljs.core.cst$kw$doc,"Returns the hash code of o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IHash,cljs.core.cst$sym$cljs$core_SLASH__DASH_hash,false,"cljs/core.cljs",9,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,698,700,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the hash code of o."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3334,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3334,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol with a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_symbol_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3334,cljs.core.cst$sym$boolean,3334,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol with a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",790,9,790,17,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,"Returns a new transient collection of tcoll without the mapping for key.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,cljs.core.cst$sym$cljs$core_SLASH__DASH_dissoc_BANG_,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,788,cljs.core.cst$sym$clj,790,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null))),"Returns a new transient collection of tcoll without the mapping for key."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1406,10,1406,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Reduced,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1406,1406,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3464,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3464,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_buffer,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)),null,cljs.core.list(null,null),1,3464,3464,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2205,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2205,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if the seq function is supported for s"], null),cljs.core.cst$sym$cljs$core_SLASH_seqable_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,2205,cljs.core.cst$sym$boolean,2205,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return true if the seq function is supported for s"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1025,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1025,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Symbol"], null),cljs.core.cst$sym$cljs$core_SLASH_symbol_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1025,cljs.core.cst$sym$boolean,1025,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a Symbol"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,925,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,925,cljs.core.cst$kw$end_DASH_column,38,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_hash_DASH_unencoded_DASH_chars,false,"cljs/core.cljs",38,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)),null,cljs.core.list(null,null),1,925,cljs.core.cst$sym$number,925,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2677,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2677,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_char,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2677,cljs.core.cst$sym$number,2677,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,380,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,380,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Returns highest resolution time offered by host in milliseconds."], null),cljs.core.cst$sym$cljs$core_SLASH_system_DASH_time,false,"cljs/core.cljs",18,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,380,380,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),"Returns highest resolution time offered by host in milliseconds."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[0,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_NeverEquiv,"cljs/core.cljs",20,true,10,6026,false,6026,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4072,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4072,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_chunkIteratorSeq,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)),null,cljs.core.list(null,null),1,4072,4072,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",530,4,530,11,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,22,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_IFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_invoke,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,22,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),null,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),1,526,530,22,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2086,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2086,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ICollection"], null),cljs.core.cst$sym$cljs$core_SLASH_coll_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2086,cljs.core.cst$sym$boolean,2086,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x satisfies ICollection"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],["1.2","cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),7,4996,4996,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null))),"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied."]),"1.2",cljs.core.cst$sym$cljs$core_SLASH_get_DASH_in,false,"cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,4996,4996,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1740,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1740,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null),cljs.core.cst$sym$cljs$core_SLASH_fnext,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1740,1740,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (first (next x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",711,14,711,19,"Marker interface indicating a persistent list",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IList,"cljs/core.cljs",19,1,711,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,711,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_List,null], null), null),"Marker interface indicating a persistent list",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeIterator,"cljs/core.cljs",27,true,10,7120,false,7120,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1504,cljs.core.cst$kw$column,45,cljs.core.cst$kw$end_DASH_line,1504,cljs.core.cst$kw$end_DASH_column,49,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_List,"cljs/core.cljs",14,true,10,3003,false,true,3003,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,637,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,637,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the value of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$sym$cljs$core_SLASH__DASH_val,false,"cljs/core.cljs",8,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,633,637,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the value of the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2784,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2784,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_bytes,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2784,2784,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6101,10,6101,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ObjMap,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6101,6101,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1035,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1035,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_symbols,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,1035,1035,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",705,16,705,20,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,"Returns a seq of o, or nil if o is empty.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISeqable,cljs.core.cst$sym$cljs$core_SLASH__DASH_seq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,703,cljs.core.cst$sym$clj_DASH_or_DASH_nil,705,1,cljs.core.cst$sym$clj_DASH_or_DASH_nil,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns a seq of o, or nil if o is empty."])]),null,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$seen,cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core.cst$sym$form,cljs.core.cst$sym$tag,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$defrecord_STAR_,cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$obj,cljs.core.cst$sym$fqn,cljs.core.cst$sym$first,cljs.core.cst$sym$try,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$meta9497,cljs.core.cst$sym$rear,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$iter,cljs.core.cst$sym$step,cljs.core.cst$sym$boolean,cljs.core.cst$sym$update_DASH_count,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$chunk,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$rest,cljs.core.cst$kw$meta,cljs.core.cst$sym$meta11421,cljs.core.cst$kw$dup,cljs.core.cst$sym$comp,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$else,cljs.core.cst$sym$left,cljs.core.cst$sym$ns_STAR_,cljs.core.cst$kw$cljs$core_SLASH_none,cljs.core.cst$sym$shift,cljs.core.cst$sym$iters,cljs.core.cst$sym$xform,cljs.core.cst$kw$validator,cljs.core.cst$sym$finally,cljs.core.cst$kw$default,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$loop_STAR_,cljs.core.cst$sym$watches,cljs.core.cst$kw$ns,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$v,cljs.core.cst$sym$riter,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta,cljs.core.cst$sym$_meta,cljs.core.cst$sym$afn,cljs.core.cst$sym$tree,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$front,cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$val,cljs.core.cst$sym$key,cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$root_DASH_iter,cljs.core.cst$sym$do,cljs.core.cst$sym$vec,cljs.core.cst$kw$fallback_DASH_impl,cljs.core.cst$kw$flush_DASH_on_DASH_newline,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$kw$no_DASH_test,cljs.core.cst$sym$validator,cljs.core.cst$sym$letfn_STAR_,cljs.core.cst$sym$if,cljs.core.cst$sym$arr,cljs.core.cst$sym$new,cljs.core.cst$kw$descendants,cljs.core.cst$sym$ns,cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$ancestors,cljs.core.cst$sym$value,cljs.core.cst$sym$name,cljs.core.cst$kw$readably,cljs.core.cst$kw$more_DASH_marker,cljs.core.cst$sym$fields,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$base_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$deftype_STAR_,cljs.core.cst$sym$let_STAR_,cljs.core.cst$sym$start,cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$coll,cljs.core.cst$sym$not_DASH_native,cljs.core.cst$sym$js_STAR_,cljs.core.cst$sym$strobj,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$fn_STAR_,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$recur,cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$ci,cljs.core.cst$kw$print_DASH_length,cljs.core.cst$sym$state,cljs.core.cst$kw$ok,cljs.core.cst$sym$vals,cljs.core.cst$kw$cljs$core_SLASH_halt,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$parents,cljs.core.cst$sym$cnt,cljs.core.cst$sym$node,cljs.core.cst$sym$sym,cljs.core.cst$sym$sb,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$keys,cljs.core.cst$sym$set_BANG_,cljs.core.cst$kw$tag,cljs.core.cst$sym$tree_DASH_map,cljs.core.cst$sym$_DOT_,cljs.core.cst$sym$var,cljs.core.cst$kw$mutable,cljs.core.cst$sym$quote,cljs.core.cst$sym$root,cljs.core.cst$sym$multi,cljs.core.cst$sym$str,cljs.core.cst$sym$nodes,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$hash_DASH_map,cljs.core.cst$sym$catch,cljs.core.cst$kw$alt_DASH_impl,cljs.core.cst$sym$ext_DASH_map_DASH_iter,cljs.core.cst$sym$tail,cljs.core.cst$sym$record,cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$count,cljs.core.cst$kw$keywordize_DASH_keys,cljs.core.cst$sym$off,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$right,cljs.core.cst$sym$throw,cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found,cljs.core.cst$sym$more,cljs.core.cst$sym$def,cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))]),cljs.core.cst$kw$order,cljs.core.PersistentVector.fromArray([cljs.core.cst$kw$flush_DASH_on_DASH_newline,cljs.core.cst$kw$readably,cljs.core.cst$kw$meta,cljs.core.cst$kw$dup,cljs.core.cst$kw$print_DASH_length,cljs.core.cst$kw$else,cljs.core.cst$sym$sb,cljs.core.cst$kw$default,cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$mutable,cljs.core.cst$sym$_meta,cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta,cljs.core.cst$sym$ci,cljs.core.cst$sym$afn,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$off,cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta9497,cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$vals,cljs.core.cst$sym$iters,cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi,cljs.core.cst$sym$state,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches,cljs.core.cst$kw$validator,cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter,cljs.core.cst$sym$key,cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$nodes,cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$not_DASH_native,cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$tree_DASH_map,cljs.core.cst$sym$step,cljs.core.cst$kw$cljs$core_SLASH_none,cljs.core.cst$kw$more_DASH_marker,cljs.core.cst$kw$alt_DASH_impl,cljs.core.cst$kw$fallback_DASH_impl,cljs.core.cst$kw$val,cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$cljs$core_SLASH_halt,cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$kw$keywordize_DASH_keys,cljs.core.cst$kw$parents,cljs.core.cst$kw$descendants,cljs.core.cst$kw$ancestors,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$uuid,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$defrecord_STAR_,cljs.core.cst$sym$try,cljs.core.cst$sym$ns_STAR_,cljs.core.cst$sym$finally,cljs.core.cst$sym$loop_STAR_,cljs.core.cst$sym$do,cljs.core.cst$sym$letfn_STAR_,cljs.core.cst$sym$if,cljs.core.cst$sym$new,cljs.core.cst$sym$deftype_STAR_,cljs.core.cst$sym$let_STAR_,cljs.core.cst$sym$js_STAR_,cljs.core.cst$sym$fn_STAR_,cljs.core.cst$sym$recur,cljs.core.cst$sym$set_BANG_,cljs.core.cst$sym$_DOT_,cljs.core.cst$sym$var,cljs.core.cst$sym$quote,cljs.core.cst$sym$catch,cljs.core.cst$sym$throw,cljs.core.cst$sym$def,cljs.core.cst$kw$ok,cljs.core.cst$kw$no_DASH_test,cljs.core.cst$sym$tag,cljs.core.cst$sym$form,cljs.core.cst$kw$ns,cljs.core.cst$sym$obj,cljs.core.cst$sym$meta11421], true)], null),null]));
});})(G__20636))
);

return G__20636;
});

cljs.js.empty_state.cljs$core$IFn$_invoke$arity$1 = (function (init){
var G__20637 = cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0();
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(G__20637,init);

return G__20637;
});

cljs.js.empty_state.cljs$lang$maxFixedArity = 1;

cljs.js.load_analysis_cache_BANG_ = (function cljs$js$load_analysis_cache_BANG_(state,ns,cache){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,ns], null),cache);
});
cljs.js.load_source_map_BANG_ = (function cljs$js$load_source_map_BANG_(state,ns,sm_json){
var sm = cljs.source_map.decode.cljs$core$IFn$_invoke$arity$1(JSON.parse(sm_json));
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$source_DASH_maps,ns], null),sm);
});
cljs.js.sm_data = (function cljs$js$sm_data(){
return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$source_DASH_map,cljs.core.sorted_map(),cljs.core.cst$kw$gen_DASH_col,(0),cljs.core.cst$kw$gen_DASH_line,(0)], null));
});
cljs.js.prefix = (function cljs$js$prefix(s,pre){
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(pre),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join('');
});
cljs.js.append_source_map = (function cljs$js$append_source_map(state,name,source,sb,sm_data,p__20639){
var map__20640 = p__20639;
var map__20640__$1 = ((((!((map__20640 == null)))?((((map__20640.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20640.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20640):map__20640);
var opts = map__20640__$1;
var output_dir = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20640__$1,cljs.core.cst$kw$output_DASH_dir);
var asset_path = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20640__$1,cljs.core.cst$kw$asset_DASH_path);
var t = (new Date()).valueOf();
var smn = (cljs.core.truth_(name)?clojure.string.replace(cljs.core.munge([cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join('')),".","/"):["cljs-",cljs.core.str.cljs$core$IFn$_invoke$arity$1(t)].join(''));
var ts = (new Date()).valueOf();
var out = (function (){var or__7668__auto__ = output_dir;
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return asset_path;
}
})();
var src = (function (){var G__20642 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(smn),".cljs?rel=",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts)].join('');
if(cljs.core.truth_(out)){
return cljs.js.prefix(G__20642,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(out),"/"].join(''));
} else {
return G__20642;
}
})();
var file = (function (){var G__20643 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(smn),".js?rel=",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts)].join('');
if(cljs.core.truth_(out)){
return cljs.js.prefix(G__20643,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(out),"/"].join(''));
} else {
return G__20643;
}
})();
var json = cljs.source_map.encode(cljs.core.PersistentArrayMap.createAsIfByAssoc([src,cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(sm_data)]),new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$lines,(cljs.core.cst$kw$gen_DASH_line.cljs$core$IFn$_invoke$arity$1(sm_data) + (3)),cljs.core.cst$kw$file,file,cljs.core.cst$kw$sources_DASH_content,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [source], null)], null));
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([json], 0));
} else {
}

cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$source_DASH_maps,name], null),cljs.source_map.invert_reverse_map(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(sm_data)));

return sb.append(["\n//# sourceURL=",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file),"\n//# sourceMappingURL=data:application/json;base64,",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var G__20644 = clojure.string.replace(encodeURIComponent(json),/%([0-9A-F]{2})/,((function (t,smn,ts,out,src,file,json,map__20640,map__20640__$1,opts,output_dir,asset_path){
return (function (p__20645){
var vec__20646 = p__20645;
var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20646,(0),null);
var match = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20646,(1),null);
return String.fromCharCode(["0x",cljs.core.str.cljs$core$IFn$_invoke$arity$1(match)].join(''));
});})(t,smn,ts,out,src,file,json,map__20640,map__20640__$1,opts,output_dir,asset_path))
);
return goog.crypt.base64.encodeString(G__20644);
})())].join(''));
});
cljs.js.current_alias_map = (function cljs$js$current_alias_map(){
return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p__20649){
var vec__20650 = p__20649;
var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20650,(0),null);
var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20650,(1),null);
return cljs.core.symbol_identical_QMARK_(k,v);
}),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.env._STAR_compiler_STAR_),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,cljs.analyzer._STAR_cljs_ns_STAR_,cljs.core.cst$kw$requires], null)),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.env._STAR_compiler_STAR_),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,cljs.analyzer._STAR_cljs_ns_STAR_,cljs.core.cst$kw$require_DASH_macros], null))], 0))));
});
cljs.js._STAR_loaded_STAR_ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentHashSet.EMPTY);
/**
 * Like cljs.core/run!, but for an async procedure, and with the
 *   ability to break prior to processing the entire collection.
 * 
 *   Chains successive calls to the supplied procedure for items in
 *   the collection. The procedure should accept an item from the
 *   collection and a callback of one argument. If the break? predicate,
 *   when applied to the procedure callback value, yields a truthy
 *   result, terminates early calling the supplied cb with the callback
 *   value. Otherwise, when complete, calls cb with nil.
 */
cljs.js.run_async_BANG_ = (function cljs$js$run_async_BANG_(proc,coll,break_QMARK_,cb){
if(cljs.core.seq(coll)){
var G__20653 = cljs.core.first(coll);
var G__20654 = ((function (G__20653){
return (function (res){
if(cljs.core.truth_((break_QMARK_.cljs$core$IFn$_invoke$arity$1 ? break_QMARK_.cljs$core$IFn$_invoke$arity$1(res) : break_QMARK_.call(null,res)))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var G__20655 = proc;
var G__20656 = cljs.core.rest(coll);
var G__20657 = break_QMARK_;
var G__20658 = cb;
return (cljs.js.run_async_BANG_.cljs$core$IFn$_invoke$arity$4 ? cljs.js.run_async_BANG_.cljs$core$IFn$_invoke$arity$4(G__20655,G__20656,G__20657,G__20658) : cljs.js.run_async_BANG_.call(null,G__20655,G__20656,G__20657,G__20658));
}
});})(G__20653))
;
return (proc.cljs$core$IFn$_invoke$arity$2 ? proc.cljs$core$IFn$_invoke$arity$2(G__20653,G__20654) : proc.call(null,G__20653,G__20654));
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(null) : cb.call(null,null));
}
});
cljs.js.process_deps = (function cljs$js$process_deps(bound_vars,names,opts,cb){
return cljs.js.run_async_BANG_((function (name,cb__$1){
return (cljs.js.require.cljs$core$IFn$_invoke$arity$5 ? cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,name,null,opts,cb__$1) : cljs.js.require.call(null,bound_vars,name,null,opts,cb__$1));
}),names,cljs.core.cst$kw$error,cb);
});
cljs.js.process_macros_deps = (function cljs$js$process_macros_deps(bound_vars,cache,opts,cb){
return cljs.js.process_deps(bound_vars,cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.vals(cljs.core.cst$kw$require_DASH_macros.cljs$core$IFn$_invoke$arity$1(cache))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$macros_DASH_ns,true),cljs.core.cst$kw$emit_DASH_constants,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$optimize_DASH_constants], 0)),cb);
});
cljs.js.process_libs_deps = (function cljs$js$process_libs_deps(bound_vars,cache,opts,cb){
return cljs.js.process_deps(bound_vars,cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.vals(cljs.core.cst$kw$requires.cljs$core$IFn$_invoke$arity$1(cache)),cljs.core.vals(cljs.core.cst$kw$imports.cljs$core$IFn$_invoke$arity$1(cache)))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$macros_DASH_ns),cb);
});
cljs.js.pre_file_side_effects = (function cljs$js$pre_file_side_effects(st,name,file,opts){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Pre-file side-effects",file], 0));
} else {
}

if(cljs.core.truth_((function (){var and__7656__auto__ = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(st),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,name,cljs.core.cst$kw$defs], null));
if(cljs.core.truth_(and__7656__auto__)){
return cljs.core.not((function (){var fexpr__20659 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core$macros,null,cljs.core.cst$sym$cljs$core,null], null), null);
return (fexpr__20659.cljs$core$IFn$_invoke$arity$1 ? fexpr__20659.cljs$core$IFn$_invoke$arity$1(name) : fexpr__20659.call(null,name));
})());
} else {
return and__7656__auto__;
}
})())){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(st,cljs.core.update,cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([name], 0));
} else {
return null;
}
});
cljs.js.post_file_side_effects = (function cljs$js$post_file_side_effects(file,opts){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Post-file side-effects",file], 0));
} else {
}

return cljs.core._STAR_unchecked_arrays_STAR_ = false;;
});
cljs.js.require = (function cljs$js$require(var_args){
var G__20661 = arguments.length;
switch (G__20661) {
case 2:
return cljs.js.require.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.js.require.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.require.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.require.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.require.cljs$core$IFn$_invoke$arity$2 = (function (name,cb){
return cljs.js.require.cljs$core$IFn$_invoke$arity$3(name,null,cb);
});

cljs.js.require.cljs$core$IFn$_invoke$arity$3 = (function (name,opts,cb){
return cljs.js.require.cljs$core$IFn$_invoke$arity$4(null,name,opts,cb);
});

cljs.js.require.cljs$core$IFn$_invoke$arity$4 = (function (bound_vars,name,opts,cb){
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,name,null,opts,cb);
});

cljs.js.require.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,name,reload,opts,cb){
var bound_vars__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$_STAR_compiler_STAR_,cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0(),cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),bound_vars], 0));
var aname = (function (){var G__20662 = name;
if(cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.analyzer.macro_ns_name(G__20662);
} else {
return G__20662;
}
})();
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$reload,reload)){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.js._STAR_loaded_STAR_,cljs.core.disj,aname);
} else {
}

if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$reload_DASH_all,reload)){
cljs.core.reset_BANG_(cljs.js._STAR_loaded_STAR_,cljs.core.PersistentHashSet.EMPTY);
} else {
}

if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([["Loading ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name),cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))?" macros":null))," namespace"].join('')], 0));
} else {
}

if(!(cljs.core.contains_QMARK_(cljs.core.deref(cljs.js._STAR_loaded_STAR_),aname))){
var env = cljs.core.cst$kw$_STAR_env_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
try{var G__20666 = new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$name,name,cljs.core.cst$kw$macros,cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts),cljs.core.cst$kw$path,cljs.js.ns__GT_relpath(name)], null);
var G__20667 = ((function (G__20666,env,bound_vars__$1,aname){
return (function (resource){
if((cljs.core.map_QMARK_(resource)) || ((resource == null))){
} else {
throw (new Error(["Assert failed: ","*load-fn* may only return a map or nil","\n","(or (map? resource) (nil? resource))"].join('')));
}

if(cljs.core.truth_(resource)){
var map__20668 = resource;
var map__20668__$1 = ((((!((map__20668 == null)))?((((map__20668.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20668.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20668):map__20668);
var lang = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20668__$1,cljs.core.cst$kw$lang);
var source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20668__$1,cljs.core.cst$kw$source);
var cache = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20668__$1,cljs.core.cst$kw$cache);
var source_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20668__$1,cljs.core.cst$kw$source_DASH_map);
var file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20668__$1,cljs.core.cst$kw$file);
var pred__20670 = cljs.core.keyword_identical_QMARK_;
var expr__20671 = lang;
if(cljs.core.truth_((function (){var G__20673 = cljs.core.cst$kw$clj;
var G__20674 = expr__20671;
return (pred__20670.cljs$core$IFn$_invoke$arity$2 ? pred__20670.cljs$core$IFn$_invoke$arity$2(G__20673,G__20674) : pred__20670.call(null,G__20673,G__20674));
})())){
cljs.js.pre_file_side_effects(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),aname,file,opts);

var G__20675 = bound_vars__$1;
var G__20676 = source;
var G__20677 = name;
var G__20678 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$cljs_DASH_file,file);
var G__20679 = ((function (G__20675,G__20676,G__20677,G__20678,pred__20670,expr__20671,map__20668,map__20668__$1,lang,source,cache,source_map,file,G__20666,env,bound_vars__$1,aname){
return (function (res){
cljs.js.post_file_side_effects(file,opts);

if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.js._STAR_loaded_STAR_,cljs.core.conj,aname);

var G__20680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,true], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20680) : cb.call(null,G__20680));
}
});})(G__20675,G__20676,G__20677,G__20678,pred__20670,expr__20671,map__20668,map__20668__$1,lang,source,cache,source_map,file,G__20666,env,bound_vars__$1,aname))
;
return (cljs.js.eval_str_STAR_.cljs$core$IFn$_invoke$arity$5 ? cljs.js.eval_str_STAR_.cljs$core$IFn$_invoke$arity$5(G__20675,G__20676,G__20677,G__20678,G__20679) : cljs.js.eval_str_STAR_.call(null,G__20675,G__20676,G__20677,G__20678,G__20679));
} else {
if(cljs.core.truth_((function (){var G__20681 = cljs.core.cst$kw$js;
var G__20682 = expr__20671;
return (pred__20670.cljs$core$IFn$_invoke$arity$2 ? pred__20670.cljs$core$IFn$_invoke$arity$2(G__20681,G__20682) : pred__20670.call(null,G__20681,G__20682));
})())){
return cljs.js.process_macros_deps(bound_vars__$1,cache,opts,((function (pred__20670,expr__20671,map__20668,map__20668__$1,lang,source,cache,source_map,file,G__20666,env,bound_vars__$1,aname){
return (function (res){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
return cljs.js.process_libs_deps(bound_vars__$1,cache,opts,((function (pred__20670,expr__20671,map__20668,map__20668__$1,lang,source,cache,source_map,file,G__20666,env,bound_vars__$1,aname){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var res__$2 = (function (){try{var fexpr__20684_20692 = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
(fexpr__20684_20692.cljs$core$IFn$_invoke$arity$1 ? fexpr__20684_20692.cljs$core$IFn$_invoke$arity$1(resource) : fexpr__20684_20692.call(null,resource));

if(cljs.core.truth_(cache)){
cljs.js.load_analysis_cache_BANG_(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),aname,cache);

cljs.analyzer.register_specs(cache);
} else {
}

if(cljs.core.truth_(source_map)){
return cljs.js.load_source_map_BANG_(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),aname,source_map);
} else {
return null;
}
}catch (e20683){var cause = e20683;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(env,["Could not require ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.js._STAR_loaded_STAR_,cljs.core.conj,aname);

var G__20685 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,true], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20685) : cb.call(null,G__20685));
}
}
});})(pred__20670,expr__20671,map__20668,map__20668__$1,lang,source,cache,source_map,file,G__20666,env,bound_vars__$1,aname))
);
}
});})(pred__20670,expr__20671,map__20668,map__20668__$1,lang,source,cache,source_map,file,G__20666,env,bound_vars__$1,aname))
);
} else {
var G__20686 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(env,["Invalid :lang specified ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(lang),", only :clj or :js allowed"].join('')));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20686) : cb.call(null,G__20686));
}
}
} else {
var G__20687 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(env,(function (){var G__20688 = (cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.cst$kw$undeclared_DASH_macros_DASH_ns:cljs.core.cst$kw$undeclared_DASH_ns);
var G__20689 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_DASH_sym,name,cljs.core.cst$kw$js_DASH_provide,cljs.core.name(name)], null);
return (cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2 ? cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2(G__20688,G__20689) : cljs.analyzer.error_message.call(null,G__20688,G__20689));
})()));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20687) : cb.call(null,G__20687));
}
});})(G__20666,env,bound_vars__$1,aname))
;
var fexpr__20665 = cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
return (fexpr__20665.cljs$core$IFn$_invoke$arity$2 ? fexpr__20665.cljs$core$IFn$_invoke$arity$2(G__20666,G__20667) : fexpr__20665.call(null,G__20666,G__20667));
}catch (e20663){var cause = e20663;
var G__20664 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(env,["Could not require ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20664) : cb.call(null,G__20664));
}} else {
var G__20690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,true], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20690) : cb.call(null,G__20690));
}
});

cljs.js.require.cljs$lang$maxFixedArity = 5;

cljs.js.patch_alias_map = (function cljs$js$patch_alias_map(compiler,in$,from,to){
var patch = (function (k,add_if_present_QMARK_){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(compiler,cljs.core.update_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,in$,k], null),(function (m){
var replaced = clojure.walk.postwalk_replace(cljs.core.PersistentArrayMap.createAsIfByAssoc([from,to]),m);
if(cljs.core.truth_((function (){var and__7656__auto__ = add_if_present_QMARK_;
if(cljs.core.truth_(and__7656__auto__)){
return cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([to]),cljs.core.vals(replaced));
} else {
return and__7656__auto__;
}
})())){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(replaced,from,to);
} else {
return replaced;
}
}));
});
var patch_renames = ((function (patch){
return (function (k){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(compiler,cljs.core.update_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,in$,k], null),((function (patch){
return (function (m){
if(cljs.core.truth_(m)){
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (patch){
return (function (acc,p__20693){
var vec__20694 = p__20693;
var renamed = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20694,(0),null);
var qualified_sym = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20694,(1),null);
var entry = vec__20694;
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(from)].join(''),cljs.core.namespace(qualified_sym))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,renamed,cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(to)].join(''),cljs.core.name(qualified_sym)));
} else {
return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([acc,entry], 0));
}
});})(patch))
,cljs.core.PersistentArrayMap.EMPTY,m);
} else {
return null;
}
});})(patch))
);
});})(patch))
;
patch(cljs.core.cst$kw$requires,true);

patch(cljs.core.cst$kw$require_DASH_macros,true);

patch(cljs.core.cst$kw$uses,false);

patch(cljs.core.cst$kw$use_DASH_macros,false);

patch_renames(cljs.core.cst$kw$renames);

return patch_renames(cljs.core.cst$kw$rename_DASH_macros);
});
cljs.js.self_require_QMARK_ = (function cljs$js$self_require_QMARK_(deps,opts){
var and__7656__auto__ = cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts) === true;
if(and__7656__auto__){
return cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.analyzer._STAR_cljs_ns_STAR_]),deps);
} else {
return and__7656__auto__;
}
});
cljs.js.load_deps = (function cljs$js$load_deps(var_args){
var G__20699 = arguments.length;
switch (G__20699) {
case 5:
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 7:
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.load_deps.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,ana_env,lib,deps,cb){
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7(bound_vars,ana_env,lib,deps,null,null,cb);
});

cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7 = (function (bound_vars,ana_env,lib,deps,reload,opts,cb){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Loading dependencies for",lib], 0));
} else {
}

var _STAR_cljs_dep_set_STAR_20700 = cljs.analyzer._STAR_cljs_dep_set_STAR_;
cljs.analyzer._STAR_cljs_dep_set_STAR_ = (function (){var lib__$1 = (cljs.core.truth_(cljs.js.self_require_QMARK_(deps,opts))?cljs.core.cst$sym$cljs$user:lib);
return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars),lib__$1),cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$dep_DASH_path], null),cljs.core.conj,lib__$1);
})();

try{var bound_vars__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(bound_vars,cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_);
if(!(cljs.core.every_QMARK_(((function (bound_vars__$1,_STAR_cljs_dep_set_STAR_20700){
return (function (p1__20697_SHARP_){
return !(cljs.core.contains_QMARK_(cljs.analyzer._STAR_cljs_dep_set_STAR_,p1__20697_SHARP_));
});})(bound_vars__$1,_STAR_cljs_dep_set_STAR_20700))
,deps))){
var G__20701 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(ana_env,["Circular dependency detected ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(" -> ",cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$dep_DASH_path.cljs$core$IFn$_invoke$arity$1(cljs.core.meta(cljs.analyzer._STAR_cljs_dep_set_STAR_)),cljs.core.some(cljs.analyzer._STAR_cljs_dep_set_STAR_,deps)))))].join('')));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20701) : cb.call(null,G__20701));
} else {
if(cljs.core.seq(deps)){
var dep = cljs.core.first(deps);
var opts_SINGLEQUOTE_ = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$context),cljs.core.cst$kw$def_DASH_emits_DASH_var),cljs.core.cst$kw$ns);
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars__$1,dep,reload,opts_SINGLEQUOTE_,((function (dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_20700){
return (function (res){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Loading result:",res], 0));
} else {
}

if(cljs.core.not(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7(bound_vars__$1,ana_env,lib,cljs.core.next(deps),null,opts,cb);
} else {
var temp__4655__auto__ = (function (){var cljs_ns = cljs.analyzer.clj_ns__GT_cljs_ns(dep);
return cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.createAsIfByAssoc([dep,null]),cljs_ns,cljs_ns);
})();
if(cljs.core.truth_(temp__4655__auto__)){
var cljs_dep = temp__4655__auto__;
return cljs.js.require.cljs$core$IFn$_invoke$arity$4(bound_vars__$1,cljs_dep,opts_SINGLEQUOTE_,((function (cljs_dep,temp__4655__auto__,dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_20700){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
cljs.js.patch_alias_map(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),lib,dep,cljs_dep);

return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7(bound_vars__$1,ana_env,lib,cljs.core.next(deps),null,opts,((function (cljs_dep,temp__4655__auto__,dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_20700){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
var G__20702 = cljs.core.update.cljs$core$IFn$_invoke$arity$5(res__$2,cljs.core.cst$kw$aliased_DASH_loads,cljs.core.assoc,dep,cljs_dep);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20702) : cb.call(null,G__20702));
}
});})(cljs_dep,temp__4655__auto__,dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_20700))
);
}
});})(cljs_dep,temp__4655__auto__,dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_20700))
);
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
}
}
});})(dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_20700))
);
} else {
var G__20703 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20703) : cb.call(null,G__20703));
}
}
}finally {cljs.analyzer._STAR_cljs_dep_set_STAR_ = _STAR_cljs_dep_set_STAR_20700;
}});

cljs.js.load_deps.cljs$lang$maxFixedArity = 7;

cljs.js.analyze_deps = (function cljs$js$analyze_deps(var_args){
var G__20707 = arguments.length;
switch (G__20707) {
case 5:
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 6:
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,ana_env,lib,deps,cb){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,lib,deps,null,cb);
});

cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6 = (function (bound_vars,ana_env,lib,deps,opts,cb){
var _STAR_cljs_dep_set_STAR_20708 = cljs.analyzer._STAR_cljs_dep_set_STAR_;
cljs.analyzer._STAR_cljs_dep_set_STAR_ = cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars),lib),cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$dep_DASH_path], null),cljs.core.conj,lib);

try{var compiler = cljs.core.deref(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars));
var bound_vars__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(bound_vars,cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_);
if(!(cljs.core.every_QMARK_(((function (compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_20708){
return (function (p1__20705_SHARP_){
return !(cljs.core.contains_QMARK_(cljs.analyzer._STAR_cljs_dep_set_STAR_,p1__20705_SHARP_));
});})(compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_20708))
,deps))){
var G__20709 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(ana_env,["Circular dependency detected ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(" -> ",cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$dep_DASH_path.cljs$core$IFn$_invoke$arity$1(cljs.core.meta(cljs.analyzer._STAR_cljs_dep_set_STAR_)),cljs.core.some(cljs.analyzer._STAR_cljs_dep_set_STAR_,deps)))))].join('')));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20709) : cb.call(null,G__20709));
} else {
if(cljs.core.seq(deps)){
var dep = cljs.core.first(deps);
try{var G__20713 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$name,dep,cljs.core.cst$kw$path,cljs.js.ns__GT_relpath(dep)], null);
var G__20714 = ((function (G__20713,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_20708){
return (function (resource){
if((cljs.core.map_QMARK_(resource)) || ((resource == null))){
} else {
throw (new Error(["Assert failed: ","*load-fn* may only return a map or nil","\n","(or (map? resource) (nil? resource))"].join('')));
}

if(cljs.core.not(resource)){
var temp__4655__auto__ = (function (){var cljs_ns = cljs.analyzer.clj_ns__GT_cljs_ns(dep);
return cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.createAsIfByAssoc([dep,null]),cljs_ns,cljs_ns);
})();
if(cljs.core.truth_(temp__4655__auto__)){
var cljs_dep = temp__4655__auto__;
cljs.js.patch_alias_map(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),lib,dep,cljs_dep);

return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars__$1,ana_env,lib,cljs.core.cons(cljs_dep,cljs.core.next(deps)),opts,((function (cljs_dep,temp__4655__auto__,G__20713,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_20708){
return (function (res){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var G__20715 = cljs.core.update.cljs$core$IFn$_invoke$arity$5(res,cljs.core.cst$kw$aliased_DASH_loads,cljs.core.assoc,dep,cljs_dep);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20715) : cb.call(null,G__20715));
}
});})(cljs_dep,temp__4655__auto__,G__20713,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_20708))
);
} else {
var G__20716 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(ana_env,(function (){var G__20717 = cljs.core.cst$kw$undeclared_DASH_ns;
var G__20718 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_DASH_sym,dep,cljs.core.cst$kw$js_DASH_provide,cljs.core.name(dep)], null);
return (cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2 ? cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2(G__20717,G__20718) : cljs.analyzer.error_message.call(null,G__20717,G__20718));
})()));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20716) : cb.call(null,G__20716));
}
} else {
var map__20719 = resource;
var map__20719__$1 = ((((!((map__20719 == null)))?((((map__20719.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20719.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20719):map__20719);
var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20719__$1,cljs.core.cst$kw$name);
var lang = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20719__$1,cljs.core.cst$kw$lang);
var source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20719__$1,cljs.core.cst$kw$source);
var file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20719__$1,cljs.core.cst$kw$file);
var pred__20721 = cljs.core.keyword_identical_QMARK_;
var expr__20722 = lang;
if(cljs.core.truth_((function (){var G__20724 = cljs.core.cst$kw$clj;
var G__20725 = expr__20722;
return (pred__20721.cljs$core$IFn$_invoke$arity$2 ? pred__20721.cljs$core$IFn$_invoke$arity$2(G__20724,G__20725) : pred__20721.call(null,G__20724,G__20725));
})())){
cljs.js.pre_file_side_effects(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),name,file,opts);

var G__20726 = bound_vars__$1;
var G__20727 = source;
var G__20728 = name;
var G__20729 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$cljs_DASH_file,file);
var G__20730 = ((function (G__20726,G__20727,G__20728,G__20729,pred__20721,expr__20722,map__20719,map__20719__$1,name,lang,source,file,G__20713,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_20708){
return (function (res){
cljs.js.post_file_side_effects(file,opts);

if(cljs.core.not(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars__$1,ana_env,lib,cljs.core.next(deps),opts,cb);
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
}
});})(G__20726,G__20727,G__20728,G__20729,pred__20721,expr__20722,map__20719,map__20719__$1,name,lang,source,file,G__20713,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_20708))
;
return (cljs.js.analyze_str_STAR_.cljs$core$IFn$_invoke$arity$5 ? cljs.js.analyze_str_STAR_.cljs$core$IFn$_invoke$arity$5(G__20726,G__20727,G__20728,G__20729,G__20730) : cljs.js.analyze_str_STAR_.call(null,G__20726,G__20727,G__20728,G__20729,G__20730));
} else {
if(cljs.core.truth_((function (){var G__20731 = cljs.core.cst$kw$js;
var G__20732 = expr__20722;
return (pred__20721.cljs$core$IFn$_invoke$arity$2 ? pred__20721.cljs$core$IFn$_invoke$arity$2(G__20731,G__20732) : pred__20721.call(null,G__20731,G__20732));
})())){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars__$1,ana_env,lib,cljs.core.next(deps),opts,cb);
} else {
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(ana_env,["Invalid :lang specified ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(lang),", only :clj or :js allowed"].join('')));
}
}
}
});})(G__20713,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_20708))
;
var fexpr__20712 = cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
return (fexpr__20712.cljs$core$IFn$_invoke$arity$2 ? fexpr__20712.cljs$core$IFn$_invoke$arity$2(G__20713,G__20714) : fexpr__20712.call(null,G__20713,G__20714));
}catch (e20710){var cause = e20710;
var G__20711 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,["Could not analyze dep ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(dep)].join(''),cause));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20711) : cb.call(null,G__20711));
}} else {
var G__20733 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20733) : cb.call(null,G__20733));
}
}
}finally {cljs.analyzer._STAR_cljs_dep_set_STAR_ = _STAR_cljs_dep_set_STAR_20708;
}});

cljs.js.analyze_deps.cljs$lang$maxFixedArity = 6;

cljs.js.load_macros = (function cljs$js$load_macros(bound_vars,k,macros,lib,reload,reloads,opts,cb){
if(cljs.core.seq(macros)){
var nsym = cljs.core.first(cljs.core.vals(macros));
var k__$1 = (function (){var or__7668__auto__ = (reload.cljs$core$IFn$_invoke$arity$1 ? reload.cljs$core$IFn$_invoke$arity$1(k) : reload.call(null,k));
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
var or__7668__auto____$1 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(reloads,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,nsym], null));
if(cljs.core.truth_(or__7668__auto____$1)){
return or__7668__auto____$1;
} else {
var or__7668__auto____$2 = (function (){var and__7656__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(nsym,cljs.core.name);
if(and__7656__auto__){
var and__7656__auto____$1 = cljs.core.cst$kw$_STAR_reload_DASH_macros_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
if(cljs.core.truth_(and__7656__auto____$1)){
return cljs.core.cst$kw$reload;
} else {
return and__7656__auto____$1;
}
} else {
return and__7656__auto__;
}
})();
if(cljs.core.truth_(or__7668__auto____$2)){
return or__7668__auto____$2;
} else {
return null;
}
}
}
})();
var opts_SINGLEQUOTE_ = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$macros_DASH_ns,true),cljs.core.cst$kw$context),cljs.core.cst$kw$def_DASH_emits_DASH_var),cljs.core.cst$kw$ns),cljs.core.cst$kw$emit_DASH_constants,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$optimize_DASH_constants], 0));
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,nsym,k__$1,opts_SINGLEQUOTE_,((function (nsym,k__$1,opts_SINGLEQUOTE_){
return (function (res){
if(cljs.core.not(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
var G__20735 = bound_vars;
var G__20736 = k__$1;
var G__20737 = cljs.core.next(macros);
var G__20738 = lib;
var G__20739 = reload;
var G__20740 = reloads;
var G__20741 = opts;
var G__20742 = cb;
return (cljs.js.load_macros.cljs$core$IFn$_invoke$arity$8 ? cljs.js.load_macros.cljs$core$IFn$_invoke$arity$8(G__20735,G__20736,G__20737,G__20738,G__20739,G__20740,G__20741,G__20742) : cljs.js.load_macros.call(null,G__20735,G__20736,G__20737,G__20738,G__20739,G__20740,G__20741,G__20742));
} else {
var temp__4655__auto__ = (function (){var cljs_ns = cljs.analyzer.clj_ns__GT_cljs_ns(nsym);
return cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.createAsIfByAssoc([nsym,null]),cljs_ns,cljs_ns);
})();
if(cljs.core.truth_(temp__4655__auto__)){
var cljs_dep = temp__4655__auto__;
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,cljs_dep,k__$1,opts_SINGLEQUOTE_,((function (cljs_dep,temp__4655__auto__,nsym,k__$1,opts_SINGLEQUOTE_){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
cljs.js.patch_alias_map(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars),lib,nsym,cljs_dep);

var G__20743 = bound_vars;
var G__20744 = k__$1;
var G__20745 = cljs.core.next(macros);
var G__20746 = lib;
var G__20747 = reload;
var G__20748 = reloads;
var G__20749 = opts;
var G__20750 = ((function (G__20743,G__20744,G__20745,G__20746,G__20747,G__20748,G__20749,cljs_dep,temp__4655__auto__,nsym,k__$1,opts_SINGLEQUOTE_){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
var G__20751 = cljs.core.update.cljs$core$IFn$_invoke$arity$5(res__$2,cljs.core.cst$kw$aliased_DASH_loads,cljs.core.assoc,nsym,cljs_dep);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20751) : cb.call(null,G__20751));
}
});})(G__20743,G__20744,G__20745,G__20746,G__20747,G__20748,G__20749,cljs_dep,temp__4655__auto__,nsym,k__$1,opts_SINGLEQUOTE_))
;
return (cljs.js.load_macros.cljs$core$IFn$_invoke$arity$8 ? cljs.js.load_macros.cljs$core$IFn$_invoke$arity$8(G__20743,G__20744,G__20745,G__20746,G__20747,G__20748,G__20749,G__20750) : cljs.js.load_macros.call(null,G__20743,G__20744,G__20745,G__20746,G__20747,G__20748,G__20749,G__20750));
}
});})(cljs_dep,temp__4655__auto__,nsym,k__$1,opts_SINGLEQUOTE_))
);
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
}
}
});})(nsym,k__$1,opts_SINGLEQUOTE_))
);
} else {
var G__20752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20752) : cb.call(null,G__20752));
}
});
cljs.js.rewrite_ns_ast = (function cljs$js$rewrite_ns_ast(var_args){
var G__20756 = arguments.length;
switch (G__20756) {
case 2:
return cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$2 = (function (ast,smap){
return cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$3(ast,smap,false);
});

cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$3 = (function (ast,smap,macros_QMARK_){
var vec__20757 = (cljs.core.truth_(macros_QMARK_)?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$use_DASH_macros,cljs.core.cst$kw$require_DASH_macros,cljs.core.cst$kw$rename_DASH_macros], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$uses,cljs.core.cst$kw$requires,cljs.core.cst$kw$renames], null));
var uk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20757,(0),null);
var rk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20757,(1),null);
var renk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20757,(2),null);
var rewrite_renames = ((function (vec__20757,uk,rk,renk){
return (function (m){
if(cljs.core.truth_(m)){
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__20757,uk,rk,renk){
return (function (acc,p__20760){
var vec__20761 = p__20760;
var renamed = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20761,(0),null);
var qualified_sym = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20761,(1),null);
var entry = vec__20761;
var from = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace(qualified_sym));
var to = cljs.core.get.cljs$core$IFn$_invoke$arity$2(smap,from);
if(!((to == null))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,renamed,cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(to)].join(''),cljs.core.name(qualified_sym)));
} else {
return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([acc,entry], 0));
}
});})(vec__20757,uk,rk,renk))
,cljs.core.PersistentArrayMap.EMPTY,m);
} else {
return null;
}
});})(vec__20757,uk,rk,renk))
;
var rewrite_deps = ((function (vec__20757,uk,rk,renk,rewrite_renames){
return (function (deps){
return cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (vec__20757,uk,rk,renk,rewrite_renames){
return (function (dep){
var temp__4655__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(smap,dep);
if(cljs.core.truth_(temp__4655__auto__)){
var new_dep = temp__4655__auto__;
return new_dep;
} else {
return dep;
}
});})(vec__20757,uk,rk,renk,rewrite_renames))
),deps);
});})(vec__20757,uk,rk,renk,rewrite_renames))
;
return cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(ast,uk,((function (vec__20757,uk,rk,renk,rewrite_renames,rewrite_deps){
return (function (p1__20753_SHARP_){
return clojure.walk.postwalk_replace(smap,p1__20753_SHARP_);
});})(vec__20757,uk,rk,renk,rewrite_renames,rewrite_deps))
),rk,((function (vec__20757,uk,rk,renk,rewrite_renames,rewrite_deps){
return (function (p1__20754_SHARP_){
return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([smap,clojure.walk.postwalk_replace(smap,p1__20754_SHARP_)], 0));
});})(vec__20757,uk,rk,renk,rewrite_renames,rewrite_deps))
),renk,rewrite_renames),cljs.core.cst$kw$deps,rewrite_deps);
});

cljs.js.rewrite_ns_ast.cljs$lang$maxFixedArity = 3;

cljs.js.check_macro_autoload_inferring_missing = (function cljs$js$check_macro_autoload_inferring_missing(p__20765,cenv){
var map__20766 = p__20765;
var map__20766__$1 = ((((!((map__20766 == null)))?((((map__20766.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20766.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20766):map__20766);
var ast = map__20766__$1;
var requires = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20766__$1,cljs.core.cst$kw$requires);
var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20766__$1,cljs.core.cst$kw$name);
var namespaces = cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(cenv));
var missing_require_macros = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$1(((function (namespaces,map__20766,map__20766__$1,ast,requires,name){
return (function (p__20768){
var vec__20769 = p__20768;
var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20769,(0),null);
var full_ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20769,(1),null);
var map__20772 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(namespaces,full_ns);
var map__20772__$1 = ((((!((map__20772 == null)))?((((map__20772.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20772.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20772):map__20772);
var use_macros = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20772__$1,cljs.core.cst$kw$use_DASH_macros);
var require_macros = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20772__$1,cljs.core.cst$kw$require_DASH_macros);
var or__7668__auto__ = cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([full_ns]),cljs.core.vals(use_macros));
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([full_ns]),cljs.core.vals(require_macros));
}
});})(namespaces,map__20766,map__20766__$1,ast,requires,name))
),requires);
var ast_SINGLEQUOTE_ = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(ast,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$require_DASH_macros], null),cljs.core.merge,missing_require_macros);
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(cenv,cljs.core.update_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,name,cljs.core.cst$kw$require_DASH_macros], null),cljs.core.merge,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([missing_require_macros], 0));

return ast_SINGLEQUOTE_;
});
cljs.js.ns_side_effects = (function cljs$js$ns_side_effects(var_args){
var G__20777 = arguments.length;
switch (G__20777) {
case 5:
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 6:
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,ana_env,ast,opts,cb){
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6(false,bound_vars,ana_env,ast,opts,cb);
});

cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6 = (function (load,bound_vars,ana_env,p__20778,opts,cb){
var map__20779 = p__20778;
var map__20779__$1 = ((((!((map__20779 == null)))?((((map__20779.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20779.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20779):map__20779);
var ast = map__20779__$1;
var op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20779__$1,cljs.core.cst$kw$op);
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Namespace side effects for",cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
} else {
}

if(cljs.core.truth_((function (){var fexpr__20781 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_STAR_,null,cljs.core.cst$kw$ns,null], null), null);
return (fexpr__20781.cljs$core$IFn$_invoke$arity$1 ? fexpr__20781.cljs$core$IFn$_invoke$arity$1(op) : fexpr__20781.call(null,op));
})())){
var check_uses_and_load_macros = ((function (map__20779,map__20779__$1,ast,op){
return (function cljs$js$check_uses_and_load_macros(res,rewritten_ast){
var env = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
var map__20799 = rewritten_ast;
var map__20799__$1 = ((((!((map__20799 == null)))?((((map__20799.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20799.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20799):map__20799);
var uses = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20799__$1,cljs.core.cst$kw$uses);
var use_macros = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20799__$1,cljs.core.cst$kw$use_DASH_macros);
var reload = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20799__$1,cljs.core.cst$kw$reload);
var reloads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20799__$1,cljs.core.cst$kw$reloads);
var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20799__$1,cljs.core.cst$kw$name);
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
if(cljs.core.truth_(cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars))){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Processing :use-macros for",name], 0));
} else {
}

return cljs.js.load_macros(bound_vars,cljs.core.cst$kw$use_DASH_macros,use_macros,name,reload,reloads,opts,((function (env,map__20799,map__20799__$1,uses,use_macros,reload,reloads,name,map__20779,map__20779__$1,ast,op){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var map__20801 = cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$3(rewritten_ast,cljs.core.cst$kw$aliased_DASH_loads.cljs$core$IFn$_invoke$arity$1(res__$1),true);
var map__20801__$1 = ((((!((map__20801 == null)))?((((map__20801.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20801.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20801):map__20801);
var rewritten_ast__$1 = map__20801__$1;
var require_macros = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20801__$1,cljs.core.cst$kw$require_DASH_macros);
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Processing :require-macros for",cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
} else {
}

return cljs.js.load_macros(bound_vars,cljs.core.cst$kw$require_DASH_macros,require_macros,name,reload,reloads,opts,((function (map__20801,map__20801__$1,rewritten_ast__$1,require_macros,env,map__20799,map__20799__$1,uses,use_macros,reload,reloads,name,map__20779,map__20779__$1,ast,op){
return (function (res_SINGLEQUOTE_){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res_SINGLEQUOTE_))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res_SINGLEQUOTE_) : cb.call(null,res_SINGLEQUOTE_));
} else {
var map__20803 = cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$3(rewritten_ast__$1,cljs.core.cst$kw$aliased_DASH_loads.cljs$core$IFn$_invoke$arity$1(res__$1),true);
var map__20803__$1 = ((((!((map__20803 == null)))?((((map__20803.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20803.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20803):map__20803);
var rewritten_ast__$2 = map__20803__$1;
var use_macros__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20803__$1,cljs.core.cst$kw$use_DASH_macros);
var res_SINGLEQUOTE___$1 = (function (){try{if(cljs.core.seq(use_macros__$1)){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Checking :use-macros for",cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
} else {
}

var _STAR_analyze_deps_STAR_20806_20820 = cljs.analyzer._STAR_analyze_deps_STAR_;
var _STAR_compiler_STAR_20807_20821 = cljs.env._STAR_compiler_STAR_;
cljs.analyzer._STAR_analyze_deps_STAR_ = cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);

cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);

try{cljs.analyzer.check_use_macros.cljs$core$IFn$_invoke$arity$2(use_macros__$1,env);
}finally {cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_20807_20821;

cljs.analyzer._STAR_analyze_deps_STAR_ = _STAR_analyze_deps_STAR_20806_20820;
}} else {
}

return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
}catch (e20805){var cause = e20805;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,["Could not parse ns form ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast))].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res_SINGLEQUOTE___$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res_SINGLEQUOTE___$1) : cb.call(null,res_SINGLEQUOTE___$1));
} else {
try{var _STAR_analyze_deps_STAR_20810 = cljs.analyzer._STAR_analyze_deps_STAR_;
var _STAR_compiler_STAR_20811 = cljs.env._STAR_compiler_STAR_;
cljs.analyzer._STAR_analyze_deps_STAR_ = cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);

cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);

try{var ast_SINGLEQUOTE_ = cljs.js.check_macro_autoload_inferring_missing(cljs.analyzer.check_rename_macros_inferring_missing(cljs.analyzer.check_use_macros_inferring_missing(rewritten_ast__$2,env),env),env);
var G__20812 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,ast_SINGLEQUOTE_], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20812) : cb.call(null,G__20812));
}finally {cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_20811;

cljs.analyzer._STAR_analyze_deps_STAR_ = _STAR_analyze_deps_STAR_20810;
}}catch (e20808){var cause = e20808;
var G__20809 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,["Could not parse ns form ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast))].join(''),cause));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20809) : cb.call(null,G__20809));
}}
}
});})(map__20801,map__20801__$1,rewritten_ast__$1,require_macros,env,map__20799,map__20799__$1,uses,use_macros,reload,reloads,name,map__20779,map__20779__$1,ast,op))
);
}
});})(env,map__20799,map__20799__$1,uses,use_macros,reload,reloads,name,map__20779,map__20779__$1,ast,op))
);
} else {
try{if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Checking uses"], 0));
} else {
}

cljs.analyzer.check_uses((cljs.core.truth_((function (){var and__7656__auto__ = cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
if(cljs.core.truth_(and__7656__auto__)){
return cljs.core.seq(uses);
} else {
return and__7656__auto__;
}
})())?cljs.analyzer.missing_uses(uses,env):null),env);

var G__20815 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,ast], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20815) : cb.call(null,G__20815));
}catch (e20813){var cause = e20813;
var G__20814 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,["Could not parse ns form ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast))].join(''),cause));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20814) : cb.call(null,G__20814));
}}
}
});})(map__20779,map__20779__$1,ast,op))
;
if(cljs.core.truth_((function (){var and__7656__auto__ = load;
if(cljs.core.truth_(and__7656__auto__)){
return cljs.core.seq(cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast));
} else {
return and__7656__auto__;
}
})())){
var map__20816 = ast;
var map__20816__$1 = ((((!((map__20816 == null)))?((((map__20816.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20816.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20816):map__20816);
var reload = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20816__$1,cljs.core.cst$kw$reload);
var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20816__$1,cljs.core.cst$kw$name);
var deps = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20816__$1,cljs.core.cst$kw$deps);
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7(bound_vars,ana_env,name,deps,(function (){var or__7668__auto__ = cljs.core.cst$kw$require.cljs$core$IFn$_invoke$arity$1(reload);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.core.cst$kw$use.cljs$core$IFn$_invoke$arity$1(reload);
}
})(),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$macros_DASH_ns),((function (map__20816,map__20816__$1,reload,name,deps,map__20779,map__20779__$1,ast,op){
return (function (p1__20774_SHARP_){
return check_uses_and_load_macros(p1__20774_SHARP_,cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$2(ast,cljs.core.cst$kw$aliased_DASH_loads.cljs$core$IFn$_invoke$arity$1(p1__20774_SHARP_)));
});})(map__20816,map__20816__$1,reload,name,deps,map__20779,map__20779__$1,ast,op))
);
} else {
if(cljs.core.truth_((function (){var and__7656__auto__ = cljs.core.not(load);
if(and__7656__auto__){
var and__7656__auto____$1 = cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
if(cljs.core.truth_(and__7656__auto____$1)){
return cljs.core.seq(cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast));
} else {
return and__7656__auto____$1;
}
} else {
return and__7656__auto__;
}
})())){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast),cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$macros_DASH_ns),((function (map__20779,map__20779__$1,ast,op){
return (function (p1__20775_SHARP_){
return check_uses_and_load_macros(p1__20775_SHARP_,cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$2(ast,cljs.core.cst$kw$aliased_DASH_loads.cljs$core$IFn$_invoke$arity$1(p1__20775_SHARP_)));
});})(map__20779,map__20779__$1,ast,op))
);
} else {
return check_uses_and_load_macros(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null),ast);

}
}
} else {
var G__20818 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,ast], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20818) : cb.call(null,G__20818));
}
});

cljs.js.ns_side_effects.cljs$lang$maxFixedArity = 6;

cljs.js.node_side_effects = (function cljs$js$node_side_effects(bound_vars,sb,deps,ns_name,emit_nil_result_QMARK_){
var seq__20822_20830 = cljs.core.seq(deps);
var chunk__20823_20831 = null;
var count__20824_20832 = (0);
var i__20825_20833 = (0);
while(true){
if((i__20825_20833 < count__20824_20832)){
var dep_20834 = chunk__20823_20831.cljs$core$IIndexed$_nth$arity$2(null,i__20825_20833);
sb.append((function (){var sb__8697__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_20826_20835 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_20827_20836 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (seq__20822_20830,chunk__20823_20831,count__20824_20832,i__20825_20833,_STAR_print_newline_STAR_20826_20835,_STAR_print_fn_STAR_20827_20836,sb__8697__auto__,dep_20834){
return (function (x__8698__auto__){
return sb__8697__auto__.append(x__8698__auto__);
});})(seq__20822_20830,chunk__20823_20831,count__20824_20832,i__20825_20833,_STAR_print_newline_STAR_20826_20835,_STAR_print_fn_STAR_20827_20836,sb__8697__auto__,dep_20834))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.munge(ns_name),".",cljs.analyzer.munge_node_lib(dep_20834)," = require('",dep_20834,"');"], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_20827_20836;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_20826_20835;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8697__auto__)].join('');
})());

var G__20837 = seq__20822_20830;
var G__20838 = chunk__20823_20831;
var G__20839 = count__20824_20832;
var G__20840 = (i__20825_20833 + (1));
seq__20822_20830 = G__20837;
chunk__20823_20831 = G__20838;
count__20824_20832 = G__20839;
i__20825_20833 = G__20840;
continue;
} else {
var temp__4657__auto___20841 = cljs.core.seq(seq__20822_20830);
if(temp__4657__auto___20841){
var seq__20822_20842__$1 = temp__4657__auto___20841;
if(cljs.core.chunked_seq_QMARK_(seq__20822_20842__$1)){
var c__8507__auto___20843 = cljs.core.chunk_first(seq__20822_20842__$1);
var G__20844 = cljs.core.chunk_rest(seq__20822_20842__$1);
var G__20845 = c__8507__auto___20843;
var G__20846 = cljs.core.count(c__8507__auto___20843);
var G__20847 = (0);
seq__20822_20830 = G__20844;
chunk__20823_20831 = G__20845;
count__20824_20832 = G__20846;
i__20825_20833 = G__20847;
continue;
} else {
var dep_20848 = cljs.core.first(seq__20822_20842__$1);
sb.append((function (){var sb__8697__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_20828_20849 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_20829_20850 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (seq__20822_20830,chunk__20823_20831,count__20824_20832,i__20825_20833,_STAR_print_newline_STAR_20828_20849,_STAR_print_fn_STAR_20829_20850,sb__8697__auto__,dep_20848,seq__20822_20842__$1,temp__4657__auto___20841){
return (function (x__8698__auto__){
return sb__8697__auto__.append(x__8698__auto__);
});})(seq__20822_20830,chunk__20823_20831,count__20824_20832,i__20825_20833,_STAR_print_newline_STAR_20828_20849,_STAR_print_fn_STAR_20829_20850,sb__8697__auto__,dep_20848,seq__20822_20842__$1,temp__4657__auto___20841))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.munge(ns_name),".",cljs.analyzer.munge_node_lib(dep_20848)," = require('",dep_20848,"');"], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_20829_20850;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_20828_20849;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8697__auto__)].join('');
})());

var G__20851 = cljs.core.next(seq__20822_20842__$1);
var G__20852 = null;
var G__20853 = (0);
var G__20854 = (0);
seq__20822_20830 = G__20851;
chunk__20823_20831 = G__20852;
count__20824_20832 = G__20853;
i__20825_20833 = G__20854;
continue;
}
} else {
}
}
break;
}

if(cljs.core.truth_((function (){var and__7656__auto__ = cljs.core.seq(deps);
if(and__7656__auto__){
return emit_nil_result_QMARK_;
} else {
return and__7656__auto__;
}
})())){
return sb.append("null;");
} else {
return null;
}
});
cljs.js.global_exports_side_effects = (function cljs$js$global_exports_side_effects(bound_vars,sb,deps,ns_name,emit_nil_result_QMARK_){
var map__20855 = cljs.core.deref(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars));
var map__20855__$1 = ((((!((map__20855 == null)))?((((map__20855.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20855.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20855):map__20855);
var js_dependency_index = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20855__$1,cljs.core.cst$kw$js_DASH_dependency_DASH_index);
var seq__20857_20869 = cljs.core.seq(deps);
var chunk__20858_20870 = null;
var count__20859_20871 = (0);
var i__20860_20872 = (0);
while(true){
if((i__20860_20872 < count__20859_20871)){
var dep_20873 = chunk__20858_20870.cljs$core$IIndexed$_nth$arity$2(null,i__20860_20872);
var map__20861_20874 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(js_dependency_index,cljs.core.name(dep_20873));
var map__20861_20875__$1 = ((((!((map__20861_20874 == null)))?((((map__20861_20874.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20861_20874.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20861_20874):map__20861_20874);
var global_exports_20876 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20861_20875__$1,cljs.core.cst$kw$global_DASH_exports);
sb.append((function (){var sb__8697__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_20863_20877 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_20864_20878 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (seq__20857_20869,chunk__20858_20870,count__20859_20871,i__20860_20872,_STAR_print_newline_STAR_20863_20877,_STAR_print_fn_STAR_20864_20878,sb__8697__auto__,map__20861_20874,map__20861_20875__$1,global_exports_20876,dep_20873,map__20855,map__20855__$1,js_dependency_index){
return (function (x__8698__auto__){
return sb__8697__auto__.append(x__8698__auto__);
});})(seq__20857_20869,chunk__20858_20870,count__20859_20871,i__20860_20872,_STAR_print_newline_STAR_20863_20877,_STAR_print_fn_STAR_20864_20878,sb__8697__auto__,map__20861_20874,map__20861_20875__$1,global_exports_20876,dep_20873,map__20855,map__20855__$1,js_dependency_index))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.munge(ns_name),".",cljs.analyzer.munge_global_export(dep_20873)," = goog.global.",cljs.core.get.cljs$core$IFn$_invoke$arity$2(global_exports_20876,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(dep_20873)),";"], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_20864_20878;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_20863_20877;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8697__auto__)].join('');
})());

var G__20879 = seq__20857_20869;
var G__20880 = chunk__20858_20870;
var G__20881 = count__20859_20871;
var G__20882 = (i__20860_20872 + (1));
seq__20857_20869 = G__20879;
chunk__20858_20870 = G__20880;
count__20859_20871 = G__20881;
i__20860_20872 = G__20882;
continue;
} else {
var temp__4657__auto___20883 = cljs.core.seq(seq__20857_20869);
if(temp__4657__auto___20883){
var seq__20857_20884__$1 = temp__4657__auto___20883;
if(cljs.core.chunked_seq_QMARK_(seq__20857_20884__$1)){
var c__8507__auto___20885 = cljs.core.chunk_first(seq__20857_20884__$1);
var G__20886 = cljs.core.chunk_rest(seq__20857_20884__$1);
var G__20887 = c__8507__auto___20885;
var G__20888 = cljs.core.count(c__8507__auto___20885);
var G__20889 = (0);
seq__20857_20869 = G__20886;
chunk__20858_20870 = G__20887;
count__20859_20871 = G__20888;
i__20860_20872 = G__20889;
continue;
} else {
var dep_20890 = cljs.core.first(seq__20857_20884__$1);
var map__20865_20891 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(js_dependency_index,cljs.core.name(dep_20890));
var map__20865_20892__$1 = ((((!((map__20865_20891 == null)))?((((map__20865_20891.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20865_20891.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20865_20891):map__20865_20891);
var global_exports_20893 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20865_20892__$1,cljs.core.cst$kw$global_DASH_exports);
sb.append((function (){var sb__8697__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_20867_20894 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_20868_20895 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (seq__20857_20869,chunk__20858_20870,count__20859_20871,i__20860_20872,_STAR_print_newline_STAR_20867_20894,_STAR_print_fn_STAR_20868_20895,sb__8697__auto__,map__20865_20891,map__20865_20892__$1,global_exports_20893,dep_20890,seq__20857_20884__$1,temp__4657__auto___20883,map__20855,map__20855__$1,js_dependency_index){
return (function (x__8698__auto__){
return sb__8697__auto__.append(x__8698__auto__);
});})(seq__20857_20869,chunk__20858_20870,count__20859_20871,i__20860_20872,_STAR_print_newline_STAR_20867_20894,_STAR_print_fn_STAR_20868_20895,sb__8697__auto__,map__20865_20891,map__20865_20892__$1,global_exports_20893,dep_20890,seq__20857_20884__$1,temp__4657__auto___20883,map__20855,map__20855__$1,js_dependency_index))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.munge(ns_name),".",cljs.analyzer.munge_global_export(dep_20890)," = goog.global.",cljs.core.get.cljs$core$IFn$_invoke$arity$2(global_exports_20893,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(dep_20890)),";"], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_20868_20895;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_20867_20894;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8697__auto__)].join('');
})());

var G__20896 = cljs.core.next(seq__20857_20884__$1);
var G__20897 = null;
var G__20898 = (0);
var G__20899 = (0);
seq__20857_20869 = G__20896;
chunk__20858_20870 = G__20897;
count__20859_20871 = G__20898;
i__20860_20872 = G__20899;
continue;
}
} else {
}
}
break;
}

if(cljs.core.truth_((function (){var and__7656__auto__ = cljs.core.seq(deps);
if(and__7656__auto__){
return emit_nil_result_QMARK_;
} else {
return and__7656__auto__;
}
})())){
return sb.append("null;");
} else {
return null;
}
});
cljs.js.analyze_str_STAR_ = (function cljs$js$analyze_str_STAR_(bound_vars,source,name,opts,cb){
var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(source,(1),name);
var eof = {};
var aenv = cljs.analyzer.empty_env();
var the_ns = (function (){var or__7668__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__20902 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__20902,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__20902;
}
})();
var fexpr__20921 = ((function (rdr,eof,aenv,the_ns,bound_vars__$1){
return (function cljs$js$analyze_str_STAR__$_analyze_loop(last_ast,ns){
while(true){
var _STAR_compiler_STAR_20922 = cljs.env._STAR_compiler_STAR_;
var _STAR_cljs_ns_STAR_20923 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_checked_arrays_STAR_20924 = cljs.analyzer._STAR_checked_arrays_STAR_;
var _STAR_cljs_static_fns_STAR_20925 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_fn_invoke_direct_STAR_20926 = cljs.analyzer._STAR_fn_invoke_direct_STAR_;
var _STAR_ns_STAR_20927 = cljs.core._STAR_ns_STAR_;
var _STAR_passes_STAR_20928 = cljs.analyzer._STAR_passes_STAR_;
var _STAR_alias_map_STAR_20929 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_20930 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol20931 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_20932 = cljs.compiler._STAR_source_map_data_STAR_;
var _STAR_cljs_file_STAR_20933 = cljs.analyzer._STAR_cljs_file_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = ns;

cljs.analyzer._STAR_checked_arrays_STAR_ = cljs.core.cst$kw$checked_DASH_arrays.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = (function (){var and__7656__auto__ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(and__7656__auto__)){
return cljs.core.cst$kw$fn_DASH_invoke_DASH_direct.cljs$core$IFn$_invoke$arity$1(opts);
} else {
return and__7656__auto__;
}
})();

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(ns);

cljs.analyzer._STAR_passes_STAR_ = cljs.core.cst$kw$_STAR_passes_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_file_STAR_ = cljs.core.cst$kw$cljs_DASH_file.cljs$core$IFn$_invoke$arity$1(opts);

try{var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.js.read(eof,rdr)], null);
}catch (e20934){var cause = e20934;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,["Could not analyze ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var form = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
if(!((eof === form))){
var aenv__$1 = (function (){var G__20935 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_ns_STAR_));
var G__20935__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__20935,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__20935);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__20935__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__20935__$1;
}
})();
var res__$1 = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e20936){var cause = e20936;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,["Could not analyze ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$1);
if(cljs.core.truth_((function (){var G__20938 = cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast);
var fexpr__20937 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_STAR_,null,cljs.core.cst$kw$ns,null], null), null);
return (fexpr__20937.cljs$core$IFn$_invoke$arity$1 ? fexpr__20937.cljs$core$IFn$_invoke$arity$1(G__20938) : fexpr__20937.call(null,G__20938));
})())){
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5(bound_vars__$1,aenv__$1,ast,opts,((function (last_ast,ns,ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_20922,_STAR_cljs_ns_STAR_20923,_STAR_checked_arrays_STAR_20924,_STAR_cljs_static_fns_STAR_20925,_STAR_fn_invoke_direct_STAR_20926,_STAR_ns_STAR_20927,_STAR_passes_STAR_20928,_STAR_alias_map_STAR_20929,_STAR_data_readers_STAR_20930,resolve_symbol20931,_STAR_source_map_data_STAR_20932,_STAR_cljs_file_STAR_20933,rdr,eof,aenv,the_ns,bound_vars__$1){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
return cljs$js$analyze_str_STAR__$_analyze_loop(ast,cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast));
}
});})(last_ast,ns,ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_20922,_STAR_cljs_ns_STAR_20923,_STAR_checked_arrays_STAR_20924,_STAR_cljs_static_fns_STAR_20925,_STAR_fn_invoke_direct_STAR_20926,_STAR_ns_STAR_20927,_STAR_passes_STAR_20928,_STAR_alias_map_STAR_20929,_STAR_data_readers_STAR_20930,resolve_symbol20931,_STAR_source_map_data_STAR_20932,_STAR_cljs_file_STAR_20933,rdr,eof,aenv,the_ns,bound_vars__$1))
);
} else {
var G__20940 = ast;
var G__20941 = ns;
last_ast = G__20940;
ns = G__20941;
continue;
}
}
} else {
var G__20939 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,last_ast], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20939) : cb.call(null,G__20939));
}
}
}finally {cljs.analyzer._STAR_cljs_file_STAR_ = _STAR_cljs_file_STAR_20933;

cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_20932;

cljs.tools.reader.resolve_symbol = resolve_symbol20931;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_20930;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_20929;

cljs.analyzer._STAR_passes_STAR_ = _STAR_passes_STAR_20928;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_20927;

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = _STAR_fn_invoke_direct_STAR_20926;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_20925;

cljs.analyzer._STAR_checked_arrays_STAR_ = _STAR_checked_arrays_STAR_20924;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_20923;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_20922;
}break;
}
});})(rdr,eof,aenv,the_ns,bound_vars__$1))
;
return fexpr__20921(null,the_ns);
});
/**
 * Analyze ClojureScript source. The compiler state will be populated with
 * the results of analyzes. The parameters:
 * 
 * state (atom)
 *   the compiler state
 * 
 * source (string)
 *   the ClojureScript source
 * 
 * name (symbol or string)
 *   optional, the name of the source
 * 
 * opts (map)
 *   compilation options.
 * 
 *    :eval             - eval function to invoke, see *eval-fn*
 *    :load             - library resolution function, see *load-fn*
 *    :source-map       - set to true to generate inline source map information
 *    :def-emits-var    - sets whether def (and derived) forms return either a Var
 *                        (if set to true) or the def init value (if false).
 *                        Defaults to false.
 *    :checked-arrays   - if :warn or :error, checks inferred types and values passed
 *                        to aget/aset. Logs for incorrect values if :warn, throws if
 *                        :error. Defaults to false.
 *    :static-fns       - employ static dispatch to specific function arities in
 *                        emitted JavaScript, as opposed to making use of the
 *                        `call` construct. Defaults to false.
 *    :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for
 *                        unknown functions, but instead direct invokes via
 *                        `f(a0,a1...)`. Defaults to `false`.
 *    :target           - use `:nodejs` if targeting Node.js. Takes no other options
 *                        at the moment.
 *    :ns               - optional, the namespace in which to evaluate the source.
 *    :verbose          - optional, emit details from compiler activity. Defaults to
 *                        false.
 *    :context          - optional, sets the context for the source. Possible values
 *                        are `:expr`, `:statement` and `:return`. Defaults to
 *                        `:expr`.
 * 
 * cb (function)
 *   callback, will be invoked with a map. If successful the map will contain
 *   a key :value, the actual value is not meaningful. If unsuccessful the
 *   map will contain a key :error with an ex-info instance describing the cause
 *   of failure.
 */
cljs.js.analyze_str = (function cljs$js$analyze_str(var_args){
var G__20943 = arguments.length;
switch (G__20943) {
case 3:
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$3 = (function (state,source,cb){
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$4(state,source,null,cb);
});

cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$4 = (function (state,source,name,cb){
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$5(state,source,name,null,cb);
});

cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$5 = (function (state,source,name,opts,cb){
if(cljs.core.truth_(cljs.js.atom_QMARK_(state))){
} else {
throw (new Error("Assert failed: (atom? state)"));
}

if(typeof source === 'string'){
} else {
throw (new Error("Assert failed: (string? source)"));
}

if(cljs.core.truth_(cljs.js.valid_name_QMARK_(name))){
} else {
throw (new Error("Assert failed: (valid-name? name)"));
}

if(cljs.core.truth_(cljs.js.valid_opts_QMARK_(opts))){
} else {
throw (new Error("Assert failed: (valid-opts? opts)"));
}

if(cljs.core.fn_QMARK_(cb)){
} else {
throw (new Error("Assert failed: (fn? cb)"));
}

return cljs.js.analyze_str_STAR_(new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_passes_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$passes.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.analyzer._STAR_passes_STAR_;
}
})(),cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_,cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),source,name,opts,cb);
});

cljs.js.analyze_str.cljs$lang$maxFixedArity = 5;

cljs.js.eval_STAR_ = (function cljs$js$eval_STAR_(bound_vars,form,opts,cb){
var the_ns = (function (){var or__7668__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__20945 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__20945,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__20945;
}
})();
var _STAR_compiler_STAR_20946 = cljs.env._STAR_compiler_STAR_;
var _STAR_eval_fn_STAR_20947 = cljs.js._STAR_eval_fn_STAR_;
var _STAR_cljs_ns_STAR_20948 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_checked_arrays_STAR_20949 = cljs.analyzer._STAR_checked_arrays_STAR_;
var _STAR_cljs_static_fns_STAR_20950 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_fn_invoke_direct_STAR_20951 = cljs.analyzer._STAR_fn_invoke_direct_STAR_;
var _STAR_ns_STAR_20952 = cljs.core._STAR_ns_STAR_;
var _STAR_alias_map_STAR_20953 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_20954 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol20955 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_20956 = cljs.compiler._STAR_source_map_data_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.js._STAR_eval_fn_STAR_ = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_checked_arrays_STAR_ = cljs.core.cst$kw$checked_DASH_arrays.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = (function (){var and__7656__auto__ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(and__7656__auto__)){
return cljs.core.cst$kw$fn_DASH_invoke_DASH_direct.cljs$core$IFn$_invoke$arity$1(opts);
} else {
return and__7656__auto__;
}
})();

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1));

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

try{var aenv = cljs.analyzer.empty_env();
var aenv__$1 = (function (){var G__20957 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_ns_STAR_));
var G__20957__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__20957,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__20957);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__20957__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__20957__$1;
}
})();
var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e20958){var cause = e20958;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,["Could not eval ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(form)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
var vec__20959 = ((cljs.core.keyword_identical_QMARK_(cljs.core.cst$kw$target.cljs$core$IFn$_invoke$arity$1(opts),cljs.core.cst$kw$nodejs))?(function (){var map__20962 = cljs.core.group_by(cljs.analyzer.node_module_dep_QMARK_,cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast));
var map__20962__$1 = ((((!((map__20962 == null)))?((((map__20962.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20962.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20962):map__20962);
var node_libs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20962__$1,true);
var libs_to_load = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20962__$1,false);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node_libs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ast,cljs.core.cst$kw$deps,libs_to_load)], null);
})():new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,ast], null));
var node_deps = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20959,(0),null);
var ast__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20959,(1),null);
if(cljs.core.truth_((function (){var G__20965 = cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast__$1);
var fexpr__20964 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_STAR_,null,cljs.core.cst$kw$ns,null], null), null);
return (fexpr__20964.cljs$core$IFn$_invoke$arity$1 ? fexpr__20964.cljs$core$IFn$_invoke$arity$1(G__20965) : fexpr__20964.call(null,G__20965));
})())){
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6(true,bound_vars__$1,aenv__$1,ast__$1,opts,((function (ast,vec__20959,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_20946,_STAR_eval_fn_STAR_20947,_STAR_cljs_ns_STAR_20948,_STAR_checked_arrays_STAR_20949,_STAR_cljs_static_fns_STAR_20950,_STAR_fn_invoke_direct_STAR_20951,_STAR_ns_STAR_20952,_STAR_alias_map_STAR_20953,_STAR_data_readers_STAR_20954,resolve_symbol20955,_STAR_source_map_data_STAR_20956,the_ns,bound_vars__$1){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var ns_name = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast__$1);
var sb = (new goog.string.StringBuffer());
sb.append((function (){var sb__8697__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_20966_20972 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_20967_20973 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (_STAR_print_newline_STAR_20966_20972,_STAR_print_fn_STAR_20967_20973,sb__8697__auto__,ns_name,sb,ast,vec__20959,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_20946,_STAR_eval_fn_STAR_20947,_STAR_cljs_ns_STAR_20948,_STAR_checked_arrays_STAR_20949,_STAR_cljs_static_fns_STAR_20950,_STAR_fn_invoke_direct_STAR_20951,_STAR_ns_STAR_20952,_STAR_alias_map_STAR_20953,_STAR_data_readers_STAR_20954,resolve_symbol20955,_STAR_source_map_data_STAR_20956,the_ns,bound_vars__$1){
return (function (x__8698__auto__){
return sb__8697__auto__.append(x__8698__auto__);
});})(_STAR_print_newline_STAR_20966_20972,_STAR_print_fn_STAR_20967_20973,sb__8697__auto__,ns_name,sb,ast,vec__20959,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_20946,_STAR_eval_fn_STAR_20947,_STAR_cljs_ns_STAR_20948,_STAR_checked_arrays_STAR_20949,_STAR_cljs_static_fns_STAR_20950,_STAR_fn_invoke_direct_STAR_20951,_STAR_ns_STAR_20952,_STAR_alias_map_STAR_20953,_STAR_data_readers_STAR_20954,resolve_symbol20955,_STAR_source_map_data_STAR_20956,the_ns,bound_vars__$1))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([["goog.provide(\"",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.compiler.munge.cljs$core$IFn$_invoke$arity$1(ns_name)),"\");"].join('')], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_20967_20973;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_20966_20972;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8697__auto__)].join('');
})());

if((node_deps == null)){
} else {
cljs.js.node_side_effects(bound_vars__$1,sb,node_deps,ns_name,cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts));
}

cljs.js.global_exports_side_effects(bound_vars__$1,sb,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.analyzer.dep_has_global_exports_QMARK_,cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast__$1)),ns_name,cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts));

var G__20968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,(cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,sb.toString()], null)) : cljs.js._STAR_eval_fn_STAR_.call(null,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,sb.toString()], null)))], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20968) : cb.call(null,G__20968));
}
});})(ast,vec__20959,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_20946,_STAR_eval_fn_STAR_20947,_STAR_cljs_ns_STAR_20948,_STAR_checked_arrays_STAR_20949,_STAR_cljs_static_fns_STAR_20950,_STAR_fn_invoke_direct_STAR_20951,_STAR_ns_STAR_20952,_STAR_alias_map_STAR_20953,_STAR_data_readers_STAR_20954,resolve_symbol20955,_STAR_source_map_data_STAR_20956,the_ns,bound_vars__$1))
);
} else {
var src = (function (){var sb__8697__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_20969_20974 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_20970_20975 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (_STAR_print_newline_STAR_20969_20974,_STAR_print_fn_STAR_20970_20975,sb__8697__auto__,ast,vec__20959,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_20946,_STAR_eval_fn_STAR_20947,_STAR_cljs_ns_STAR_20948,_STAR_checked_arrays_STAR_20949,_STAR_cljs_static_fns_STAR_20950,_STAR_fn_invoke_direct_STAR_20951,_STAR_ns_STAR_20952,_STAR_alias_map_STAR_20953,_STAR_data_readers_STAR_20954,resolve_symbol20955,_STAR_source_map_data_STAR_20956,the_ns,bound_vars__$1){
return (function (x__8698__auto__){
return sb__8697__auto__.append(x__8698__auto__);
});})(_STAR_print_newline_STAR_20969_20974,_STAR_print_fn_STAR_20970_20975,sb__8697__auto__,ast,vec__20959,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_20946,_STAR_eval_fn_STAR_20947,_STAR_cljs_ns_STAR_20948,_STAR_checked_arrays_STAR_20949,_STAR_cljs_static_fns_STAR_20950,_STAR_fn_invoke_direct_STAR_20951,_STAR_ns_STAR_20952,_STAR_alias_map_STAR_20953,_STAR_data_readers_STAR_20954,resolve_symbol20955,_STAR_source_map_data_STAR_20956,the_ns,bound_vars__$1))
;

try{cljs.compiler.emit(ast__$1);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_20970_20975;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_20969_20974;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8697__auto__)].join('');
})();
var G__20971 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,(cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,src], null)) : cljs.js._STAR_eval_fn_STAR_.call(null,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,src], null)))], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__20971) : cb.call(null,G__20971));
}
}
}finally {cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_20956;

cljs.tools.reader.resolve_symbol = resolve_symbol20955;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_20954;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_20953;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_20952;

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = _STAR_fn_invoke_direct_STAR_20951;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_20950;

cljs.analyzer._STAR_checked_arrays_STAR_ = _STAR_checked_arrays_STAR_20949;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_20948;

cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_20947;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_20946;
}});
/**
 * Evaluate a single ClojureScript form. The parameters:
 * 
 * state (atom)
 *   the compiler state
 * 
 * form (s-expr)
 *   the ClojureScript source
 * 
 * opts (map)
 *   compilation options.
 * 
 *    :eval             - eval function to invoke, see *eval-fn*
 *    :load             - library resolution function, see *load-fn*
 *    :source-map       - set to true to generate inline source map information
 *    :def-emits-var    - sets whether def (and derived) forms return either a Var
 *                        (if set to true) or the def init value (if false). Default
 *                        is false.
 *    :checked-arrays   - if :warn or :error, checks inferred types and values passed
 *                        to aget/aset. Logs for incorrect values if :warn, throws if
 *                        :error. Defaults to false.
 *    :static-fns       - employ static dispatch to specific function arities in
 *                        emitted JavaScript, as opposed to making use of the
 *                        `call` construct. Defaults to false.
 *    :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for
 *                        unknown functions, but instead direct invokes via
 *                        `f(a0,a1...)`. Defaults to `false`.
 *    :target           - use `:nodejs` if targeting Node.js. Takes no other options
 *                        at the moment.
 *    :ns               - optional, the namespace in which to evaluate the source.
 *    :verbose          - optional, emit details from compiler activity. Defaults to
 *                        false.
 *    :context          - optional, sets the context for the source. Possible values
 *                        are `:expr`, `:statement` and `:return`. Defaults to
 *                        `:expr`.
 * 
 * cb (function)
 *   callback, will be invoked with a map. If successful the map will contain
 *   a key :value with the result of evalution. If unsuccessful the map will
 *   contain a key :error with an ex-info instance describing the cause of
 *   failure.
 */
cljs.js.eval = (function cljs$js$eval(var_args){
var G__20977 = arguments.length;
switch (G__20977) {
case 3:
return cljs.js.eval.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.eval.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.eval.cljs$core$IFn$_invoke$arity$3 = (function (state,form,cb){
return cljs.js.eval.cljs$core$IFn$_invoke$arity$4(state,form,null,cb);
});

cljs.js.eval.cljs$core$IFn$_invoke$arity$4 = (function (state,form,opts,cb){
return cljs.js.eval_STAR_(new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_,cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),form,opts,cb);
});

cljs.js.eval.cljs$lang$maxFixedArity = 4;

cljs.js.compile_str_STAR_ = (function cljs$js$compile_str_STAR_(bound_vars,source,name,opts,cb){
var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(source,(1),name);
var eof = {};
var aenv = cljs.analyzer.empty_env();
var sb = (new goog.string.StringBuffer());
var the_ns = (function (){var or__7668__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__20981 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__20981,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__20981;
}
})();
var fexpr__21008 = ((function (rdr,eof,aenv,sb,the_ns,bound_vars__$1){
return (function cljs$js$compile_str_STAR__$_compile_loop(ns){
while(true){
var _STAR_compiler_STAR_21009 = cljs.env._STAR_compiler_STAR_;
var _STAR_eval_fn_STAR_21010 = cljs.js._STAR_eval_fn_STAR_;
var _STAR_cljs_ns_STAR_21011 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_checked_arrays_STAR_21012 = cljs.analyzer._STAR_checked_arrays_STAR_;
var _STAR_cljs_static_fns_STAR_21013 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_fn_invoke_direct_STAR_21014 = cljs.analyzer._STAR_fn_invoke_direct_STAR_;
var _STAR_ns_STAR_21015 = cljs.core._STAR_ns_STAR_;
var _STAR_alias_map_STAR_21016 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_21017 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol21018 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_21019 = cljs.compiler._STAR_source_map_data_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.js._STAR_eval_fn_STAR_ = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = ns;

cljs.analyzer._STAR_checked_arrays_STAR_ = cljs.core.cst$kw$checked_DASH_arrays.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = (function (){var and__7656__auto__ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(and__7656__auto__)){
return cljs.core.cst$kw$fn_DASH_invoke_DASH_direct.cljs$core$IFn$_invoke$arity$1(opts);
} else {
return and__7656__auto__;
}
})();

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(ns);

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

try{var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.js.read(eof,rdr)], null);
}catch (e21020){var cause = e21020;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,["Could not compile ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var form = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
if(!((eof === form))){
var aenv__$1 = (function (){var G__21021 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_ns_STAR_));
var G__21021__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__21021,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__21021);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__21021__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__21021__$1;
}
})();
var res__$1 = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e21022){var cause = e21022;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,["Could not compile ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$1);
var vec__21023 = ((cljs.core.keyword_identical_QMARK_(cljs.core.cst$kw$target.cljs$core$IFn$_invoke$arity$1(opts),cljs.core.cst$kw$nodejs))?(function (){var map__21026 = cljs.core.group_by(cljs.analyzer.node_module_dep_QMARK_,cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast));
var map__21026__$1 = ((((!((map__21026 == null)))?((((map__21026.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__21026.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__21026):map__21026);
var node_libs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21026__$1,true);
var libs_to_load = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21026__$1,false);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node_libs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ast,cljs.core.cst$kw$deps,libs_to_load)], null);
})():new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,ast], null));
var node_deps = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21023,(0),null);
var ast__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21023,(1),null);
if(cljs.core.truth_((function (){var G__21029 = cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast__$1);
var fexpr__21028 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_STAR_,null,cljs.core.cst$kw$ns,null], null), null);
return (fexpr__21028.cljs$core$IFn$_invoke$arity$1 ? fexpr__21028.cljs$core$IFn$_invoke$arity$1(G__21029) : fexpr__21028.call(null,G__21029));
})())){
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5(bound_vars__$1,aenv__$1,ast__$1,opts,((function (ns,ast,vec__21023,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21009,_STAR_eval_fn_STAR_21010,_STAR_cljs_ns_STAR_21011,_STAR_checked_arrays_STAR_21012,_STAR_cljs_static_fns_STAR_21013,_STAR_fn_invoke_direct_STAR_21014,_STAR_ns_STAR_21015,_STAR_alias_map_STAR_21016,_STAR_data_readers_STAR_21017,resolve_symbol21018,_STAR_source_map_data_STAR_21019,rdr,eof,aenv,sb,the_ns,bound_vars__$1){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
var ns_name = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast__$1);
sb.append((function (){var sb__8697__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_21030_21035 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_21031_21036 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (ns,_STAR_print_newline_STAR_21030_21035,_STAR_print_fn_STAR_21031_21036,sb__8697__auto__,ns_name,ast,vec__21023,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21009,_STAR_eval_fn_STAR_21010,_STAR_cljs_ns_STAR_21011,_STAR_checked_arrays_STAR_21012,_STAR_cljs_static_fns_STAR_21013,_STAR_fn_invoke_direct_STAR_21014,_STAR_ns_STAR_21015,_STAR_alias_map_STAR_21016,_STAR_data_readers_STAR_21017,resolve_symbol21018,_STAR_source_map_data_STAR_21019,rdr,eof,aenv,sb,the_ns,bound_vars__$1){
return (function (x__8698__auto__){
return sb__8697__auto__.append(x__8698__auto__);
});})(ns,_STAR_print_newline_STAR_21030_21035,_STAR_print_fn_STAR_21031_21036,sb__8697__auto__,ns_name,ast,vec__21023,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21009,_STAR_eval_fn_STAR_21010,_STAR_cljs_ns_STAR_21011,_STAR_checked_arrays_STAR_21012,_STAR_cljs_static_fns_STAR_21013,_STAR_fn_invoke_direct_STAR_21014,_STAR_ns_STAR_21015,_STAR_alias_map_STAR_21016,_STAR_data_readers_STAR_21017,resolve_symbol21018,_STAR_source_map_data_STAR_21019,rdr,eof,aenv,sb,the_ns,bound_vars__$1))
;

try{cljs.compiler.emit(cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$2));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_21031_21036;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_21030_21035;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8697__auto__)].join('');
})());

if((node_deps == null)){
} else {
cljs.js.node_side_effects(bound_vars__$1,sb,node_deps,ns_name,cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts));
}

return cljs$js$compile_str_STAR__$_compile_loop(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast__$1));
}
});})(ns,ast,vec__21023,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21009,_STAR_eval_fn_STAR_21010,_STAR_cljs_ns_STAR_21011,_STAR_checked_arrays_STAR_21012,_STAR_cljs_static_fns_STAR_21013,_STAR_fn_invoke_direct_STAR_21014,_STAR_ns_STAR_21015,_STAR_alias_map_STAR_21016,_STAR_data_readers_STAR_21017,resolve_symbol21018,_STAR_source_map_data_STAR_21019,rdr,eof,aenv,sb,the_ns,bound_vars__$1))
);
} else {
sb.append((function (){var sb__8697__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_21032_21037 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_21033_21038 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (ns,_STAR_print_newline_STAR_21032_21037,_STAR_print_fn_STAR_21033_21038,sb__8697__auto__,ast,vec__21023,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21009,_STAR_eval_fn_STAR_21010,_STAR_cljs_ns_STAR_21011,_STAR_checked_arrays_STAR_21012,_STAR_cljs_static_fns_STAR_21013,_STAR_fn_invoke_direct_STAR_21014,_STAR_ns_STAR_21015,_STAR_alias_map_STAR_21016,_STAR_data_readers_STAR_21017,resolve_symbol21018,_STAR_source_map_data_STAR_21019,rdr,eof,aenv,sb,the_ns,bound_vars__$1){
return (function (x__8698__auto__){
return sb__8697__auto__.append(x__8698__auto__);
});})(ns,_STAR_print_newline_STAR_21032_21037,_STAR_print_fn_STAR_21033_21038,sb__8697__auto__,ast,vec__21023,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21009,_STAR_eval_fn_STAR_21010,_STAR_cljs_ns_STAR_21011,_STAR_checked_arrays_STAR_21012,_STAR_cljs_static_fns_STAR_21013,_STAR_fn_invoke_direct_STAR_21014,_STAR_ns_STAR_21015,_STAR_alias_map_STAR_21016,_STAR_data_readers_STAR_21017,resolve_symbol21018,_STAR_source_map_data_STAR_21019,rdr,eof,aenv,sb,the_ns,bound_vars__$1))
;

try{cljs.compiler.emit(ast__$1);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_21033_21038;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_21032_21037;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8697__auto__)].join('');
})());

var G__21039 = ns;
ns = G__21039;
continue;
}
}
} else {
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.append_source_map(cljs.env._STAR_compiler_STAR_,name,source,sb,cljs.core.deref(cljs.compiler._STAR_source_map_data_STAR_),opts);
} else {
}

var G__21034 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,sb.toString()], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__21034) : cb.call(null,G__21034));
}
}
}finally {cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_21019;

cljs.tools.reader.resolve_symbol = resolve_symbol21018;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_21017;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_21016;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_21015;

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = _STAR_fn_invoke_direct_STAR_21014;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_21013;

cljs.analyzer._STAR_checked_arrays_STAR_ = _STAR_checked_arrays_STAR_21012;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_21011;

cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_21010;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_21009;
}break;
}
});})(rdr,eof,aenv,sb,the_ns,bound_vars__$1))
;
return fexpr__21008(the_ns);
});
/**
 * Compile ClojureScript source into JavaScript. The parameters:
 * 
 * state (atom)
 *   the compiler state
 * 
 * source (string)
 *   the ClojureScript source
 * 
 * name (symbol or string)
 *   optional, the name of the source
 * 
 * opts (map)
 *   compilation options.
 * 
 *    :eval             - eval function to invoke, see *eval-fn*
 *    :load             - library resolution function, see *load-fn*
 *    :source-map       - set to true to generate inline source map information
 *    :def-emits-var    - sets whether def (and derived) forms return either a Var
 *                        (if set to true) or the def init value (if false). Default
 *                        is false.
 *    :checked-arrays   - if :warn or :error, checks inferred types and values passed
 *                        to aget/aset. Logs for incorrect values if :warn, throws if
 *                        :error. Defaults to false.
 *    :static-fns       - employ static dispatch to specific function arities in
 *                        emitted JavaScript, as opposed to making use of the
 *                        `call` construct. Defaults to false.
 *    :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for
 *                        unknown functions, but instead direct invokes via
 *                        `f(a0,a1...)`. Defaults to `false`.
 *    :target           - use `:nodejs` if targeting Node.js. Takes no other options
 *                        at the moment.
 *    :ns               - optional, the namespace in which to evaluate the source.
 *    :verbose          - optional, emit details from compiler activity. Defaults to
 *                        false.
 *    :context          - optional, sets the context for the source. Possible values
 *                        are `:expr`, `:statement` and `:return`. Defaults to
 *                        `:expr`.
 * 
 * cb (function)
 *   callback, will be invoked with a map. If successful the map will contain
 *   a key :value with the compilation result (string). If unsuccessful the map
 *   will contain a key :error with an ex-info instance describing the cause
 *   of failure.
 */
cljs.js.compile_str = (function cljs$js$compile_str(var_args){
var G__21041 = arguments.length;
switch (G__21041) {
case 3:
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.compile_str.cljs$core$IFn$_invoke$arity$3 = (function (state,source,cb){
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$4(state,source,null,cb);
});

cljs.js.compile_str.cljs$core$IFn$_invoke$arity$4 = (function (state,source,name,cb){
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$5(state,source,name,null,cb);
});

cljs.js.compile_str.cljs$core$IFn$_invoke$arity$5 = (function (state,source,name,opts,cb){
if(cljs.core.truth_(cljs.js.atom_QMARK_(state))){
} else {
throw (new Error("Assert failed: (atom? state)"));
}

if(typeof source === 'string'){
} else {
throw (new Error("Assert failed: (string? source)"));
}

if(cljs.core.truth_(cljs.js.valid_name_QMARK_(name))){
} else {
throw (new Error("Assert failed: (valid-name? name)"));
}

if(cljs.core.truth_(cljs.js.valid_opts_QMARK_(opts))){
} else {
throw (new Error("Assert failed: (valid-opts? opts)"));
}

if(cljs.core.fn_QMARK_(cb)){
} else {
throw (new Error("Assert failed: (fn? cb)"));
}

return cljs.js.compile_str_STAR_(new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_,cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))?cljs.js.sm_data():null)], null),source,name,opts,cb);
});

cljs.js.compile_str.cljs$lang$maxFixedArity = 5;

cljs.js.eval_str_STAR_ = (function cljs$js$eval_str_STAR_(bound_vars,source,name,opts,cb){
var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(source,(1),name);
var eof = {};
var aenv = cljs.analyzer.empty_env();
var sb = (new goog.string.StringBuffer());
var the_ns = (function (){var or__7668__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__21045 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__21045,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__21045;
}
})();
var aname = (function (){var G__21046 = name;
if(cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.analyzer.macro_ns_name(G__21046);
} else {
return G__21046;
}
})();
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Evaluating",name], 0));
} else {
}

var G__21076 = cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
var fexpr__21075 = ((function (G__21076,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function cljs$js$eval_str_STAR__$_compile_loop(ns){
while(true){
var _STAR_compiler_STAR_21077 = cljs.env._STAR_compiler_STAR_;
var _STAR_eval_fn_STAR_21078 = cljs.js._STAR_eval_fn_STAR_;
var _STAR_cljs_ns_STAR_21079 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_checked_arrays_STAR_21080 = cljs.analyzer._STAR_checked_arrays_STAR_;
var _STAR_cljs_static_fns_STAR_21081 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_fn_invoke_direct_STAR_21082 = cljs.analyzer._STAR_fn_invoke_direct_STAR_;
var _STAR_ns_STAR_21083 = cljs.core._STAR_ns_STAR_;
var _STAR_alias_map_STAR_21084 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_21085 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol21086 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_21087 = cljs.compiler._STAR_source_map_data_STAR_;
var _STAR_cljs_file_STAR_21088 = cljs.analyzer._STAR_cljs_file_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.js._STAR_eval_fn_STAR_ = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = ns;

cljs.analyzer._STAR_checked_arrays_STAR_ = cljs.core.cst$kw$checked_DASH_arrays.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = (function (){var and__7656__auto__ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(and__7656__auto__)){
return cljs.core.cst$kw$fn_DASH_invoke_DASH_direct.cljs$core$IFn$_invoke$arity$1(opts);
} else {
return and__7656__auto__;
}
})();

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(ns);

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_file_STAR_ = cljs.core.cst$kw$cljs_DASH_file.cljs$core$IFn$_invoke$arity$1(opts);

try{var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.js.read(eof,rdr)], null);
}catch (e21089){var cause = e21089;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,["Could not eval ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var form = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
if(!((eof === form))){
var aenv__$1 = (function (){var G__21090 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(ns));
var G__21090__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__21090,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__21090);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__21090__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__21090__$1;
}
})();
var res__$1 = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e21091){var cause = e21091;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,["Could not eval ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$1);
var ns_SINGLEQUOTE_ = cljs.analyzer._STAR_cljs_ns_STAR_;
var vec__21092 = ((cljs.core.keyword_identical_QMARK_(cljs.core.cst$kw$target.cljs$core$IFn$_invoke$arity$1(opts),cljs.core.cst$kw$nodejs))?(function (){var map__21095 = cljs.core.group_by(cljs.analyzer.node_module_dep_QMARK_,cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast));
var map__21095__$1 = ((((!((map__21095 == null)))?((((map__21095.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__21095.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__21095):map__21095);
var node_libs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21095__$1,true);
var libs_to_load = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21095__$1,false);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node_libs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ast,cljs.core.cst$kw$deps,libs_to_load)], null);
})():new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,ast], null));
var node_deps = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21092,(0),null);
var ast__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21092,(1),null);
if(cljs.core.truth_((function (){var G__21098 = cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast__$1);
var fexpr__21097 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_STAR_,null,cljs.core.cst$kw$ns,null], null), null);
return (fexpr__21097.cljs$core$IFn$_invoke$arity$1 ? fexpr__21097.cljs$core$IFn$_invoke$arity$1(G__21098) : fexpr__21097.call(null,G__21098));
})())){
sb.append((function (){var sb__8697__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_21099_21105 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_21100_21106 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (ns,_STAR_print_newline_STAR_21099_21105,_STAR_print_fn_STAR_21100_21106,sb__8697__auto__,ast,ns_SINGLEQUOTE_,vec__21092,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21077,_STAR_eval_fn_STAR_21078,_STAR_cljs_ns_STAR_21079,_STAR_checked_arrays_STAR_21080,_STAR_cljs_static_fns_STAR_21081,_STAR_fn_invoke_direct_STAR_21082,_STAR_ns_STAR_21083,_STAR_alias_map_STAR_21084,_STAR_data_readers_STAR_21085,resolve_symbol21086,_STAR_source_map_data_STAR_21087,_STAR_cljs_file_STAR_21088,G__21076,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (x__8698__auto__){
return sb__8697__auto__.append(x__8698__auto__);
});})(ns,_STAR_print_newline_STAR_21099_21105,_STAR_print_fn_STAR_21100_21106,sb__8697__auto__,ast,ns_SINGLEQUOTE_,vec__21092,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21077,_STAR_eval_fn_STAR_21078,_STAR_cljs_ns_STAR_21079,_STAR_checked_arrays_STAR_21080,_STAR_cljs_static_fns_STAR_21081,_STAR_fn_invoke_direct_STAR_21082,_STAR_ns_STAR_21083,_STAR_alias_map_STAR_21084,_STAR_data_readers_STAR_21085,resolve_symbol21086,_STAR_source_map_data_STAR_21087,_STAR_cljs_file_STAR_21088,G__21076,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([["goog.provide(\"",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.compiler.munge.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast__$1))),"\");"].join('')], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_21100_21106;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_21099_21105;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8697__auto__)].join('');
})());

return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6(true,bound_vars__$1,aenv__$1,ast__$1,opts,((function (ns,ast,ns_SINGLEQUOTE_,vec__21092,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21077,_STAR_eval_fn_STAR_21078,_STAR_cljs_ns_STAR_21079,_STAR_checked_arrays_STAR_21080,_STAR_cljs_static_fns_STAR_21081,_STAR_fn_invoke_direct_STAR_21082,_STAR_ns_STAR_21083,_STAR_alias_map_STAR_21084,_STAR_data_readers_STAR_21085,resolve_symbol21086,_STAR_source_map_data_STAR_21087,_STAR_cljs_file_STAR_21088,G__21076,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
var ns_name = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast__$1);
if((node_deps == null)){
} else {
cljs.js.node_side_effects(bound_vars__$1,sb,node_deps,ns_name,cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts));
}

cljs.js.global_exports_side_effects(bound_vars__$1,sb,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.analyzer.dep_has_global_exports_QMARK_,cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast__$1)),ns_name,cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts));

return cljs$js$eval_str_STAR__$_compile_loop(ns_SINGLEQUOTE_);
}
});})(ns,ast,ns_SINGLEQUOTE_,vec__21092,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21077,_STAR_eval_fn_STAR_21078,_STAR_cljs_ns_STAR_21079,_STAR_checked_arrays_STAR_21080,_STAR_cljs_static_fns_STAR_21081,_STAR_fn_invoke_direct_STAR_21082,_STAR_ns_STAR_21083,_STAR_alias_map_STAR_21084,_STAR_data_readers_STAR_21085,resolve_symbol21086,_STAR_source_map_data_STAR_21087,_STAR_cljs_file_STAR_21088,G__21076,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname))
);
} else {
var env__14288__auto___21107 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1)),cljs.core.cst$kw$options,opts);
var env__14288__auto___21108__$1 = ((cljs.core.map_QMARK_(env__14288__auto___21107))?cljs.core.atom.cljs$core$IFn$_invoke$arity$1(env__14288__auto___21107):((((env__14288__auto___21107 instanceof cljs.core.Atom)) && (cljs.core.map_QMARK_(cljs.core.deref(env__14288__auto___21107))))?env__14288__auto___21107:(function(){throw (new Error(["Compiler environment must be a map or atom containing a map, not ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type(env__14288__auto___21107))].join('')))})()
));
var _STAR_compiler_STAR_21101_21109 = cljs.env._STAR_compiler_STAR_;
cljs.env._STAR_compiler_STAR_ = env__14288__auto___21108__$1;

try{sb.append((function (){var sb__8697__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_21102_21110 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_21103_21111 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (ns,_STAR_print_newline_STAR_21102_21110,_STAR_print_fn_STAR_21103_21111,sb__8697__auto__,_STAR_compiler_STAR_21101_21109,env__14288__auto___21107,env__14288__auto___21108__$1,ast,ns_SINGLEQUOTE_,vec__21092,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21077,_STAR_eval_fn_STAR_21078,_STAR_cljs_ns_STAR_21079,_STAR_checked_arrays_STAR_21080,_STAR_cljs_static_fns_STAR_21081,_STAR_fn_invoke_direct_STAR_21082,_STAR_ns_STAR_21083,_STAR_alias_map_STAR_21084,_STAR_data_readers_STAR_21085,resolve_symbol21086,_STAR_source_map_data_STAR_21087,_STAR_cljs_file_STAR_21088,G__21076,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (x__8698__auto__){
return sb__8697__auto__.append(x__8698__auto__);
});})(ns,_STAR_print_newline_STAR_21102_21110,_STAR_print_fn_STAR_21103_21111,sb__8697__auto__,_STAR_compiler_STAR_21101_21109,env__14288__auto___21107,env__14288__auto___21108__$1,ast,ns_SINGLEQUOTE_,vec__21092,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_21077,_STAR_eval_fn_STAR_21078,_STAR_cljs_ns_STAR_21079,_STAR_checked_arrays_STAR_21080,_STAR_cljs_static_fns_STAR_21081,_STAR_fn_invoke_direct_STAR_21082,_STAR_ns_STAR_21083,_STAR_alias_map_STAR_21084,_STAR_data_readers_STAR_21085,resolve_symbol21086,_STAR_source_map_data_STAR_21087,_STAR_cljs_file_STAR_21088,G__21076,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;

try{cljs.compiler.emit(ast__$1);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_21103_21111;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_21102_21110;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8697__auto__)].join('');
})());
}finally {cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_21101_21109;
}
var G__21112 = ns_SINGLEQUOTE_;
ns = G__21112;
continue;
}
}
} else {
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.append_source_map(cljs.env._STAR_compiler_STAR_,aname,source,sb,cljs.core.deref(cljs.compiler._STAR_source_map_data_STAR_),opts);
} else {
}

if((aname instanceof cljs.core.Symbol)){
cljs.analyzer.dump_specs(aname);
} else {
}

var js_source = sb.toString();
var evalm = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$lang,cljs.core.cst$kw$clj,cljs.core.cst$kw$name,name,cljs.core.cst$kw$path,cljs.js.ns__GT_relpath(name),cljs.core.cst$kw$source,js_source,cljs.core.cst$kw$cache,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.env._STAR_compiler_STAR_),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,aname], null))], null);
var complete = ((function (ns,js_source,evalm,form,res,_STAR_compiler_STAR_21077,_STAR_eval_fn_STAR_21078,_STAR_cljs_ns_STAR_21079,_STAR_checked_arrays_STAR_21080,_STAR_cljs_static_fns_STAR_21081,_STAR_fn_invoke_direct_STAR_21082,_STAR_ns_STAR_21083,_STAR_alias_map_STAR_21084,_STAR_data_readers_STAR_21085,resolve_symbol21086,_STAR_source_map_data_STAR_21087,_STAR_cljs_file_STAR_21088,G__21076,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([js_source], 0));
} else {
}

var res__$2 = (function (){try{return new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns,ns,cljs.core.cst$kw$value,(cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1(evalm) : cljs.js._STAR_eval_fn_STAR_.call(null,evalm))], null);
}catch (e21104){var cause = e21104;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,"ERROR",cause));
}})();
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
}
});})(ns,js_source,evalm,form,res,_STAR_compiler_STAR_21077,_STAR_eval_fn_STAR_21078,_STAR_cljs_ns_STAR_21079,_STAR_checked_arrays_STAR_21080,_STAR_cljs_static_fns_STAR_21081,_STAR_fn_invoke_direct_STAR_21082,_STAR_ns_STAR_21083,_STAR_alias_map_STAR_21084,_STAR_data_readers_STAR_21085,resolve_symbol21086,_STAR_source_map_data_STAR_21087,_STAR_cljs_file_STAR_21088,G__21076,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;
var temp__4655__auto__ = cljs.core.cst$kw$cache_DASH_source.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(temp__4655__auto__)){
var f = temp__4655__auto__;
return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(evalm,complete) : f.call(null,evalm,complete));
} else {
return complete(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null));
}
}
}
}finally {cljs.analyzer._STAR_cljs_file_STAR_ = _STAR_cljs_file_STAR_21088;

cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_21087;

cljs.tools.reader.resolve_symbol = resolve_symbol21086;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_21085;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_21084;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_21083;

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = _STAR_fn_invoke_direct_STAR_21082;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_21081;

cljs.analyzer._STAR_checked_arrays_STAR_ = _STAR_checked_arrays_STAR_21080;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_21079;

cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_21078;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_21077;
}break;
}
});})(G__21076,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;
return fexpr__21075(G__21076);
});
/**
 * Evalute ClojureScript source given as a string. The parameters:
 * 
 *   state (atom)
 *  the compiler state
 * 
 *   source (string)
 *  the ClojureScript source
 * 
 *   name (symbol or string)
 *  optional, the name of the source
 * 
 *   opts (map)
 *  compilation options.
 * 
 *  :eval             - eval function to invoke, see *eval-fn*
 *  :load             - library resolution function, see *load-fn*
 *  :source-map       - set to true to generate inline source map information
 *  :cache-source     - optional, a function to run side-effects with the
 *                      compilation result prior to actual evalution. This function
 *                      takes two arguments, the first is the eval map, the source
 *                      will be under :source. The second argument is a callback of
 *                      one argument. If an error occurs an :error key should be
 *                      supplied.
 *  :def-emits-var    - sets whether def (and derived) forms return either a Var
 *                      (if set to true) or the def init value (if false). Default
 *                      is false.
 *  :checked-arrays   - if :warn or :error, checks inferred types and values passed
 *                      to aget/aset. Logs for incorrect values if :warn, throws if
 *                      :error. Defaults to false.
 *  :static-fns       - employ static dispatch to specific function arities in
 *                      emitted JavaScript, as opposed to making use of the
 *                      `call` construct. Defaults to false.
 *  :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for
 *                      unknown functions, but instead direct invokes via
 *                      `f(a0,a1...)`. Defaults to `false`.
 *  :target           - use `:nodejs` if targeting Node.js. Takes no other options
 *                      at the moment.
 *  :ns               - optional, the namespace in which to evaluate the source.
 *  :verbose          - optional, emit details from compiler activity. Defaults to
 *                      false.
 *  :context          - optional, sets the context for the source. Possible values
 *                   are `:expr`, `:statement` and `:return`. Defaults to
 *                    `:expr`.
 * 
 *   cb (function)
 *  callback, will be invoked with a map. If succesful the map will contain
 *  a :value key with the result of evaluation and :ns the current namespace.
 *  If unsuccessful will contain a :error key with an ex-info instance describing
 *  the cause of failure.
 */
cljs.js.eval_str = (function cljs$js$eval_str(var_args){
var G__21114 = arguments.length;
switch (G__21114) {
case 3:
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.eval_str.cljs$core$IFn$_invoke$arity$3 = (function (state,source,cb){
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4(state,source,null,cb);
});

cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4 = (function (state,source,name,cb){
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5(state,source,name,null,cb);
});

cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5 = (function (state,source,name,opts,cb){
if(cljs.core.truth_(cljs.js.atom_QMARK_(state))){
} else {
throw (new Error("Assert failed: (atom? state)"));
}

if(typeof source === 'string'){
} else {
throw (new Error("Assert failed: (string? source)"));
}

if(cljs.core.truth_(cljs.js.valid_name_QMARK_(name))){
} else {
throw (new Error("Assert failed: (valid-name? name)"));
}

if(cljs.core.truth_(cljs.js.valid_opts_QMARK_(opts))){
} else {
throw (new Error("Assert failed: (valid-opts? opts)"));
}

if(cljs.core.fn_QMARK_(cb)){
} else {
throw (new Error("Assert failed: (fn? cb)"));
}

return cljs.js.eval_str_STAR_(new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_,cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__7668__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__7668__auto__)){
return or__7668__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),source,name,opts,cb);
});

cljs.js.eval_str.cljs$lang$maxFixedArity = 5;

