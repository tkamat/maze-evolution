{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name maze-evolution.views, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, re-frame re-frame.core, re-frame.core re-frame.core, subs maze-evolution.subs, maze-evolution.subs maze-evolution.subs}, :cljs.spec/speced-vars [], :uses nil, :defs {title {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/views.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([]))}, :name maze-evolution.views/title, :variadic false, :file "src/cljs/maze_evolution/views.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, create-rectangles {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/views.cljs", :line 10, :column 7, :end-line 10, :end-column 24, :arglists (quote ([maze]))}, :name maze-evolution.views/create-rectangles, :variadic false, :file "src/cljs/maze_evolution/views.cljs", :end-column 24, :method-params ([maze]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([maze]))}, draw-maze {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/views.cljs", :line 22, :column 7, :end-line 22, :end-column 16, :arglists (quote ([]))}, :name maze-evolution.views/draw-maze, :variadic false, :file "src/cljs/maze_evolution/views.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, main-panel {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/views.cljs", :line 28, :column 7, :end-line 28, :end-column 17, :arglists (quote ([]))}, :name maze-evolution.views/main-panel, :variadic false, :file "src/cljs/maze_evolution/views.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:y :width :div :g :svg :maze-map :h2 :x :h1 :rect :height}, :order [:div :h1 :h2 :rect :x :y :width :height :maze-map :svg :g]}, :doc nil}