{:rename-macros {}, :renames {}, :externs {parseInt {}}, :use-macros {}, :excludes #{}, :name maze-evolution.events, :imports nil, :requires {re-frame re-frame.core, re-frame.core re-frame.core, str clojure.string, clojure.string clojure.string, db maze-evolution.db, maze-evolution.db maze-evolution.db}, :cljs.spec/speced-vars [], :uses nil, :defs {move-if-eligible {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/events.cljs", :line 10, :column 7, :end-line 10, :end-column 23, :arglists (quote ([direction maze-map current-position]))}, :name maze-evolution.events/move-if-eligible, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/events.cljs", :end-column 23, :method-params ([direction maze-map current-position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 3, :fn-var true, :arglists (quote ([direction maze-map current-position]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:initialize-db :set-new-unique-id :update-fitness :remaining-moves :generation :move-ball :W :next-generation :reset-individual :fitness-list :evolution :E :reset-position :id :population :maze :next-individual :unique-id :individual :add-to-fitness-list :set-new-move-sequence :update-population :S :fitness :N :map :current-position}, :order [:initialize-db :N :S :E :W :move-ball :maze :current-position :map :update-fitness :evolution :population :id :fitness :reset-position :set-new-move-sequence :remaining-moves :set-new-unique-id :unique-id :update-population :next-generation :generation :next-individual :individual :reset-individual :add-to-fitness-list :fitness-list]}, :doc nil}