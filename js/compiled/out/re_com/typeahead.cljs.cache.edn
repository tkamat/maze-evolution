{:rename-macros {}, :renames {}, :externs {Error {}, Object {}, goog {DEBUG {}}}, :use-macros {validate-args-macro re-com.validate, alt! cljs.core.async.macros, go-loop cljs.core.async.macros, handler-fn re-com.core}, :excludes #{}, :name re-com.typeahead, :imports nil, :requires {cljs.core.async cljs.core.async, re-com.misc re-com.misc, re-com.util re-com.util, re-com.popover re-com.popover, re-com.box re-com.box, re-com.validate re-com.validate, reagent reagent.core, reagent.core reagent.core, goog.events.KeyCodes goog.events.KeyCodes}, :cljs.spec/speced-vars [], :uses {align-style re-com.box, timeout cljs.core.async, html-attr? re-com.validate, h-box re-com.box, <! cljs.core.async, string-or-atom? re-com.validate, deref-or-value re-com.util, throbber-sizes-list re-com.validate, throbber-size? re-com.validate, chan cljs.core.async, input-text re-com.misc, regex? re-com.validate, css-style? re-com.validate, box re-com.box, px re-com.util, string-or-hiccup? re-com.validate, v-box re-com.box, flex-child-style re-com.box, input-status-type? re-com.validate, popover-tooltip re-com.popover, line re-com.box, number-or-string? re-com.validate, input-status-types-list re-com.validate, gap re-com.box, throbber re-com.misc, put! cljs.core.async}, :defs {activate-suggestion-next {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 112, :column 8, :end-line 112, :end-column 32, :private true, :arglists (quote ([{:as state, :keys [suggestions suggestion-active-index]}]))}, :private true, :name re-com.typeahead/activate-suggestion-next, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 32, :method-params ([p__27605]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:as state, :keys [suggestions suggestion-active-index]}]))}, search-data-source! {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 167, :column 8, :end-line 167, :end-column 27, :private true, :arglists (quote ([data-source state-atom text])), :doc "Call the `data-source` fn with `text`, and then call `got-suggestions` with the result\n  (asynchronously, if `data-source` does not return a truthy value)."}, :private true, :name re-com.typeahead/search-data-source!, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 27, :method-params ([data-source state-atom text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data-source state-atom text])), :doc "Call the `data-source` fn with `text`, and then call `got-suggestions` with the result\n  (asynchronously, if `data-source` does not return a truthy value)."}, input-text-will-blur {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 139, :column 8, :end-line 139, :end-column 28, :private true, :arglists (quote ([{:keys [input-text displaying-suggestion?], :as state}])), :doc "Update state when the `input-text` is about to lose focus."}, :private true, :name re-com.typeahead/input-text-will-blur, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 28, :method-params ([p__27614]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [input-text displaying-suggestion?], :as state}])), :doc "Update state when the `input-text` is about to lose focus."}, make-typeahead-state {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 19, :column 8, :end-line 19, :end-column 28, :private true, :arglists (quote ([{:as args, :keys [on-change rigid? change-on-blur? data-source suggestion-to-string debounce-delay model]}])), :doc "Return an initial value for the typeahead state, given `args`."}, :private true, :name re-com.typeahead/make-typeahead-state, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 28, :method-params ([p__27573]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:as args, :keys [on-change rigid? change-on-blur? data-source suggestion-to-string debounce-delay model]}])), :doc "Return an initial value for the typeahead state, given `args`."}, event-displays-suggestion? {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 54, :column 8, :end-line 54, :end-column 34, :private true, :arglists (quote ([{:as state, :keys [change-on-blur?]} event])), :doc "Should `event` cause the `input-text` value to be used to show the active suggestion?"}, :private true, :name re-com.typeahead/event-displays-suggestion?, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 34, :method-params ([p__27582 event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:as state, :keys [change-on-blur?]} event])), :doc "Should `event` cause the `input-text` value to be used to show the active suggestion?"}, external-model-changed {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 155, :column 8, :end-line 155, :end-column 30, :private true, :arglists (quote ([state new-value])), :doc "Update state when the external model value has changed."}, :private true, :name re-com.typeahead/external-model-changed, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 30, :method-params ([state new-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state new-value])), :doc "Update state when the external model value has changed."}, clear-suggestions {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 81, :column 8, :end-line 81, :end-column 25, :private true, :arglists (quote ([state]))}, :private true, :name re-com.typeahead/clear-suggestions, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 25, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, event-updates-model? {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 44, :column 8, :end-line 44, :end-column 28, :private true, :arglists (quote ([{:as state, :keys [change-on-blur? rigid?]} event])), :doc "Should `event` update the `typeahead` `model`?"}, :private true, :name re-com.typeahead/event-updates-model?, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 28, :method-params ([p__27577 event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:as state, :keys [change-on-blur? rigid?]} event])), :doc "Should `event` update the `typeahead` `model`?"}, activate-suggestion-by-index {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 86, :column 8, :end-line 86, :end-column 36, :private true, :arglists (quote ([{:as state, :keys [suggestions]} index])), :doc "Make the suggestion at `index` the active suggestion"}, :private true, :name re-com.typeahead/activate-suggestion-by-index, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 36, :method-params ([p__27594 index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:as state, :keys [suggestions]} index])), :doc "Make the suggestion at `index` the active suggestion"}, reset-typeahead {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 124, :column 8, :end-line 124, :end-column 23, :private true, :arglists (quote ([state]))}, :private true, :name re-com.typeahead/reset-typeahead, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 23, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, choose-suggestion-by-index {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 95, :column 8, :end-line 95, :end-column 34, :private true, :arglists (quote ([{:as state, :keys [suggestions]} index])), :doc "Choose the suggestion at `index`"}, :private true, :name re-com.typeahead/choose-suggestion-by-index, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 34, :method-params ([p__27598 index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:as state, :keys [suggestions]} index])), :doc "Choose the suggestion at `index`"}, activate-suggestion-prev {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 118, :column 8, :end-line 118, :end-column 32, :private true, :arglists (quote ([{:as state, :keys [suggestions suggestion-active-index]}]))}, :private true, :name re-com.typeahead/activate-suggestion-prev, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 32, :method-params ([p__27609]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:as state, :keys [suggestions suggestion-active-index]}]))}, wrap {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 110, :column 8, :end-line 110, :end-column 12, :private true, :arglists (quote ([index count]))}, :private true, :name re-com.typeahead/wrap, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 12, :method-params ([index count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([index count]))}, debounce {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 299, :column 8, :end-line 299, :end-column 16, :private true, :arglists (quote ([in ms])), :doc "Return a channel which will receive a value from the `in` channel only\n  if no further value is received on the `in` channel in the next `ms` milliseconds."}, :private true, :name re-com.typeahead/debounce, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 16, :method-params ([in ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 2, :fn-var true, :arglists (quote ([in ms])), :doc "Return a channel which will receive a value from the `in` channel only\n  if no further value is received on the `in` channel in the next `ms` milliseconds."}, typeahead {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 241, :column 7, :end-line 241, :end-column 16, :arglists (quote ([& {:keys [], :as args}])), :doc "typeahead reagent component", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [], :as args})], :arglists ([& {:keys [], :as args}]), :arglists-meta (nil)}}, :name re-com.typeahead/typeahead, :variadic true, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [], :as args})], :arglists ([& {:keys [], :as args}]), :arglists-meta (nil)}, :method-params [({:keys [], :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [], :as args}]), :doc "typeahead reagent component"}, input-text-on-change! {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 186, :column 8, :end-line 186, :end-column 29, :private true, :arglists (quote ([state-atom new-text])), :doc "Update state in response to `input-text` `on-change`, and put text on the `c-input` channel"}, :private true, :name re-com.typeahead/input-text-on-change!, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 29, :method-params ([state-atom new-text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state-atom new-text])), :doc "Update state in response to `input-text` `on-change`, and put text on the `c-input` channel"}, update-model {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 67, :column 8, :end-line 67, :end-column 20, :private true, :arglists (quote ([{:as state, :keys [on-change]} new-value])), :doc "Change the `typeahead` `model` value to `new-value`"}, :private true, :name re-com.typeahead/update-model, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 20, :method-params ([p__27587 new-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:as state, :keys [on-change]} new-value])), :doc "Change the `typeahead` `model` value to `new-value`"}, display-suggestion {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 73, :column 8, :end-line 73, :end-column 26, :private true, :arglists (quote ([{:as state, :keys [suggestion-to-string]} suggestion])), :doc "Change the `input-text` `model` to the string representation of `suggestion`"}, :private true, :name re-com.typeahead/display-suggestion, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 26, :method-params ([p__27590 suggestion]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:as state, :keys [suggestion-to-string]} suggestion])), :doc "Change the `input-text` `model` to the string representation of `suggestion`"}, search-data-source-loop! {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 175, :column 8, :end-line 175, :end-column 32, :private true, :arglists (quote ([state-atom c-search])), :doc "For every value arriving on the `c-search` channel, call `search-data-source!`."}, :private true, :name re-com.typeahead/search-data-source-loop!, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 32, :method-params ([state-atom c-search]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state-atom c-search])), :doc "For every value arriving on the `c-search` channel, call `search-data-source!`."}, typeahead-args-desc {:name re-com.typeahead/typeahead-args-desc, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :line 219, :column 1, :end-line 219, :end-column 25, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 219, :column 6, :end-line 219, :end-column 25}, :tag cljs.core/IVector}, change-data-source {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 147, :column 8, :end-line 147, :end-column 26, :private true, :arglists (quote ([state data-source])), :doc "Update `state` given a new `data-source`. Resets the typeahead since any existing suggestions\n  came from the old `data-source`."}, :private true, :name re-com.typeahead/change-data-source, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 26, :method-params ([state data-source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state data-source])), :doc "Update `state` given a new `data-source`. Resets the typeahead since any existing suggestions\n  came from the old `data-source`."}, got-suggestions {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 131, :column 8, :end-line 131, :end-column 23, :private true, :arglists (quote ([state suggestions])), :doc "Update state when new suggestions are available"}, :private true, :name re-com.typeahead/got-suggestions, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 23, :method-params ([state suggestions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state suggestions])), :doc "Update state when new suggestions are available"}, input-text-on-key-down! {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 198, :column 8, :end-line 198, :end-column 31, :private true, :arglists (quote ([state-atom event]))}, :private true, :name re-com.typeahead/input-text-on-key-down!, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 31, :method-params ([state-atom event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state-atom event]))}, choose-suggestion-active {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_com/typeahead.cljs", :line 105, :column 8, :end-line 105, :end-column 32, :private true, :arglists (quote ([{:as state, :keys [suggestion-active-index]}]))}, :private true, :name re-com.typeahead/choose-suggestion-active, :variadic false, :file "resources/public/js/compiled/out/re_com/typeahead.cljs", :end-column 32, :method-params ([p__27601]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:as state, :keys [suggestion-active-index]}]))}}, :cljs.spec/registry-ref [], :require-macros {re-com.core re-com.core, cljs.core.async.macros cljs.core.async.macros, re-com.validate re-com.validate, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:description :_on-change :waiting? :children :suggestion-to-string :align :key :placeholder :displaying-suggestion? :input-text :else :_suggestion-to-string :render-suggestion :default :suggestion-active-index :name :rigid? :width :data-source :recur :type :input-text-blurred :_rigid? :on-mouse-down :size :center :small :style :input-text-changed :_change-on-blur? :debounce-delay :suggestion-activated :status :c-search :class :_attr :change-on-blur? :suggestions :code :position :validate-fn :c-input :br :on-mouse-over :child :on-change :on-key-down :disabled? :status-icon? :external-model :always :required :height :span :status-tooltip :model :_debounce-delay :attr}, :order [:on-change :rigid? :change-on-blur? :data-source :suggestion-to-string :debounce-delay :model :waiting? :displaying-suggestion? :input-text :c-search :suggestions :c-input :external-model :suggestion-active-index :always :suggestion-activated :input-text-changed :input-text-blurred :recur :else :name :required :type :validate-fn :description :span :code :default :render-suggestion :status :status-icon? :status-tooltip :placeholder :width :height :disabled? :class :style :attr :br :_debounce-delay :_on-change :_suggestion-to-string :_rigid? :_change-on-blur? :_attr :children :on-key-down :position :child :align :center :size :small :on-mouse-over :on-mouse-down :key]}, :doc nil}