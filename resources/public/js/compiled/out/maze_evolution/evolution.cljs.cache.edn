{:rename-macros {}, :renames {}, :externs {Object {}, setTimeout {}}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name maze-evolution.evolution, :imports nil, :requires {re-frame re-frame.core, re-frame.core re-frame.core, cljs.core.async cljs.core.async}, :cljs.spec/speced-vars [], :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {have-child {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 58, :column 7, :end-line 58, :end-column 17, :arglists (quote ([breeding-pair]))}, :name maze-evolution.evolution/have-child, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 17, :method-params ([breeding-pair]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([breeding-pair]))}, test-population {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 38, :column 7, :end-line 38, :end-column 22, :arglists (quote ([running]))}, :name maze-evolution.evolution/test-population, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 22, :method-params ([running]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([running]))}, create-new-generation {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 89, :column 7, :end-line 89, :end-column 28, :arglists (quote ([running]))}, :name maze-evolution.evolution/create-new-generation, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 28, :method-params ([running]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([running]))}, sort-and-prune-population {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 53, :column 7, :end-line 53, :end-column 32, :arglists (quote ([]))}, :name maze-evolution.evolution/sort-and-prune-population, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, population-size {:name maze-evolution.evolution/population-size, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 6, :column 1, :end-line 6, :end-column 21, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 6, :column 6, :end-line 6, :end-column 21}, :tag number}, individual-time {:name maze-evolution.evolution/individual-time, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 8, :column 1, :end-line 8, :end-column 21, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 8, :column 6, :end-line 8, :end-column 21}, :tag number}, create-initial-population {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 25, :column 7, :end-line 25, :end-column 32, :arglists (quote ([]))}, :name maze-evolution.evolution/create-initial-population, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, pair-and-reproduce {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 81, :column 7, :end-line 81, :end-column 25, :arglists (quote ([]))}, :name maze-evolution.evolution/pair-and-reproduce, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, test-individual {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 28, :column 7, :end-line 28, :end-column 22, :arglists (quote ([move-sequence id]))}, :name maze-evolution.evolution/test-individual, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 22, :method-params ([move-sequence id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([move-sequence id]))}, random-move {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 11, :column 7, :end-line 11, :end-column 18, :arglists (quote ([]))}, :name maze-evolution.evolution/random-move, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, move-time {:name maze-evolution.evolution/move-time, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 7, :column 1, :end-line 7, :end-column 15, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 7, :column 6, :end-line 7, :end-column 15}, :tag number}, create-initial-individual {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 21, :column 7, :end-line 21, :end-column 32, :arglists (quote ([]))}, :name maze-evolution.evolution/create-initial-individual, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, continuously-evolve {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 106, :column 7, :end-line 106, :end-column 26, :arglists (quote ([running]))}, :name maze-evolution.evolution/continuously-evolve, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 26, :method-params ([running]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([running]))}, generation-time {:name maze-evolution.evolution/generation-time, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 9, :column 1, :end-line 9, :end-column 21, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 9, :column 6, :end-line 9, :end-column 21}, :tag number}, update-fitness-list {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 101, :column 7, :end-line 101, :end-column 26, :arglists (quote ([]))}, :name maze-evolution.evolution/update-fitness-list, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:set-new-unique-id :update-fitness :move-ball :else :W :next-generation :reset-individual :move-sequence :current-fitness :recur :E :reset-position :id :population :next-individual :set-new-move-sequence :update-population :S :fitness :N}, :order [:N :E :S :W :id :move-sequence :fitness :reset-position :recur :move-ball :current-fitness :update-fitness :else :next-individual :population :set-new-move-sequence :set-new-unique-id :update-population :next-generation :reset-individual]}, :doc nil}