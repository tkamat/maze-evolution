{:rename-macros {}, :renames {}, :externs {Object {}, setTimeout {}}, :use-macros {go-loop cljs.core.async.macros}, :excludes #{}, :name maze-evolution.evolution, :imports nil, :requires {cljs.core.async cljs.core.async, re-frame re-frame.core, re-frame.core re-frame.core, reducers clojure.core.reducers, clojure.core.reducers clojure.core.reducers}, :cljs.spec/speced-vars [], :uses {timeout cljs.core.async, <! cljs.core.async}, :defs {have-child {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 109, :column 7, :end-line 109, :end-column 17, :arglists (quote ([breeding-pair])), :doc "Uses crossing over and mutation to create an offspring from two parents"}, :name maze-evolution.evolution/have-child, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 17, :method-params ([breeding-pair]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([breeding-pair])), :doc "Uses crossing over and mutation to create an offspring from two parents"}, test-population {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 92, :column 7, :end-line 92, :end-column 22, :arglists (quote ([running])), :doc "Tests the entire population by looping through and testing each individual"}, :name maze-evolution.evolution/test-population, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 22, :method-params ([running]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([running])), :doc "Tests the entire population by looping through and testing each individual"}, create-new-generation {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 142, :column 7, :end-line 142, :end-column 28, :arglists (quote ([running])), :doc "Creates a new population and updates state"}, :name maze-evolution.evolution/create-new-generation, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 28, :method-params ([running]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([running])), :doc "Creates a new population and updates state"}, sort-and-prune-population {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 103, :column 7, :end-line 103, :end-column 32, :arglists (quote ([population])), :doc "Kills the bottom half of the population and sorts the remaining individuals by\n  fitness"}, :name maze-evolution.evolution/sort-and-prune-population, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 32, :method-params ([population]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([population])), :doc "Kills the bottom half of the population and sorts the remaining individuals by\n  fitness"}, population-size {:name maze-evolution.evolution/population-size, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 9, :column 1, :end-line 9, :end-column 21, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 9, :column 6, :end-line 9, :end-column 21}, :tag number}, individual-time {:name maze-evolution.evolution/individual-time, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 11, :column 1, :end-line 11, :end-column 21, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 11, :column 6, :end-line 11, :end-column 21}, :tag number}, create-initial-population {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 77, :column 7, :end-line 77, :end-column 32, :arglists (quote ([])), :doc "Creates a sequence of randomly generated individuals representing the original population"}, :name maze-evolution.evolution/create-initial-population, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Creates a sequence of randomly generated individuals representing the original population"}, pair-and-reproduce {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 133, :column 7, :end-line 133, :end-column 25, :arglists (quote ([population])), :doc "Pairs all members of the population and run have-child twice"}, :name maze-evolution.evolution/pair-and-reproduce, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 25, :method-params ([population]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([population])), :doc "Pairs all members of the population and run have-child twice"}, move-if-eligible {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 27, :column 7, :end-line 27, :end-column 23, :arglists (quote ([direction maze-map current-position])), :doc "Move an individual by a cardinal direction, if there isn't a wall."}, :name maze-evolution.evolution/move-if-eligible, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 23, :method-params ([direction maze-map current-position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([direction maze-map current-position])), :doc "Move an individual by a cardinal direction, if there isn't a wall."}, test-individual {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 82, :column 7, :end-line 82, :end-column 22, :arglists (quote ([move-sequence id])), :doc "Tests an individual through the maze using its move sequence"}, :name maze-evolution.evolution/test-individual, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 22, :method-params ([move-sequence id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([move-sequence id])), :doc "Tests an individual through the maze using its move sequence"}, random-move {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 14, :column 7, :end-line 14, :end-column 18, :arglists (quote ([])), :doc "Generates a random move between :N, :S, :E, and :W"}, :name maze-evolution.evolution/random-move, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Generates a random move between :N, :S, :E, and :W"}, move-time {:name maze-evolution.evolution/move-time, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 10, :column 1, :end-line 10, :end-column 15, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 10, :column 6, :end-line 10, :end-column 15}, :tag number}, headless-evolution-test-and-get-maximum-fitness {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 164, :column 7, :end-line 164, :end-column 54, :arglists (quote ([maze fitness-map n])), :doc "Creates an initial population and tests it n times without a user interface.\n  Returns a list containing the maximum fitness for every generation"}, :name maze-evolution.evolution/headless-evolution-test-and-get-maximum-fitness, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 54, :method-params ([maze fitness-map n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 3, :fn-var true, :arglists (quote ([maze fitness-map n])), :doc "Creates an initial population and tests it n times without a user interface.\n  Returns a list containing the maximum fitness for every generation"}, create-initial-individual {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 71, :column 7, :end-line 71, :end-column 32, :arglists (quote ([])), :doc "Creates a sequence of random moves representing an initial individual"}, :name maze-evolution.evolution/create-initial-individual, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Creates a sequence of random moves representing an initial individual"}, continuously-evolve {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 155, :column 7, :end-line 155, :end-column 26, :arglists (quote ([running])), :doc "Tests population in a loop and creates new generations continuously"}, :name maze-evolution.evolution/continuously-evolve, :variadic false, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :end-column 26, :method-params ([running]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([running])), :doc "Tests population in a loop and creates new generations continuously"}, generation-time {:name maze-evolution.evolution/generation-time, :file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 12, :column 1, :end-line 12, :end-column 21, :meta {:file "/home/tushaar/Projects/maze-evolution/src/cljs/maze_evolution/evolution.cljs", :line 12, :column 6, :end-line 12, :end-column 21}, :tag number}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async.macros cljs.core.async.macros, re-frame re-frame.core, re-frame.core re-frame.core}, :cljs.analyzer/constants {:seen #{:set-new-unique-id :update-fitness :move-ball :else :W :next-generation :reset-individual :move-sequence :current-fitness :recur :E :reset-position :id :population :next-individual :set-new-move-sequence :update-population :S :fitness :N}, :order [:N :E :S :W :id :move-sequence :fitness :reset-position :recur :move-ball :current-fitness :update-fitness :else :population :set-new-move-sequence :set-new-unique-id :next-individual :update-population :next-generation :reset-individual]}, :doc nil}