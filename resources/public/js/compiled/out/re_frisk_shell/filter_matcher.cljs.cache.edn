{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name re-frisk-shell.filter-matcher, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {match-expr {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_frisk_shell/filter_matcher.cljs", :line 4, :column 8, :end-line 4, :end-column 18, :private true, :arglists (quote ([f p]))}, :private true, :name re-frisk-shell.filter-matcher/match-expr, :variadic false, :file "resources/public/js/compiled/out/re_frisk_shell/filter_matcher.cljs", :end-column 18, :method-params ([f p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f p]))}, match-string-prefix {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_frisk_shell/filter_matcher.cljs", :line 7, :column 8, :end-line 7, :end-column 27, :private true, :arglists (quote ([f p]))}, :private true, :name re-frisk-shell.filter-matcher/match-string-prefix, :variadic false, :file "resources/public/js/compiled/out/re_frisk_shell/filter_matcher.cljs", :end-column 27, :method-params ([f p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f p]))}, match-free {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_frisk_shell/filter_matcher.cljs", :line 10, :column 8, :end-line 10, :end-column 18, :private true, :arglists (quote ([f p]))}, :private true, :name re-frisk-shell.filter-matcher/match-free, :variadic false, :file "resources/public/js/compiled/out/re_frisk_shell/filter_matcher.cljs", :end-column 18, :method-params ([f p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f p]))}, match-value {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_frisk_shell/filter_matcher.cljs", :line 13, :column 8, :end-line 13, :end-column 19, :private true, :arglists (quote ([f p]))}, :private true, :name re-frisk-shell.filter-matcher/match-value, :variadic false, :file "resources/public/js/compiled/out/re_frisk_shell/filter_matcher.cljs", :end-column 19, :method-params ([f p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f p]))}, match {:protocol-inline nil, :meta {:file "/home/tushaar/Projects/maze-evolution/resources/public/js/compiled/out/re_frisk_shell/filter_matcher.cljs", :line 19, :column 7, :end-line 19, :end-column 12, :arglists (quote ([filter path]))}, :name re-frisk-shell.filter-matcher/match, :variadic false, :file "resources/public/js/compiled/out/re_frisk_shell/filter_matcher.cljs", :end-column 12, :method-params ([filter path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([filter path]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else :free :expr :string-prefix}, :order [:expr :string-prefix :free :else]}, :doc nil}